<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hexo、GitPage书写博客]]></title>
      <url>/2017/05/11/MISC/Hexo%E3%80%81GitPage%E4%B9%A6%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="使用Hexo、GitPage书写博客"><a href="#使用Hexo、GitPage书写博客" class="headerlink" title="使用Hexo、GitPage书写博客"></a>使用Hexo、GitPage书写博客</h1><h2 id="Hexo、GitPage"><a href="#Hexo、GitPage" class="headerlink" title="Hexo、GitPage"></a>Hexo、GitPage</h2><p>​    以前使用的静态博客工具是<code>Pelican</code>，本来以为有<code>python</code>的基础会好点，然而发现博客和工具的语言没关系，主要还是看方便和外观以及编译的速度，最终了决定选择了<code>HEXO</code>这个工具，从之前的<code>Pelican</code>迁移过来还是很方便，只需要把以前的<code>*.md</code>放到<code>_posts</code>目录中就好了。相关的基础知识就不多说了。</p>
<h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><p>​    关于图片的问题，有多种解决方案。关于图片，一只很欣赏像马克飞象的从剪贴板能够直接上传。使用<code>Atom</code>编辑器。</p>
<h3 id="方案一-使用本地图片"><a href="#方案一-使用本地图片" class="headerlink" title="方案一 使用本地图片"></a>方案一 使用本地图片</h3><p>​    gitpages本省有300M的空间，如果图片数据不是很大，那么放在本地是完全足够的。如下配置即可。</p>
<ul>
<li><p>Atom插件markclip安装</p>
<p>这个插件能够处理剪贴板中的图片文件，将图片存放在和文档名称相同的目录中。</p>
</li>
<li><p>HEXO的插件<code>hexo-asset-image</code></p>
<p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code></p>
<p>然后安装该插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="方案二-使用七牛云"><a href="#方案二-使用七牛云" class="headerlink" title="方案二 使用七牛云"></a>方案二 使用七牛云</h3><ul>
<li><p>Atom插件<code>qiniu-uploader</code>和<code>markdown-assistant</code></p>
<p>申请APP Key，以及相关的配置就不多说了，在这个过程中，由于zone.js中有一个实用了异步http请求，导致了一个错误，在issus中有相关的解决办法。</p>
</li>
</ul>
<h2 id="Markdown书写处理工具"><a href="#Markdown书写处理工具" class="headerlink" title="Markdown书写处理工具"></a>Markdown书写处理工具</h2><p>​    如果图片比较多，那么Atom结合前面说的插件、非常给力。另外推介<code>Typora</code>工具来写，支持图片的拖拽。更给力的是，将Markdown导出非常给力。</p>
<h2 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h2><p>​    这个主题是相当棒的，本身集成了很多插件，比如Mathjax，搜索，打赏、评论等功能，只需要简单的修改就可以打开相关的功能。</p>
<p>​    <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next官网</a></p>
<h2 id="发布到coding-net"><a href="#发布到coding-net" class="headerlink" title="发布到coding.net"></a>发布到coding.net</h2><p>​    和<code>github</code>类似，也可以同步发布到<code>coding.net</code>上，在国内访问还是coding会比较快。只需要在coding上创建一个项目，该项目的名字和用户名必须一致（不然无法加载静态文件）。相关配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository:</div><div class="line">    github: https://github.com/username/username.github.io.git</div><div class="line">    coding: https://git.coding.net/username/username.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> GitPages </tag>
            
            <tag> Coding Pages </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[主成分析(PCA)]]></title>
      <url>/2017/05/11/machinelearning/%E4%B8%BB%E6%88%90%E5%88%86%E6%9E%90-PCA/</url>
      <content type="html"><![CDATA[<h1 id="主成分析（PCA）"><a href="#主成分析（PCA）" class="headerlink" title="主成分析（PCA）"></a>主成分析（PCA）</h1><p>一套能够适用于各种训练的数据处理方法</p>
<p>ex: 数据的维度</p>
<p><img src="/2017/05/11/machinelearning/主成分析-PCA/4bc6cdd4f35f6c259cc5dd84d013e8ae.png" alt=""></p>
<p>PCA，将数据的中心作为新的坐标轴，并且旋转<code>X</code>、<code>Y</code>轴</p>
<p><img src="/2017/05/11/machinelearning/主成分析-PCA/dff0f1bc914d4dc7fae88057a65138a6.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深度学习]]></title>
      <url>/2017/05/04/machinelearning/2017_05_04_%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><h2 id="Logistic-函数"><a href="#Logistic-函数" class="headerlink" title="Logistic 函数"></a>Logistic 函数</h2><p>​        <strong>Logistic函数或Logistic曲线</strong>是一种常见的S形函数，它是皮埃尔·弗朗索瓦·韦吕勒在1844或1845年在研究它与人口增长的关系时命名的。广义Logistic曲线可以模仿一些情况人口增长（<em>P</em>）的S形曲线。起初阶段大致是<a href="http://baike.baidu.com/item/%E6%8C%87%E6%95%B0%E5%A2%9E%E9%95%BF" target="_blank" rel="external">指数增长</a>；然后随着开始变得饱和，增加变慢；最后，达到成熟时增加停止。[1]<a href=""> </a></p>
<p>很像一个“S”型吧，所以又叫 sigmoid曲线（S型曲线）。<br>$$<br>y=\sigma(z)<br>$$<br>$\sigma$ 的定义为<br>$$<br>\sigma={1\over 1+e^{-z}}<br>$$<br>python实现Logistic函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"></div><div class="line">def logistic(z):</div><div class="line">    return 1 / (1 + np.exp(-z))</div><div class="line"></div><div class="line"># Plot the logistic function</div><div class="line">z = np.linspace(-6,6,100)</div><div class="line">plt.plot(z, logistic(z), &apos;b-&apos;)</div><div class="line">plt.xlabel(&apos;$z$&apos;, fontsize=15)</div><div class="line">plt.ylabel(&apos;$\sigma(z)$&apos;, fontsize=15)</div><div class="line">plt.title(&apos;logistic function&apos;)</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h2 id="Logistic函数的导数"><a href="#Logistic函数的导数" class="headerlink" title="Logistic函数的导数"></a>Logistic函数的导数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def logistic_derivative(z):</div><div class="line">	return logistic(z) * (1 - logistic(z))</div><div class="line"># Plot the derivative of the logistic function</div><div class="line">z = np.linspace(-6,6,100)</div><div class="line">plt.plot(z, logistic_derivative(z), &apos;r-&apos;)</div><div class="line">plt.xlabel(&apos;$z$&apos;, fontsize=15)</div><div class="line">plt.ylabel(&apos;$\\frac&#123;\\partial \\sigma(z)&#125;&#123;\\partial z&#125;$&apos;, fontsize=15)</div><div class="line">plt.title(&apos;derivative of the logistic function&apos;)</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h2 id="Logistic回归"><a href="#Logistic回归" class="headerlink" title="Logistic回归"></a>Logistic回归</h2><p>​        logistic回归是一种广义线性回归（generalized linear model），因此与多重线性回归分析有很多相同之处。它们的模型形式基本上相同，都具有 $w‘x+b$，其中w和b是待求参数，其区别在于他们的<a href="http://baike.baidu.com/item/%E5%9B%A0%E5%8F%98%E9%87%8F" target="_blank" rel="external">因变量</a>不同，多重线性回归直接将w’x+b作为因变量，即y =w‘x+b，而logistic回归则通过函数L将w‘x+b对应一个隐状态p，p =L(w‘x+b),然后根据p 与1-p的大小决定因变量的值。如果L是logistic函数，就是logistic回归，如果L是多项式函数就是多项式回归。</p>
<h2 id="训练一个Logistic回归训练器"><a href="#训练一个Logistic回归训练器" class="headerlink" title="训练一个Logistic回归训练器"></a>训练一个Logistic回归训练器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&quot;&quot;&quot;Softmax.&quot;&quot;&quot;</div><div class="line"></div><div class="line">scores = [3.0, 1.0, 0.2]</div><div class="line"></div><div class="line">import numpy as np</div><div class="line"></div><div class="line">def softmax(x):</div><div class="line">    &quot;&quot;&quot;Compute softmax values for each sets of scores in x.&quot;&quot;&quot;</div><div class="line">    pass  # TODO: Compute and return softmax(x)</div><div class="line">    return np.exp(x) / np.sum(np.exp(x), axis=0)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">print(softmax(scores))</div><div class="line"></div><div class="line"># Plot softmax curves</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">x = np.arange(-2.0, 6.0, 0.1)</div><div class="line">scores = np.vstack([x, np.ones_like(x), 0.2 * np.ones_like(x)])</div><div class="line"></div><div class="line">plt.plot(x, softmax(scores).T, linewidth=2)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h2 id="训练集合"><a href="#训练集合" class="headerlink" title="训练集合"></a>训练集合</h2><p><img src="/2017/05/04/machinelearning/2017_05_04_深度学习/a5d25bd08aa42c104a190f6385399b31.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[特征选择]]></title>
      <url>/2017/05/04/machinelearning/2017_05_04_%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<h1 id="特征的选择"><a href="#特征的选择" class="headerlink" title="特征的选择"></a>特征的选择</h1><ol>
<li>直觉</li>
<li>代码找出特征</li>
<li>可视化</li>
<li>重复</li>
</ol>
<h2 id="去除特征"><a href="#去除特征" class="headerlink" title="去除特征"></a>去除特征</h2><h2 id="特征不等于信息"><a href="#特征不等于信息" class="headerlink" title="特征不等于信息"></a>特征不等于信息</h2><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><h2 id="lasso回归"><a href="#lasso回归" class="headerlink" title="lasso回归"></a>lasso回归</h2><p>能够将不太影响分类的特征的权重设置为0</p>
]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文本学习]]></title>
      <url>/2017/05/04/machinelearning/2017_05_04_%E6%96%87%E6%9C%AC%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="文本学习"><a href="#文本学习" class="headerlink" title="文本学习"></a>文本学习</h1><h2 id="词袋"><a href="#词袋" class="headerlink" title="词袋"></a>词袋</h2><p>每个词的频率</p>
<h2 id="词袋属性"><a href="#词袋属性" class="headerlink" title="词袋属性"></a>词袋属性</h2><ul>
<li>无序</li>
<li>长词</li>
<li>复合词</li>
</ul>
<h2 id="sklearn-词袋"><a href="#sklearn-词袋" class="headerlink" title="sklearn 词袋"></a>sklearn 词袋</h2><h3 id="低信息量词"><a href="#低信息量词" class="headerlink" title="低信息量词"></a>低信息量词</h3><h3 id="停词"><a href="#停词" class="headerlink" title="停词"></a>停词</h3><h3 id="词干提取"><a href="#词干提取" class="headerlink" title="词干提取"></a>词干提取</h3><ul>
<li>词干提取算法（STEMMER）</li>
</ul>
<h3 id="IF-IDF"><a href="#IF-IDF" class="headerlink" title="IF-IDF"></a>IF-IDF</h3><p>IDF：逆向文件频率</p>
<p>实际上就是IF*IDF</p>
<p>更注重于罕见的词汇！</p>
<h2 id="TfidfVectorizer"><a href="#TfidfVectorizer" class="headerlink" title="TfidfVectorizer"></a>TfidfVectorizer</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li><code>max_df</code>，0.5，如果在%50的文档中出现了这个词，tfidf就会删除这个词</li>
</ul>
]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[特征缩放]]></title>
      <url>/2017/05/04/machinelearning/2017_05_04_%E7%89%B9%E5%BE%81%E7%BC%A9%E6%94%BE/</url>
      <content type="html"><![CDATA[<h1 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h1><p>$$<br>x’=（x-x<em>{min}）/（x</em>{max-}x_{min}）<br>$$</p>
<h3 id="sklearn-MinMaxScaler"><a href="#sklearn-MinMaxScaler" class="headerlink" title="sklearn MinMaxScaler"></a>sklearn MinMaxScaler</h3>]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聚类]]></title>
      <url>/2017/05/03/machinelearning/2017_05_03_%E8%81%9A%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><h2 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h2><h2 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h2><h2 id="K均值聚类（K-MEANSs）"><a href="#K均值聚类（K-MEANSs）" class="headerlink" title="K均值聚类（K-MEANSs）"></a>K均值聚类（K-MEANSs）</h2><h3 id="画出聚类的中心"><a href="#画出聚类的中心" class="headerlink" title="画出聚类的中心"></a>画出聚类的中心</h3><ol>
<li>分配</li>
<li>优化</li>
</ol>
<h2 id="sklearn-cluster"><a href="#sklearn-cluster" class="headerlink" title="sklearn cluster"></a>sklearn cluster</h2><h2 id="K均值聚类的局限"><a href="#K均值聚类的局限" class="headerlink" title="K均值聚类的局限"></a>K均值聚类的局限</h2><ul>
<li>对于同意的一个集合，相同的聚类中心，得出的结果不一定相投</li>
</ul>
]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异常值处理]]></title>
      <url>/2017/05/03/machinelearning/2017_05_03_%E5%BC%82%E5%B8%B8%E5%80%BC%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="异常值的处理"><a href="#异常值的处理" class="headerlink" title="异常值的处理"></a>异常值的处理</h1><h2 id="异常值的产生"><a href="#异常值的产生" class="headerlink" title="异常值的产生"></a>异常值的产生</h2><ul>
<li>传感器错误</li>
<li>录入错误</li>
<li>异常事件</li>
</ul>
<h2 id="异常值处理"><a href="#异常值处理" class="headerlink" title="异常值处理"></a>异常值处理</h2><p><strong> 处理流程</strong></p>
<ol>
<li>训练数据集</li>
<li>去掉%10的数据</li>
<li>再次训练</li>
<li>重复第二部，去掉与之前的%10的数据</li>
</ol>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>欺诈检测</p>
]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读《聪明人用方格笔记本》]]></title>
      <url>/2017/05/03/read/2017_05_03_%E8%AF%BB%E3%80%8A%E8%81%AA%E6%98%8E%E4%BA%BA%E7%94%A8%E6%96%B9%E6%A0%BC%E7%AC%94%E8%AE%B0%E6%9C%AC%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="读《聪明人用方格笔记本》"><a href="#读《聪明人用方格笔记本》" class="headerlink" title="读《聪明人用方格笔记本》"></a>读《聪明人用方格笔记本》</h1><h2 id="笔记三法则"><a href="#笔记三法则" class="headerlink" title="笔记三法则"></a>笔记三法则</h2><ul>
<li>使用方格笔记</li>
<li>标出题目</li>
<li>用三分法记录<ul>
<li>事实</li>
<li>解释</li>
<li>行动</li>
</ul>
</li>
</ul>
<h2 id="使用方格笔记本"><a href="#使用方格笔记本" class="headerlink" title="使用方格笔记本"></a>使用方格笔记本</h2><ul>
<li>行首对齐</li>
<li>在行首两三个字的地方写小标题</li>
<li>在比小标题往后两三个字的地方写内容</li>
<li>项目改变时空一行</li>
<li>注意流出空隙，留出进行信息整理的空间</li>
</ul>
<p>学习中最重要的是什么？</p>
<p>“尽可能多地往脑子里塞东西”</p>
<p>“不怎么往脑子里塞东西”</p>
<p>一种从有到无的境界</p>
<p>框架=“整理思路的书架”</p>
<p>人容易被“框架”左右的生物</p>
<h2 id="黄金三分法"><a href="#黄金三分法" class="headerlink" title="黄金三分法"></a>黄金三分法</h2><p>康奈尔笔记本分为（板书（Note）、发现点（Queue）、总结（summary））</p>
<h3 id="麦肯锡的“空-雨-伞”"><a href="#麦肯锡的“空-雨-伞”" class="headerlink" title="麦肯锡的“空-雨-伞”"></a>麦肯锡的“空-雨-伞”</h3><h2 id="横向使用"><a href="#横向使用" class="headerlink" title="横向使用"></a>横向使用</h2><h2 id="A4"><a href="#A4" class="headerlink" title="A4"></a>A4</h2><h2 id="像报纸标出题目"><a href="#像报纸标出题目" class="headerlink" title="像报纸标出题目"></a>像报纸标出题目</h2><h3 id="一页一主题"><a href="#一页一主题" class="headerlink" title="一页一主题"></a>一页一主题</h3><h2 id="10000张纸法则"><a href="#10000张纸法则" class="headerlink" title="10000张纸法则"></a>10000张纸法则</h2><p>出自于咨询公司</p>
<h2 id="学习笔记本"><a href="#学习笔记本" class="headerlink" title="学习笔记本"></a>学习笔记本</h2><ul>
<li>记忆性笔记本</li>
<li>思考性笔记本</li>
<li>传达性笔记本</li>
</ul>
<h3 id="使用空白一秒"><a href="#使用空白一秒" class="headerlink" title="使用空白一秒"></a>使用空白一秒</h3><p>从“看黑板-记笔记”到“看黑板-放到脑袋-记笔记”</p>
<h3 id="两页一主题"><a href="#两页一主题" class="headerlink" title="两页一主题"></a>两页一主题</h3><p>将A4或者B5作为一页。</p>
<p>或者直接横向使用</p>
<h3 id="驾驭两页之间的中部区域"><a href="#驾驭两页之间的中部区域" class="headerlink" title="驾驭两页之间的中部区域"></a>驾驭两页之间的中部区域</h3><p>思维不应该因为笔记本的页面限制而被限制</p>
<h3 id="善于发现能够进步？"><a href="#善于发现能够进步？" class="headerlink" title="善于发现能够进步？"></a>善于发现能够进步？</h3><p>只有进一步的行动才能进步，将“发现”转变为“故事”</p>
<h3 id="逻辑连接词"><a href="#逻辑连接词" class="headerlink" title="逻辑连接词"></a>逻辑连接词</h3><ul>
<li>使用自己的逻辑连词词</li>
<li>三种箭头<ul>
<li>展开箭头</li>
<li>总结箭头</li>
<li>强调箭头</li>
</ul>
</li>
</ul>
<h3 id="总结写解决问题的要点"><a href="#总结写解决问题的要点" class="headerlink" title="总结写解决问题的要点"></a>总结写解决问题的要点</h3><h2 id="工作笔记本"><a href="#工作笔记本" class="headerlink" title="工作笔记本"></a>工作笔记本</h2><h3 id="目的是舍弃"><a href="#目的是舍弃" class="headerlink" title="目的是舍弃"></a>目的是舍弃</h3><h3 id="秘术是整理"><a href="#秘术是整理" class="headerlink" title="秘术是整理"></a>秘术是整理</h3><p>整理术和收拾法的关键就是将“舍弃”发挥到极致。</p>
<h3 id="提问力等于咨询力"><a href="#提问力等于咨询力" class="headerlink" title="提问力等于咨询力"></a>提问力等于咨询力</h3><h2 id="提案笔记本"><a href="#提案笔记本" class="headerlink" title="提案笔记本"></a>提案笔记本</h2>]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回归]]></title>
      <url>/2017/04/28/machinelearning/2017_04_28_%E5%9B%9E%E5%BD%92/</url>
      <content type="html"><![CDATA[<h1 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h1><h2 id="连续监督学习"><a href="#连续监督学习" class="headerlink" title="连续监督学习"></a>连续监督学习</h2><ul>
<li>连续输出和离散输出的区别</li>
</ul>
<p>这里的连续主要是指输出是连续的</p>
<p><img src="/2017/04/28/machinelearning/2017_04_28_回归/5ab30599c89a6a6bbf55e921d22497f4.png" alt=""></p>
<h2 id="回归线性方程"><a href="#回归线性方程" class="headerlink" title="回归线性方程"></a>回归线性方程</h2><p><img src="/2017/04/28/machinelearning/2017_04_28_回归/cf876e389a34ef52288774644873b8d7.png" alt=""></p>
<p>slope：斜率<br>intercept：截距</p>
<h3 id="斜率和截距"><a href="#斜率和截距" class="headerlink" title="斜率和截距"></a>斜率和截距</h3><p>斜率越大，上升越快</p>
<h2 id="Sklearn中的线形拟合"><a href="#Sklearn中的线形拟合" class="headerlink" title="Sklearn中的线形拟合"></a>Sklearn中的线形拟合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reg = linear_model.LinearRegression()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reg.fit ([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>]], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</div><div class="line">LinearRegression(copy_X=<span class="keyword">True</span>, fit_intercept=<span class="keyword">True</span>, n_jobs=<span class="number">1</span>, normalize=<span class="keyword">False</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reg.coef_</div><div class="line">array([ <span class="number">0.5</span>,  <span class="number">0.5</span>])</div></pre></td></tr></table></figure>
<h3 id="线性回归误差"><a href="#线性回归误差" class="headerlink" title="线性回归误差"></a>线性回归误差</h3><p>使误差有最小值。</p>
<h4 id="最小二乘法（OLS）"><a href="#最小二乘法（OLS）" class="headerlink" title="最小二乘法（OLS）"></a>最小二乘法（OLS）</h4><p><code>sklearn</code>中的线性拟合即使用的是该方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line">dots = np.array([[1,6], [2,5], [3,7], [4,10], [5, 12]])</div><div class="line"></div><div class="line">X = dots[:, 0]</div><div class="line">Y = dots[:, 1]</div><div class="line">plt.scatter(X, Y, color = &quot;b&quot;, label=&quot;fast&quot;)</div><div class="line"></div><div class="line"></div><div class="line">def nihe(k, x, b):</div><div class="line">    return k*x + b</div><div class="line"></div><div class="line"></div><div class="line">#a0 = （∑Yi) / n - a1（∑Xi) / n （式1-8)</div><div class="line">#a1 = [n∑Xi Yi - （∑Xi ∑Yi)] / [n∑Xi2 - （∑Xi)2 )] （式1-9)</div><div class="line"></div><div class="line">n = dots.shape[0]</div><div class="line">a1 = (n*sum(X*Y) - sum(X)*sum(Y)) / (n*sum(X**2)-(sum(X)**2))</div><div class="line">a0 = sum(Y)/n - a1*(sum(X))/n</div><div class="line">print(a0, a1)</div><div class="line"></div><div class="line">R_Y = [nihe(a1, x, a0) for x in X]</div><div class="line">plt.plot(X, R_Y)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h5 id="使用平方误差和来评估拟合的效果？"><a href="#使用平方误差和来评估拟合的效果？" class="headerlink" title="使用平方误差和来评估拟合的效果？"></a>使用平方误差和来评估拟合的效果？</h5><p><img src="/2017/04/28/machinelearning/2017_04_28_回归/30d49cd753e2024b5f3155f4836c570e.png" alt=""></p>
<p>​        如上图所示，如果只是使用绝对值，那么途中的3种拟合方式没有什么区别，然而如果使用平方的方式，只有中间的误差是最小的。</p>
<ul>
<li>使用平方误差和的方式的不足只处<br><img src="/2017/04/28/machinelearning/2017_04_28_回归/6012fb4f957b0177e9647771ab32aa0b.png" alt=""></li>
</ul>
<h5 id="R平方指标"><a href="#R平方指标" class="headerlink" title="R平方指标"></a>R平方指标</h5><p>R平方指标弥补了平方误差和的不足之处。</p>
<h4 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><h3 id="什么数据适用于线性回归"><a href="#什么数据适用于线性回归" class="headerlink" title="什么数据适用于线性回归"></a>什么数据适用于线性回归</h3><p>线性的，可以拟合成<br>$$<br>y = ax + b<br>$$</p>
<h3 id="回归于分类的比较"><a href="#回归于分类的比较" class="headerlink" title="回归于分类的比较"></a>回归于分类的比较</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>比较</td>
<td>监督分类</td>
<td>回归</td>
</tr>
<tr>
<td>输出类型</td>
<td>离散（类型标签）</td>
<td>连续（数字）</td>
</tr>
<tr>
<td>目的</td>
<td>找到决策边界</td>
<td>最优拟合线</td>
</tr>
<tr>
<td>评估指标</td>
<td>准确率</td>
<td>R平方值</td>
</tr>
</tbody>
</table>
<h2 id="多变量（多元）回归（MULTI-VARIATE-REGRESSION"><a href="#多变量（多元）回归（MULTI-VARIATE-REGRESSION" class="headerlink" title="多变量（多元）回归（MULTI-VARIATE REGRESSION)"></a>多变量（多元）回归（MULTI-VARIATE REGRESSION)</h2>]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据以及数据的处理]]></title>
      <url>/2017/04/27/machinelearning/2017_04_27_%E6%95%B0%E6%8D%AE%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="机器学习中的数据处理"><a href="#机器学习中的数据处理" class="headerlink" title="机器学习中的数据处理"></a>机器学习中的数据处理</h1><h2 id="数据的类型"><a href="#数据的类型" class="headerlink" title="数据的类型"></a>数据的类型</h2><ul>
<li>数值类型<ul>
<li>eg：薪水、年龄、评分</li>
</ul>
</li>
<li>类别变量<ul>
<li>eg：职位</li>
</ul>
</li>
<li>时间序列<ul>
<li>时间戳</li>
</ul>
</li>
<li>文本数据<ul>
<li>邮件类容</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[支持向量机]]></title>
      <url>/2017/04/25/machinelearning/2017_04_25_%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</url>
      <content type="html"><![CDATA[<h1 id="支持向量机（SVM）"><a href="#支持向量机（SVM）" class="headerlink" title="支持向量机（SVM）"></a>支持向量机（SVM）</h1><h2 id="sklearn-SVM分类"><a href="#sklearn-SVM分类" class="headerlink" title="sklearn SVM分类"></a>sklearn SVM分类</h2><h2 id="SVC的参数"><a href="#SVC的参数" class="headerlink" title="SVC的参数"></a>SVC的参数</h2><p>C：</p>
<p>kernel：</p>
<h2 id="过度拟合"><a href="#过度拟合" class="headerlink" title="过度拟合"></a>过度拟合</h2>]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MachineLearning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[朴素贝叶斯]]></title>
      <url>/2017/04/25/machinelearning/2017_04_25_%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</url>
      <content type="html"><![CDATA[<h1 id="贝叶斯算法"><a href="#贝叶斯算法" class="headerlink" title="贝叶斯算法"></a>贝叶斯算法</h1><h2 id="sklearn-贝叶斯分类"><a href="#sklearn-贝叶斯分类" class="headerlink" title="sklearn 贝叶斯分类"></a>sklearn 贝叶斯分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from sklearn.naive_bayes import GaussianNB</div><div class="line">from sklearn.metrics import accuracy_score</div><div class="line"></div><div class="line">clf = GaussianNB()</div><div class="line"># print(labels_train)</div><div class="line">clf.fit(features_train, labels_train)</div><div class="line">pred = clf.predict(features_test)</div><div class="line">accuracy = accuracy_score(pred, labels_test)</div><div class="line">print(&quot;准确率:%f&quot;,accuracy)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MachineLearning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IP首部详解]]></title>
      <url>/2016/12/26/linuxtcp/2016_12_26_ip%E9%A6%96%E9%83%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="IP地址首部"><a href="#IP地址首部" class="headerlink" title="IP地址首部"></a>IP地址首部</h1><p><img src="http://7xrn62.com1.z0.glb.clouddn.com/c55969a688139ea87938f115e871ff2b.png" alt="IPv4首部"></p>
<p><img src="http://7xrn62.com1.z0.glb.clouddn.com/14e5016192d3d137fc512e21f298e91f.png" alt="IPv6首部"></p>
]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
            <tag> tcp/ip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[arp的帧格式]]></title>
      <url>/2016/12/19/linuxtcp/2016_12_19_arp%E7%9A%84%E5%B8%A7%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="arp的帧格式以及arp举例"><a href="#arp的帧格式以及arp举例" class="headerlink" title="arp的帧格式以及arp举例"></a>arp的帧格式以及arp举例</h1><h2 id="arp的帧和以太网帧格式对比"><a href="#arp的帧和以太网帧格式对比" class="headerlink" title="arp的帧和以太网帧格式对比"></a>arp的帧和以太网帧格式对比</h2><p><img src="http://7xrn62.com1.z0.glb.clouddn.com/be3be0846258e2778c7eede0ca67fc0a.png" alt="arp的帧"><br>以太网的帧结构<br><img src="http://7xrn62.com1.z0.glb.clouddn.com/2022a3006b4e0a3b3dc0b3f2ea031e46.png" alt="以太网帧结构"></p>
<table>
<thead>
<tr>
<th style="text-align:left">字段</th>
<th style="text-align:center">字段长度（字节）</th>
<th style="text-align:right">目的</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">目的地址（DST）</td>
<td style="text-align:center">6</td>
<td style="text-align:right">目的地址</td>
</tr>
<tr>
<td style="text-align:left">源地址（SRC）</td>
<td style="text-align:center">6</td>
<td style="text-align:right">源地址</td>
</tr>
<tr>
<td style="text-align:left">长度或者类型</td>
<td style="text-align:center">2</td>
<td style="text-align:right">长度或者类型</td>
</tr>
<tr>
<td style="text-align:left">硬件类型</td>
<td style="text-align:center">2</td>
<td style="text-align:right">指明了发送方想知道的硬件接口类型，以太网的值为1</td>
</tr>
<tr>
<td style="text-align:left">协议类型</td>
<td style="text-align:center">2</td>
<td style="text-align:right">指明了发送方提供的高层协议类型，IP为0800（16进制）；</td>
</tr>
<tr>
<td style="text-align:left">硬件的长度</td>
<td style="text-align:center">1</td>
<td style="text-align:right">指明了硬件地址长度，这样ARP报文就可以在任意硬件和任意协议的网络中使用</td>
</tr>
<tr>
<td style="text-align:left">协议的长度</td>
<td style="text-align:center">1</td>
<td style="text-align:right">指明了高层协议地址的长度，这样ARP报文就可以在任意硬件和任意协议的网络中使用</td>
</tr>
<tr>
<td style="text-align:left">操作类型</td>
<td style="text-align:center">2</td>
<td style="text-align:right">用来表示这个报文的类型，ARP请求为1，ARP响应为2，RARP请求为3，RARP响应为4</td>
</tr>
<tr>
<td style="text-align:left">发送方的硬件地址</td>
<td style="text-align:center">6</td>
<td style="text-align:right">发送放的硬件地址</td>
</tr>
<tr>
<td style="text-align:left">发送放的协议地址</td>
<td style="text-align:center">4</td>
<td style="text-align:right">发送方的协议地址，eg. IPv</td>
</tr>
<tr>
<td style="text-align:left">目标的硬件地址</td>
<td style="text-align:center">6</td>
<td style="text-align:right">目标的硬件地址</td>
</tr>
<tr>
<td style="text-align:left">目标的协议地址</td>
<td style="text-align:center">4</td>
<td style="text-align:right">目标的协议地址</td>
</tr>
</tbody>
</table>
<h2 id="arp举例"><a href="#arp举例" class="headerlink" title="arp举例"></a>arp举例</h2><h3 id="正常的访问"><a href="#正常的访问" class="headerlink" title="正常的访问"></a>正常的访问</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ sudo tcpdump <span class="_">-e</span> arp</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tcpdump: data link type PKTAP</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on pktap, link-type PKTAP (Packet Tap), capture size 262144 bytes</div><div class="line">21:14:28.443833 94:77:2b:88:80:6e (oui Unknown) &gt; 70:71:bc:79:ae:a4 (oui Unknown), ethertype ARP (0x0806), length 42: Request who-has 192.168.3.5 tell 192.168.3.1, length 28</div><div class="line">21:14:28.443853 70:71:bc:79:ae:a4 (oui Unknown) &gt; 94:77:2b:88:80:6e (oui Unknown), ethertype ARP (0x0806), length 42: Reply 192.168.3.5 is-at 70:71:bc:79:ae:a4 (oui Unknown), length 28</div><div class="line">21:14:36.448013 94:77:2b:88:80:6e (oui Unknown) &gt; Broadcast, ethertype ARP (0x0806), length 60: Request who-has 192.168.3.71 tell 192.168.3.1, length 46</div><div class="line">21:14:43.923325 dc:f0:90:87:22:bb (oui Unknown) &gt; Broadcast, ethertype ARP (0x0806), length 42: Request who-has 192.168.3.3 tell 192.168.3.86, length 28</div><div class="line">21:14:48.121289 e8:03:9a:cd:72:c8 (oui Unknown) &gt; Broadcast, ethertype ARP (0x0806), length 42: Request who-has 192.168.3.65 tell 192.168.3.62, length 28</div><div class="line">21:14:48.122152 02:22:6c:06:8f:d4 (oui Unknown) &gt; Broadcast, ethertype ARP (0x0806), length 42: Request who-has 192.168.3.62 tell 192.168.3.65, length 28</div></pre></td></tr></table></figure></p>
<h3 id="访问地址不存在"><a href="#访问地址不存在" class="headerlink" title="访问地址不存在"></a>访问地址不存在</h3><h3 id="arp欺骗"><a href="#arp欺骗" class="headerlink" title="arp欺骗"></a>arp欺骗</h3><p><img src="http://7xrn62.com1.z0.glb.clouddn.com/ca2b6dcb10e0f3d0f9a076a349b6bbd7.png" alt="arp欺骗"></p>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个请求的举例]]></title>
      <url>/2016/12/19/linuxtcp/2016_12_19_%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%BE%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="以太网中的请求说明"><a href="#以太网中的请求说明" class="headerlink" title="以太网中的请求说明"></a>以太网中的请求说明</h1><p><img src="http://7xrn62.com1.z0.glb.clouddn.com/bc0cef13681c9638eca07a49b2fb95cf.png" alt="完整的局域网请求"></p>
<p>当再浏览器中输入<code>http://10.0.0.1</code>,回发生如下事情。</p>
<ul>
<li><p>1、浏览器回解析URL，会得到IP地址<code>10.0.0.1</code>。</p>
</li>
<li><p>2、该应用回使用TCP协议去连接<code>10.0.0.1</code>。</p>
</li>
<li><p>3、TCP试图给<code>10.0.0.1</code>发送一个报文。</p>
</li>
<li><p>4、因为<code>10.0.0.1</code>是再局域网中，所以直接通过网络接口发出。</p>
</li>
<li><p>5、由于再以太网中，那么必须把32位的地址转换成48位的网络地址，这个时候就需要arp地址的功能，把逻辑上的IP地址转换位48位的物理地址，这也是arp协议的功能。</p>
</li>
<li><p>6、这个时候，arp发送一份广播包，告诉局域网内的所有的主机</p>
</li>
<li><p>7、目标主机收到arp报文之后，就会发出一个响应的arp，这个响应中包含了硬件地址和IP地址。</p>
</li>
<li><p>8、收到arp应答后，使用arp进行请求–应答交互的IP数据包就可以传送了。</p>
</li>
<li><p>9、发送IP数据到目的主机</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[以太网的帧结构]]></title>
      <url>/2016/12/08/linuxtcp/2016_12_08_%E4%BB%A5%E5%A4%AA%E7%BD%91%E7%9A%84%E5%B8%A7%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="以太网的帧结构"><a href="#以太网的帧结构" class="headerlink" title="以太网的帧结构"></a>以太网的帧结构</h1><p><img src="http://7xrn62.com1.z0.glb.clouddn.com/2022a3006b4e0a3b3dc0b3f2ea031e46.png" alt="以太网帧结构"></p>
<table>
<thead>
<tr>
<th style="text-align:left">字段</th>
<th style="text-align:center">字段长度（字节）</th>
<th style="text-align:right">目的</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">前导码(Preamble)</td>
<td style="text-align:center">7</td>
<td style="text-align:right">同步</td>
</tr>
<tr>
<td style="text-align:left">帧开始符(SFD)</td>
<td style="text-align:center">1</td>
<td style="text-align:right">标明下一个字节为目的的MAC地址</td>
</tr>
<tr>
<td style="text-align:left">目的的MAC地址</td>
<td style="text-align:center">6</td>
<td style="text-align:right">指明帧的接收者</td>
</tr>
<tr>
<td style="text-align:left">源MAC地址</td>
<td style="text-align:center">6</td>
<td style="text-align:right">指明帧的发送者</td>
</tr>
<tr>
<td style="text-align:left">长度（LENGTH）</td>
<td style="text-align:center">2</td>
<td style="text-align:right">帧的数据字段的长度（长度或类型）</td>
</tr>
<tr>
<td style="text-align:left">类型（Type）</td>
<td style="text-align:center">2</td>
<td style="text-align:right">帧中数据的协议类型（长度或类型）</td>
</tr>
<tr>
<td style="text-align:left">数据和填充（Data and Pad）</td>
<td style="text-align:center">46~1500</td>
<td style="text-align:right">高层的数据，通常为3层协议数据单元。对于TCP/IP是IP数据包</td>
</tr>
<tr>
<td style="text-align:left">帧校验序列（FCS）</td>
<td style="text-align:center">4</td>
<td style="text-align:right">对接收网卡提供判断是否传输错误的一种方法，如果发现错误，丢弃此帧</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[主方法定理]]></title>
      <url>/2016/09/19/%E7%AE%97%E6%B3%95/2016_09_19_%E4%B8%BB%E6%96%B9%E6%B3%95%E5%AE%9A%E7%90%86/</url>
      <content type="html"><![CDATA[<p>常见的解递归的方法</p>
<h2 id="代换法"><a href="#代换法" class="headerlink" title="代换法"></a>代换法</h2><ul>
<li>猜测解的形式</li>
<li>使用数学归纳法找出使解真正有效的常熟</li>
</ul>
<h2 id="递归树法"><a href="#递归树法" class="headerlink" title="递归树法"></a>递归树法</h2><h2 id="主方法定理"><a href="#主方法定理" class="headerlink" title="主方法定理"></a>主方法定理</h2><p>设$a&gt;1$和 $b&gt;1$ 为常数,设 $f(n)$ 为一函数, $T(n)$ 由递归式</p>
<p>$$T(n) = aT(n/b) + f(n)$$</p>
<p>对非负整数定义,其中$n/b$是指$\lfloor n/b \rfloor$或者是$\lceil n/b \rceil$.那么T(n)有如下的渐进界.</p>
<ul>
<li><p>1) 若对于某常数$\varepsilon &gt; 0$,有$f(n) = O(n^{log_b^{a -  \varepsilon}})$,则有$T(n) = \Theta (n^{log_b^{a }})$</p>
</li>
<li><p>2) 若$f(n) = \Theta(n^{log_b^a})$,则有$T(n) = \Theta(n^{log_b^a}lg^n)$</p>
</li>
<li><p>3) 若对某常数$\varepsilon &gt; 0$, 有$f(n) = \Omega(n^{log_b^{a + \varepsilon}})$,且对常数$c &lt; 1$与所有足够大的$n$,有$af(n/b) \le cf(n)$,则$T(n) = \Theta(f(n))$.</p>
</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>比较$f(n)$和$n^{log_a^b}$的大小.</p>
<p>在第一种情况中,可以看到应该是$n^{log_a^b}$比$f(n)$大.也就是说,<br>$$ T(n)=\left{<br>\begin{aligned}<br>\Theta (n^{log_b^{a }}) &amp; &amp;{ n^{log_a^b}<f(n), \varepsilon=""> 0}\<br>\Theta(n^{log_b^a}lg^n)  &amp; &amp; {n^{log_a^b}=f(n), af(n/b)\le cf(n)}\<br>\Theta(f(n))  &amp; &amp; {n^{log_a^b}}&gt;f(n)<br>\end{aligned}<br>\right.<br>$$</f(n),></p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2>]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react学习(1)--基础]]></title>
      <url>/2016/08/26/front-end/2016_08_26_react%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="redux基本知识"><a href="#redux基本知识" class="headerlink" title="redux基本知识"></a>redux基本知识</h1><!-- TOC depthFrom:1 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 -->
<ul>
<li><a href="#redux基本知识">redux基本知识</a><ul>
<li><a href="#基本概念">基本概念</a></li>
<li><a href="#action">action</a></li>
<li><a href="#store">store</a></li>
<li><a href="#reducer">reducer</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><img src="http://7xrn62.com1.z0.glb.clouddn.com/c7323445e07a058d2fe286b1e4bcfee0.png" alt="redux和传统MVC"></p>
<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><h2 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h2>]]></content>
      
        <categories>
            
            <category> Front-End </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redux </tag>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unix-Network(2)-地址以及字符串操作函数]]></title>
      <url>/2016/07/17/linuxtcp/2016_07_17_unix-network(2)-%E5%9C%B0%E5%9D%80%E4%BB%A5%E5%8F%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="套接字地址结构"><a href="#套接字地址结构" class="headerlink" title="套接字地址结构"></a>套接字地址结构</h1><h2 id="IPV4套接字地址结构"><a href="#IPV4套接字地址结构" class="headerlink" title="IPV4套接字地址结构"></a>IPV4套接字地址结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">struct in_addr &#123;</div><div class="line">    in_addr_t s_addr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct sockaddr_in &#123;</div><div class="line">    uint8_t         sin_len;</div><div class="line">    sa_family_t     sin_family;</div><div class="line">    in_port_t       sin_port;</div><div class="line">    struct in_addr  sin_addr;</div><div class="line"></div><div class="line">    char            sin_zero[8];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="通用套接字"><a href="#通用套接字" class="headerlink" title="通用套接字"></a>通用套接字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"></div><div class="line">## 字节排序函数</div><div class="line">大端机和小端机</div></pre></td></tr></table></figure>
<p>uint16_t htons(uint16_t host16bitvalue);<br>uint32_t htonl(uint32_t host32bitvalue);</p>
<p>uint16_t htonl(uint16_t net16bitvalue);<br>uint32_t ntohl(uint32_t net32bitvalue);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 网络字节序和主机字节序</div><div class="line"></div><div class="line">## 字节操纵函数</div><div class="line"></div><div class="line">Berkeley的函数</div></pre></td></tr></table></figure></p>
<p>#include <strings.h><br>void bzero(void <em>dest, size_t nbytes);<br>void bcopy(const void </em>src, void <em>dest, size_t nbytes);<br>int bcmp(const void </em>ptrl, const void *ptr2, size_t nbytes);</strings.h></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ANSI C的函数</div></pre></td></tr></table></figure>
<p>void <em>memset(void </em>dest, int c, size_t len);<br>void <em>memcpy(void </em>dest, const void <em>src, size_t nbytes);<br>int memcmp(const void </em>ptrl, const void *ptr2, size_t nbytes);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 两组地址转换函数</div></pre></td></tr></table></figure></p>
<p>int inet_aton(const char <em>strptr, struct in_addr </em>addrptr);<br>in_addr_t inet_addr(const char <em>strptr);<br>char </em>inet_ntoa(struct in_addr inaddr);<br>```</p>
<h2 id="readn-writen和readline函数"><a href="#readn-writen和readline函数" class="headerlink" title="readn, writen和readline函数"></a>readn, writen和readline函数</h2><p>字节流套接字（例如<code>TCP</code>套接字）上的<code>read</code>和<code>write</code>函数所表现的行为不同于通常的文件I/O。字节流套接字上调用<code>read</code>或<code>write</code>输入或输出的字节数可能比请求的数量少，然而这不是出错的状态。这个现象的原因在于内核中用于套接字的缓冲区可能已经达到了极限。</p>
]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unix-Network(3)-基本socket]]></title>
      <url>/2016/07/17/linuxtcp/2016_07_17_unix-network(3)-%E5%9F%BA%E6%9C%ACsocket/</url>
      <content type="html"><![CDATA[<h1 id="基本socket"><a href="#基本socket" class="headerlink" title="基本socket"></a>基本socket</h1><h2 id="socket函数"><a href="#socket函数" class="headerlink" title="socket函数"></a><code>socket</code>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">     #include &lt;sys/socket.h&gt;</div><div class="line"></div><div class="line">     int</div><div class="line">     socket(int domain, int type, int protocol);</div></pre></td></tr></table></figure>
<p>family: 协议地址族</p>
<p><code>AF_xxx</code>:表示地址族<br><code>PF_xxx</code>:表示协议族<br>基本上都是采用的<code>AF_xxx</code></p>
<h2 id="connect函数"><a href="#connect函数" class="headerlink" title="connect函数"></a><code>connect</code>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">     #include &lt;sys/types.h&gt;</div><div class="line">     #include &lt;sys/socket.h&gt;</div><div class="line"></div><div class="line">     int</div><div class="line">     connect(int socket, const struct sockaddr *address,</div><div class="line">         socklen_t address_len);</div></pre></td></tr></table></figure>
<p>如果是TCP套接字，调用<code>connect</code>将发起三次握手，建立成功或出错返回，出错的情况如下：</p>
<ul>
<li><p>若TCP客户端没有收到SYN分节的响应，则返回<code>TIMEDOUT</code>错误。举例来说，调用<code>connect</code>函数时，发送一个<code>SYN</code>包后若无响应则等待6s后再发一个，若无响应则再等待24s。若总共75s时仍未收到则出现本错误。</p>
</li>
<li><p>若对客户端的｀SYN｀的响应是<code>RST</code>,则表明该服务器主机在我们指定的端口没有进程在等待与之连接。这是一种硬错误，客户端一旦收到<code>RST</code>，则马上返回<code>ECONNREFUSED</code>错误。</p>
<p>  <strong>产生<code>RST</code>的三个条件：一是目的地为某端口的<code>SYN</code>到达服务器，可是服务器端口并未开放；二是TCP想取消一个已有连接；三是TCP接收到一个根本不存在的连接上的分节。</strong></p>
</li>
<li>若客户端发出的<code>RST</code>在中间的某个路由器引发了一个“destination unreachable”的ICMP错误，则认为这是一种软错误。客户机内核保存该消息，然后就像情况一一样继续发送，到规定时间（有的是75s）仍未响应，则把保存的消息作为<code>EHOSTUNREACH</code>或<code>ENETUNREACH</code>返回给进程。  </li>
</ul>
<p><strong>端口扫描原理分析</strong><br>NMAP端口扫描<br>TCP扫描的原理主要是三次握手。这种扫描也称为SYN扫描。Scanner向主机发起SYN请求。如果服务器回复SYN、ACK，这说明此端口开放。如果回复TCP、RST，表示端口未开放。如果没有回复，那么就可能没有这个服务器，或者数据包被防火墙丢弃。</p>
<p>UDP的扫描原理：由于UDP没有三次握手，所以UDP的扫描原理不一样。同样在Scanner发起一次UDP请求。如果服务器回复ICMP的端口不可达。则说明该服务器的此端口关闭。如果没有回应，这说明：一、服务器开放该端口。二、服务器主机不存在。三、被防火墙等设备丢弃。</p>
<p>ZMAP端口扫描</p>
<h2 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a><code>bind</code>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">     #include &lt;sys/socket.h&gt;</div><div class="line"></div><div class="line">     int</div><div class="line">     bind(int socket, const struct sockaddr *address, socklen_t address_len);</div></pre></td></tr></table></figure>
<p>第二个参数是一个指向特定于协议的地址结构的指针，第三个为该地址结构的长度。<br>返回的常见错误<code>EADDRINUSE</code>，地址已经被使用。</p>
<h2 id="listen函数"><a href="#listen函数" class="headerlink" title="listen函数"></a><code>listen</code>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#include &lt;sys/socket.h&gt;</div><div class="line"></div><div class="line">     int</div><div class="line">     listen(int socket, int backlog);</div></pre></td></tr></table></figure>
<p>为了理解<code>bloglog</code>参数，我们必须认识到内核为任何一个给定的监听的套结字维护两个队列：</p>
<ul>
<li><p>1) 未完成连接队列，每个这样的<code>SYN</code>分节对应其中一项:已由某个客户端发出并到达服务器，而服务器正在等待完成相应的三次握手过程。这些套接字处于<code>SYN_RCVD</code>状态。</p>
</li>
<li><p>2）已完成连接队列，每个已完成<code>TCP</code>三路握手过程的客户端对应其中一项。这些套结字处于<code>ESTABLISHED</code>状态。</p>
</li>
</ul>
<p>两队列之和不操过blacklog。</p>
<h2 id="accept函数"><a href="#accept函数" class="headerlink" title="accept函数"></a><code>accept</code>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">     #include &lt;sys/socket.h&gt;</div><div class="line">     int</div><div class="line">     accept(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len);</div></pre></td></tr></table></figure>
<p>参数<code>cliaddr</code>和<code>addrlen</code>用来返回已连接的对端进程的协议地址，调用前，我们将由<code>*addrlen</code>所引用的整数值置为有<code>cliaddr</code>所指的套接字地址结构的长度，返回时，该整数值即为内核存放该套接字地址结构内的确切长度。所以<code>address_len</code>是一个值结果参数。</p>
<p>如果<code>accept</code>成功，那么其返回值是有内核自动生成的一个全新的描述符。</p>
<p>如果我们队客户协议地址不感兴趣，可以把后面两个参数均设置成空指针。</p>
<h2 id="fork和exec函数"><a href="#fork和exec函数" class="headerlink" title="fork和exec函数"></a><code>fork</code>和<code>exec</code>函数</h2><h2 id="并发服务器"><a href="#并发服务器" class="headerlink" title="并发服务器"></a>并发服务器</h2><p>一个最简单的并发服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">for(;;) &#123;</div><div class="line">    connfd = accept(listen, ...);</div><div class="line">    if ((pid = fork()) == 0) &#123;</div><div class="line">        close(listenfd);</div><div class="line">        doit(connfd);</div><div class="line">        close(connfd);</div><div class="line">    &#125;</div><div class="line">    close(connfd);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对一个套接字调用colse方法，会导致内核发送一个<code>FIN</code>包，但是父进程调用了<code>close(connfd)</code>,并没有发送<code>FIN</code>.<br>因为每个文件或套接字都由一个引用计数，引用计数放在文件表项中维护。</p>
<h2 id="getsockname和getpeername函数"><a href="#getsockname和getpeername函数" class="headerlink" title="getsockname和getpeername函数"></a><code>getsockname</code>和<code>getpeername</code>函数</h2>]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network program </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unix-Network(1)-基础]]></title>
      <url>/2016/07/17/linuxtcp/2016_07_17_unix-network(1)-%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h2><h2 id="TCP选项"><a href="#TCP选项" class="headerlink" title="TCP选项"></a>TCP选项</h2><h2 id="TCP连接终止"><a href="#TCP连接终止" class="headerlink" title="TCP连接终止"></a>TCP连接终止</h2><h2 id="TCP的状态转换图"><a href="#TCP的状态转换图" class="headerlink" title="TCP的状态转换图"></a>TCP的状态转换图</h2><h2 id="TCP分组"><a href="#TCP分组" class="headerlink" title="TCP分组"></a>TCP分组</h2><h2 id="TIME-WAIT状态"><a href="#TIME-WAIT状态" class="headerlink" title="TIME_WAIT状态"></a>TIME_WAIT状态</h2>]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network program </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim基本]]></title>
      <url>/2016/07/01/vim/2016_07_01_vim%E5%9F%BA%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><p>1 关于Vim</p>
<p>vim是我最喜欢的编辑器，也是linux下第二强大的编辑器。虽然emacs是公认的世界第一，我认为使用emacs并没有使用vi进行编辑来得高效。如果是初学vi，运行一下vimtutor是个聪明的决定。<br>2 启动Vim时的选项</p>
<pre><code>* vim -c cmd file: 在打开文件前，先执行指定的命令；
* vim -r file: 恢复上次异常退出的文件；
* vim -R file: 以只读的方式打开文件；
* vim -y num file: 将编辑窗口的大小设为num行；
* vim + file: 从文件的末尾开始；
* vim +num file: 从第num行开始；
</code></pre><p>3 光标的移动</p>
<pre><code>* h: 左移一个字符；
* l: 右移一个字符；
* j: 下移一个字符；
* k: 上移一个字符；
* w: 前移一个单词，光标停在下一个单词开头；
* e: 前移一个单词，光标停在下一个单词末尾；
* b: 后移一个单词，光标停在上一个单词开头；
* ge: 后移一个单词，光标停在上一个单词末尾；
* fc: 把光标移到同一行的下一个c字符处
</code></pre><p>上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h，则光标向左移动3个字符。</p>
<pre><code>* 0或^:移动到行首。
* $: 移动到行尾。
* gg: 到文件头部。
* G: 到文件尾部。
* nG: 到文件第n行。
* :n&lt;cr&gt; 移动到第n行。
* :$&lt;cr&gt; 移动到最后一行。
* n|: 把光标移到递n列上。
* +或Enter:把光标移至下一行第一个非空白字符。
* -: 把光标移至上一行第一个非空白字符。
* H: 把光标移到屏幕最顶端一行。
* L: 把光标移到屏幕最底端一行。
* ctrl+f: 下翻一屏。
* ctrl+b: 上翻一屏。
* ctrl+d: 下翻半屏。
* ctrl+u: 上翻半屏。
</code></pre><p>4 Vim的几种模式</p>
<pre><code>* 正常模式：可以使用快捷键命令，或按:输入命令行。
* 插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。
* 可视模式：正常模式下按v可以进入可视模式，在可视模式下，移动光标可以选择文本。
* 块选择模式：正常模式下按ctrl+v进入。
* 替换模式：正常模式下，按R进入。
</code></pre><p>5 插入</p>
<pre><code>* i: 在光标前插入；
* I: 在当前行最前插入；
* a: 在光标后插入；
* A: 在当前行最后插入；
* o: 在下面新建一行插入；
* O: 在上面新建一行插入；
* :r filename 在当前位置插入另一个文件的内容。
* :r !date 在光标处插入当前日期与时间。同理，:r!command可以将其它shell命令的输出插入当前文档。
</code></pre><p>6 改写</p>
<pre><code>* c[n]w: 改写光标后1(n)个词。
* c[n]l: 改写光标后n个字母。
* c[n]h: 改写光标前n个字母。
* [n]cc: 修改当前[n]行。
* [n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。
* [n]S: 删除指定数目的行，并以所输入文本代替之。
</code></pre><p>注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。<br>7 替换</p>
<ul>
<li>r: 替换光标处的字符，同样支持汉字。<ul>
<li>R: 进入替换模式，按esc回到正常模式。</li>
</ul>
</li>
</ul>
<p>8 撤消与重做</p>
<pre><code>* [n] u: 取消一(n)个改动。
* ctrl + r: 重做最后的改动。
* U: 取消当前行中所有的改动。
</code></pre><p>9 剪切和复制、粘贴</p>
<ul>
<li><p>[n]x: 剪切光标右边n个字符，相当于d[n]l。</p>
<ul>
<li>[n]X: 剪切光标左边n个字符，相当于d[n]h。</li>
<li>y: 复制在可视模式下选中的文本。</li>
<li>yy or Y: 复制整行文本。</li>
<li>y[n]w: 复制一(n)个词。</li>
<li>y[n]l: 复制光标右边1(n)个字符。</li>
<li>y[n]h: 复制光标左边1(n)个字符。</li>
<li>y$: 从光标当前位置复制到行尾。</li>
<li>y0: 从光标当前位置复制到行首。</li>
<li>:m,ny<cr> 复制m行到n行的内容。</cr></li>
<li>y1G或ygg:复制光标以上的所有行。</li>
<li>yG: 复制光标以下的所有行。</li>
<li>d: 删除（剪切）在可视模式下选中的文本。</li>
<li>d$ or D: 删除（剪切）当前位置到行尾的内容。</li>
<li>d[n]w: 删除（剪切）1(n)个单词</li>
<li>d[n]l: 删除（剪切）光标右边1(n)个字符。</li>
<li>d[n]h: 删除（剪切）光标左边1(n)个字符。</li>
<li>d0: 删除（剪切）当前位置到行首的内容</li>
<li>[n] dd: 删除（剪切）1(n)行。</li>
<li>:m,nd<cr> 剪切m行到n行的内容。</cr></li>
<li>d1G或dgg:剪切光标以上的所有行。</li>
<li>dG: 剪切光标以下的所有行。</li>
<li>p: 在光标之后粘贴。</li>
<li><p>P: 在光标之前粘贴。<br>10 查找和替换</p>
</li>
<li><p>/something: 在后面的文本中查找something。</p>
</li>
<li>?something: 在前面的文本中查找something。</li>
<li>n: 向后查找下一个。</li>
<li>N: 向前查找下一个。</li>
<li>:s/old/new: 用new替换当前行第一个old。</li>
<li>:s/old/new/g: 用new替换当前行所有的old。</li>
<li>:n1,n2s/old/new/g: 用new替换文件n1行到n2行所有的old。</li>
<li>:%s/old/new/g: 用new替换文件中所有的old。</li>
<li>:%s/^/xxx/g: 在每一行的行首插入xxx，^表示行首。</li>
<li>:%s/$/xxx/g: 在每一行的行尾插入xxx，^表示行尾。</li>
<li>所有替换命令末尾加上c，每个替换都将需要用户确认。如：%s/old/new/gc</li>
<li>%: 找到对应的([{.</li>
</ul>
</li>
</ul>
<p>11 多行缩进缩出</p>
<pre><code>* 正常模式下，按两下&gt;;光标所在行会缩进。
* 如果先按了n，再按两下&gt;;，光标以下的n行会缩进。
* 对应的，按两下&lt;;，光标所在行会缩出。
* 如果在编辑代码文件，可以用=进行调整。
* 在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。
* 或者n=，调整n行代码的缩排。
</code></pre><p>12 打开和关闭文档</p>
<pre><code>* :e file –关闭当前编辑的文件，并开启新的文件。如果对当前文件的修改未保存，vi会警告。
* :e! file –放弃对当前文件的修改，编辑新的文件。
* :e+file – 开始新的文件，并从文件尾开始编辑。
* :e+n file – 开始新的文件，并从第n行开始编辑。
* :enew –编译一个未命名的新文档。
* :e – 重新加载当前文档。
* :e! – 重新加载当前文档，并丢弃已做的改动。
* :w – 保存修改。
* :n1,n2w filename – 选择性保存从某n1行到另n2行的内容。
* :wq – 保存并退出。
* :x – 保存并退出。
* :saveas newfilename – 另存为
</code></pre><p>13 多标签编辑</p>
<pre><code>* :tabe filename – 在新的标签中打开一个文件。
* :tabn – 切换到下一个标签。
* :tabp – 切换到上一个标签。
</code></pre><p>14 分屏编辑<br>14.1 水平分割</p>
<pre><code>* :split(:sp) – 把当前窗水平分割成两个窗口。
* :split filename – 水平分割窗口，并在新窗口中显示另一个文件。
* :nsplit(:nsp) – 水平分割出一个n行高的窗口。
* :new – 水平分割出一个窗口，并编辑一个新文件。
* ctrl+w + –当前窗口增高一行。也可以用n增高n行。
* ctrl+w - –当前窗口减小一行。也可以用n减小n行。
* ctrl+w _ –当前窗口扩展到尽可能的大。
* n ctrl+w _ – 当前窗口的高度设定为n行。
</code></pre><p>14.2 垂直分割</p>
<pre><code>* :vsplit(:vsp) – 把当前窗口分割成水平分布的两个窗口。
* :vnew – 垂直分割出一个新窗口。
* :vertical 水平分割的命令：相应的垂直分割。
</code></pre><p>14.3 关闭子窗口</p>
<pre><code>* :qall – 关闭所有窗口，退出vim。
* :wall – 保存所有修改过的窗口。
* :only – 只保留当前窗口，关闭其它窗口。
* :close – 关闭当前窗口。(象 :q :x同样工作 )
</code></pre><p>4.4 切换和移动窗口</p>
<p>［如果支持鼠标，切换和调整子窗口的大小就简单了。］</p>
<pre><code>* ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+ww。
* ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。
* ctrl+w t(b):切换到最上（下）面的窗口。&lt;BR&gt;
* ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。
</code></pre><p>正因为vim强大的分屏功能，我们可以把vim打造成功能强大的IDE。<br>15 一次编辑多个文件</p>
<p>我们可以一次打开多个文件，如</p>
<p>vi a.txt b.txt c.txt</p>
<pre><code>* 使用:next(:n)编辑下一个文件。
* 使用:previous编辑上一个文件。
* 使用:wnext，保存当前文件，并编辑下一个文件。
* 使用:wprevious，保存当前文件，并编辑上一个文件。
* 使用:args显示文件列表。
</code></pre><p>16 文件的编码</p>
<pre><code>* :e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。
* :w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。
* :set fenc或:setfileencoding，查看当前文件的编码。
* 在vimrc中添加setfileencoding=utf-8,cp936,ucs-bom，vim会根据要打开的文件选择合适的编码。注意：编码之间不要留空格。cp936对应于gbk编码。ucs-bom对应于windows下的文件格式。
</code></pre><p>让vim正确处理文件格式和文件编码，有赖于~/.vimrc的正确配置。<br>17 执行命令</p>
<pre><code>* :! cmd 执行外部命令。
* :!! 执行上一次的外部命令。
* @: 重复上一次的冒号命令。
* :sh 调用shell，用exit返回vim。
* :r !cmd 将命令的返回结果插入文件当前位置。
* :m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。
</code></pre><p>18 一些快捷键（收集中）</p>
<pre><code>* K: 打开光标所在词的manpage。
* *: 向下搜索光标所在词。
* #: 向上搜索光标所在词。
* ~: 反转光标所在字符的大小写。
* %: 移动到匹配的(),{}或[]上。
</code></pre>]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[unix基础编程(3)--文件和目录]]></title>
      <url>/2016/06/30/linuxtcp/2016_06_30_unix%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B(3)--%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h1><h2 id="stat-fstat-fstatat-和-lstat"><a href="#stat-fstat-fstatat-和-lstat" class="headerlink" title="stat, fstat, fstatat 和 lstat"></a>stat, fstat, fstatat 和 lstat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">       #include &lt;sys/types.h&gt;</div><div class="line">       #include &lt;sys/stat.h&gt;</div><div class="line">       #include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">       int stat(const char *path, struct stat *buf);</div><div class="line">       int fstat(int fd, struct stat *buf);</div><div class="line">       int lstat(const char *path, struct stat *buf);</div><div class="line">SYNOPSIS</div><div class="line">      #include &lt;fcntl.h&gt; /* Definition of AT_* constants */</div><div class="line">      #include &lt;sys/stat.h&gt;</div><div class="line"></div><div class="line">      int fstatat(int dirfd, const char *pathname, struct stat *buf,</div><div class="line">                  int flags);</div></pre></td></tr></table></figure>
<p>关于结构 <code>stat</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">struct stat &#123;</div><div class="line">    dev_t     st_dev;     /* ID of device containing file */</div><div class="line">    ino_t     st_ino;     /* inode number */</div><div class="line">    mode_t    st_mode;    /* protection */</div><div class="line">    nlink_t   st_nlink;   /* number of hard links */</div><div class="line">    uid_t     st_uid;     /* user ID of owner */</div><div class="line">    gid_t     st_gid;     /* group ID of owner */</div><div class="line">    dev_t     st_rdev;    /* device ID (if special file) */</div><div class="line">    off_t     st_size;    /* total size, in bytes */</div><div class="line">    blksize_t st_blksize; /* blocksize for filesystem I/O */</div><div class="line">    blkcnt_t  st_blocks;  /* number of 512B blocks allocated */</div><div class="line">    time_t    st_atime;   /* time of last access */</div><div class="line">    time_t    st_mtime;   /* time of last modification */</div><div class="line">    time_t    st_ctime;   /* time of last status change */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><ul>
<li>1 普通文件</li>
<li>2 目录文件</li>
<li>3 块特殊文件(block special file).这种类型的文件提供对设备(如磁带)带缓冲的访问,每次访问以固定长度为单位进行.</li>
<li>4 字符特殊文件.这种类型的文件提供对设备不带缓冲的访问,每次访问长度是可变的.</li>
<li>5 FIFO 这种类型的文件用于进程间通信.</li>
<li>6 socket 用于进程间网络通信</li>
<li>7 符号链接</li>
</ul>
<p>文件类型信息包含在stat结构的<code>st_mode</code>中</p>
<table>
<thead>
<tr>
<th>宏</th>
<th style="text-align:center">文件类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>S_ISREG()</td>
<td style="text-align:center">普通文件</td>
</tr>
<tr>
<td>S_ISDIR()</td>
<td style="text-align:center">目录文件</td>
</tr>
<tr>
<td>S_ISCHR()</td>
<td style="text-align:center">字符特殊文件</td>
</tr>
<tr>
<td>S_ISBLK()</td>
<td style="text-align:center">块特殊文件</td>
</tr>
<tr>
<td>S_ISFIFO()</td>
<td style="text-align:center">管道文件</td>
</tr>
<tr>
<td>S_ISLINK()</td>
<td style="text-align:center">符号链接</td>
</tr>
<tr>
<td>S_ISSOCK()</td>
<td style="text-align:center">套接字</td>
</tr>
</tbody>
</table>
<p>POSIX.1允许实现将进程间通信(IPC)对象说明文件,使用<code>stat</code>结构中确定IPC对象类型,参数是指向<code>stat</code>结构的指针.<br>| 宏        | 对象类型           |<br>| ————- |:————-:|<br>| S_TYPEISMQ()      | 消息队列 |<br>| S_TYPEISEM()  | 信号量      |<br>| S_TYPEISSHM()  | 共享存储对象      |</p>
<h2 id="设置用户ID与组ID"><a href="#设置用户ID与组ID" class="headerlink" title="设置用户ID与组ID"></a>设置用户ID与组ID</h2><p>一个进程相关联的ID有6个或者更多</p>
<p>| S_TYPEISMQ()      | 消息队列 |<br>| S_TYPEISEM()  | 信号量      |<br>| S_TYPEISSHM()  | 共享存储对象      |</p>
<h2 id="设置用户ID和设置组ID"><a href="#设置用户ID和设置组ID" class="headerlink" title="设置用户ID和设置组ID"></a>设置用户ID和设置组ID</h2><p>实际用户ID<br>实际组ID</p>
<p>有效用户ID<br>有效组ID<br>附属组ID</p>
<p>保存的设置用户ID<br>保存的设置组ID    由exec函数保存</p>
<ul>
<li><p>实际用户ID和实际组ID标识我们究竟是谁,这两个字段在登录时,取自哦令文件</p>
</li>
<li><p>有效用户,有效组ID以及附属组ID决定了我们的文件访问权限</p>
</li>
<li><p>保存的设置用户ID和保存的设置组ID在执行一个程序时,包含了一个有效用户ID和有效组ID的副本.</p>
</li>
</ul>
<p>每一个文件有一个所有者和组所有者,所有者由<code>stat</code>结构中的<code>st_uid</code>指定,组所有者有<code>st_git</code>指定.</p>
<p>当执行一个程序文件时,进程的有效用户ID通常就是实际用户ID,有效组ID是实际组ID,但是可以在文件模式字<code>std_mode</code>中设置一个特殊标志,其含义是”当执行文件时,将进程的有效用户ID设置为文件所有者用户ID”,与此类似,文件模式字中可以设置的另一位,它将执行文件的有效组ID设置未文件的组所有者ID.<br>可以使用<code>S_ISUID</code>和<code>S_ISGID</code>测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;sys/stat.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">int main(int argc, char **argv) &#123;</div><div class="line">	int i;</div><div class="line">	struct stat buf;</div><div class="line">	char *ptr;</div><div class="line"></div><div class="line">	for(i = 1; i &lt; argc; i++) &#123;</div><div class="line">		printf(&quot;%s, &quot;, argv[i]);</div><div class="line">		if (lstat(argv[i], &amp;buf) &lt; 0) &#123;</div><div class="line">			printf(&quot;lstat error\n&quot;);</div><div class="line">			continue;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if (S_ISREG(buf.st_mode)) &#123;</div><div class="line">			ptr = &quot;regular&quot;;</div><div class="line">		&#125; else if (S_ISDIR(buf.st_mode)) &#123;</div><div class="line">			ptr = &quot;dirctory&quot;;</div><div class="line">		&#125; else if (S_ISCHR(buf.st_mode)) &#123;</div><div class="line">			ptr = &quot;char special&quot;;</div><div class="line">		&#125; else if(S_ISBLK(buf.st_mode)) &#123;</div><div class="line">			ptr = &quot;kuai te shu&quot;;</div><div class="line">		&#125; else if(S_ISFIFO(buf.st_mode)) &#123;</div><div class="line">			ptr = &quot;FIFO&quot;;</div><div class="line">		&#125; else if (S_ISLNK(buf.st_mode)) &#123;</div><div class="line">			ptr = &quot;Link&quot;;</div><div class="line">		&#125; else if(S_ISSOCK(buf.st_mode)) &#123;</div><div class="line">			ptr = &quot;SOCKET&quot;;</div><div class="line">		&#125; else &#123;</div><div class="line">			ptr = &quot;UNKONWN&quot;;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if (buf.st_mode &amp; S_ISUID) &#123;</div><div class="line">			printf(&quot;suid\n&quot;);</div><div class="line">		&#125;</div><div class="line">		if (buf.st_mode &amp; S_ISGID) &#123;</div><div class="line">			printf(&quot;sgid\n&quot;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		printf(&quot;%s\n&quot;, ptr);</div><div class="line"> 	&#125;</div><div class="line"> 	exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./a.out /usr/bin/passwd</div><div class="line">/usr/bin/passwd, suid</div><div class="line">regular</div></pre></td></tr></table></figure></p>
<h2 id="文件访问权限"><a href="#文件访问权限" class="headerlink" title="文件访问权限"></a>文件访问权限</h2><p><code>st_mode</code>也包含了文件的访问权限.<br><code>S_IRUSR</code>   用户读<br><code>S_IWUSR</code>   用户写<br><code>S_IXUSR</code>   用户执行</p>
<p><code>S_IRGRP</code>   组读<br><code>S_IWGRP</code>   组写<br><code>S_IXGRP</code>   组执行</p>
<p><code>S_IROTH</code>   其他读<br><code>S_IWOTH</code>   其他写<br><code>S_IXOTH</code>   其他执行</p>
<p>规则一,当我们用名字打开任一类型的文件时,对名字中包含的每一个目录,包括<code>.</code>和<code>..</code>都应该具有执行权限,目录的执行权限对应于搜索位.<br>对目录而言,读权限和执行权限的区别:<br>读权限允许我们读目录,获取该目录中所有文件列表名.<br>当一个目录是我们要访问的文件路径名的一个组成部分时,对该目录的执行权限使我们可以通过该目录.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;ll /var/log -d</div><div class="line">drwxrwxr-x 20 root syslog 4096  7月  6 09:05 /var/log</div><div class="line">sudo chmod 774 /var/log</div><div class="line">&gt;ll /var/log -d</div><div class="line">drwxrwxr-- 20 root syslog 4096  7月  6 09:05 /var/log</div></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ll /var/log/dmesg</div><div class="line">ls: cannot access /var/log/dmesg: Permission denied</div><div class="line">/var &gt;cd log</div><div class="line">cd: permission denied: log</div></pre></td></tr></table></figure></p>
<p>可以ls,但是不能cd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;dirent.h&gt;</div><div class="line">#include &lt;errno.h&gt;</div><div class="line"></div><div class="line">extern int errno ;</div><div class="line"></div><div class="line">int main(int argc, char** argv) &#123;</div><div class="line"></div><div class="line">	if (argc &lt; 2) &#123;</div><div class="line">		printf(&quot;usage a.out &lt;dirname&gt;\n&quot;);</div><div class="line">		exit(-1);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	DIR *dptr = NULL;</div><div class="line">	struct dirent *entry;</div><div class="line"></div><div class="line">    if ((dptr = opendir(argv[1])) == NULL) &#123;</div><div class="line"></div><div class="line">    	perror(&quot;Error:&quot;);</div><div class="line">    &#125; else &#123;</div><div class="line">    	while (entry = readdir(dptr)) &#123;</div><div class="line">    		printf(&quot;%s\n&quot;, entry-&gt;d_name);</div><div class="line">    	&#125;</div><div class="line">    	closedir(dptr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为对其他人都取消了执行权限,所以其他人无法通过该目录了.</p>
<p><strong>为了在目录中创建一个新文件,需要有写和执行的权限</strong></p>
<p><strong>为了删除一个现有文件文件,必须对包含该文件的目录有写权限和执行权限,对该文件本身则不需要读写权限</strong></p>
<p><strong>如果用7个<code>exec</code>函数中的任何一个执行文件,必须对该文件具有执行权限,并且该文件为普通文件.</strong></p>
<h2 id="新文件和目录的所有权"><a href="#新文件和目录的所有权" class="headerlink" title="新文件和目录的所有权"></a>新文件和目录的所有权</h2><p>新文件的用户ID设置为进程的有效用户ID,<br>新文件的组ID:可以是进程的有效组ID;也可以是所在目录的组ID.</p>
<p><em>在ubuntu下是哪种情况?</em><br>使用sudo,改变进程的有效用户,发现组ID是进程的有效组ID.<br>在Mac里面则是所在目录的组ID</p>
<h2 id="函数access和faccessat"><a href="#函数access和faccessat" class="headerlink" title="函数access和faccessat"></a>函数<code>access</code>和<code>faccessat</code></h2><p>当<code>open</code>函数打开一个文件时,内核以进程的有效用户ID和有效组ID为基础进行访问权限测试.有时候,进程也希望按照实际用户ID和实际组ID来测试其访问能力.可以使用这两个函数.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">       #include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">       int access(const char *pathname, int mode);</div></pre></td></tr></table></figure>
<h2 id="umask函数"><a href="#umask函数" class="headerlink" title="umask函数"></a><code>umask</code>函数</h2><p>为一个进程设置文件模式创建屏蔽字,在进程创建一个新文件或者目录.参数是设置的umask值,返回的是之前的umask值.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">       #include &lt;sys/types.h&gt;</div><div class="line">       #include &lt;sys/stat.h&gt;</div><div class="line"></div><div class="line">       mode_t umask(mode_t mask);</div></pre></td></tr></table></figure></p>
<h2 id="函数chmod-fchmod和fchmodat"><a href="#函数chmod-fchmod和fchmodat" class="headerlink" title="函数chmod, fchmod和fchmodat"></a>函数<code>chmod</code>, <code>fchmod</code>和<code>fchmodat</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">       #include &lt;sys/stat.h&gt;</div><div class="line"></div><div class="line">       int chmod(const char *path, mode_t mode);</div><div class="line">       int fchmod(int fd, mode_t mode);</div></pre></td></tr></table></figure>
<p>为了能够改变一个文件的权限位,进车个的有效用户ID必须等于文件的所有者ID.</p>
<h2 id="粘着位-sticky-bit"><a href="#粘着位-sticky-bit" class="headerlink" title="粘着位(sticky bit)"></a>粘着位(sticky bit)</h2><p>允许目录设置,如果对一个目录设置了粘着位,只有对该目录具有写权限的用户并且满足下列条件之一,才能删除或者重命名该目录下的文件.</p>
<ul>
<li>拥有此文件</li>
<li>拥有此目录</li>
<li>是超级用户</li>
</ul>
<p><code>/tmp</code>和<code>/var/tmp</code>设置了粘着位,任何用户都可以创建目录,但其他人无法删除.</p>
<h2 id="chown-fchown-fchownat-lchown"><a href="#chown-fchown-fchownat-lchown" class="headerlink" title="chown,fchown,fchownat, lchown"></a><code>chown</code>,<code>fchown</code>,<code>fchownat</code>, <code>lchown</code></h2><h2 id="文件长度"><a href="#文件长度" class="headerlink" title="文件长度"></a>文件长度</h2><h2 id="其他一些操作"><a href="#其他一些操作" class="headerlink" title="其他一些操作"></a>其他一些操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;sys/stat.h&gt;</div><div class="line">#include &lt;fcntl.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">int main(int argv, char ** args) &#123;</div><div class="line">	if(argv &gt; 1) &#123;</div><div class="line">		const char * FILENAME = args[1];</div><div class="line">		int r_fd = open(FILENAME, O_RDWR);</div><div class="line">		printf(&quot;%d\n&quot;, r_fd);</div><div class="line"></div><div class="line">		off_t offeset = 2;</div><div class="line">		int ft_res = ftruncate(r_fd, offeset);</div><div class="line">		close(r_fd);</div><div class="line"></div><div class="line">	&#125; else &#123;</div><div class="line">		printf(&quot;%s &lt;filename&gt;\n&quot;, args[0]);</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>fstat  获取文件的状态<br>    <code>stat(const char *path, struct stat *buf)</code><br>    <code>fstat(int fd, struct stat *buf)</code><br>    <code>lstat(const char *path, struct *buf)</code>    //链接文件<br>返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">struct stat &#123;</div><div class="line">          dev_t    st_dev;    /* ID of device containing file */</div><div class="line">          ino_t    st_ino;    /* inode number */</div><div class="line">          mode_t    st_mode;    /* protection */</div><div class="line">          nlink_t  st_nlink;  /* number of hard links */</div><div class="line">          uid_t    st_uid;    /* user ID of owner */</div><div class="line">          gid_t    st_gid;    /* group ID of owner */</div><div class="line">          dev_t    st_rdev;    /* device ID (if special file) */</div><div class="line">          off_t    st_size;    /* total size, in bytes */ 文件的大小</div><div class="line">          blksize_t st_blksize; /* blocksize for file system I/O */</div><div class="line">          blkcnt_t  st_blocks;  /* number of 512B blocks allocated */</div><div class="line">          time_t    st_atime;  /* time of last access */</div><div class="line">          time_t    st_mtime;  /* time of last modification */</div><div class="line">          time_t    st_ctime;  /* time of last status change */</div><div class="line">      &#125;;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[unix编程基础(2)--文件IO]]></title>
      <url>/2016/06/23/linuxtcp/2016_06_23_unix%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80(2)--%E6%96%87%E4%BB%B6io/</url>
      <content type="html"><![CDATA[<h1 id="Unix-文件IO"><a href="#Unix-文件IO" class="headerlink" title="Unix 文件IO"></a>Unix 文件IO</h1><h2 id="文件描述符号"><a href="#文件描述符号" class="headerlink" title="文件描述符号"></a>文件描述符号</h2><p>对于内核而言,所有打开的文件通过文件描述符引用,是一个非负整数.<br>在POSIX1中,在<code>&lt;unistd.h&gt;</code>中定义了<br>STDIN_FILENO(0): 标准输入<br>STDOUT_FILENO(1): 标准输出<br>STDERR_FILENO(2): 标准错误输出</p>
<p>文件描述符号的范围是{0-OPEN_MAX-1}</p>
<h2 id="函数open和openat"><a href="#函数open和openat" class="headerlink" title="函数open和openat"></a>函数open和openat</h2><p>man 2 open<br>man 2 openat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">       #include &lt;sys/types.h&gt;</div><div class="line">       #include &lt;sys/stat.h&gt;</div><div class="line">       #include &lt;fcntl.h&gt;</div><div class="line"></div><div class="line">       int open(const char *pathname, int flags);</div><div class="line">       int open(const char *pathname, int flags, mode_t mode);</div><div class="line">SYNOPSIS</div><div class="line">      #include &lt;fcntl.h&gt;</div><div class="line"></div><div class="line">      int openat(int dirfd, const char *pathname, int flags);</div><div class="line">      int openat(int dirfd, const char *pathname, int flags, mode_t mode);</div></pre></td></tr></table></figure></p>
<ul>
<li>pathname: 打开或者是创建文件的名字</li>
<li><p>flags: 标识,使用下面的常量,多个可以使用</p>
<ul>
<li>O_RDONLY  只读打开(0)</li>
<li>O_WRONLY  只写打开(1)</li>
<li><p>O_RDWR    读写打开</p>
</li>
<li><p>OS_EXEC   只执行打开</p>
</li>
<li><p>OS_SEARCH 搜索打开(不支持)</p>
<p>以上的这5个常量必须指定一个而且只能指定一个,下面的产量是可选的.</p>
</li>
<li>O_APPEND</li>
<li>O_CLOEXEC 把<code>FD_CLOEXEC</code>设置为文件描述符标志</li>
<li>O_CREAT  若文件不存在,则创建它,此时需要第三个参数(<code>openat</code>第四个)<code>mode</code>,指定权限位以及可以使用进程的<code>umask</code>修改</li>
<li>O_DIRECTORY   如果不是一个目录就会出错</li>
<li>O_EXCL    如果指定了<code>O_CREAT</code>并且文件存在则会出错</li>
<li>O_NOCTTY  如果path引用的是终端设备,则不将该设备分配作为该进程的控制终端.</li>
<li>O_NOFOLLOW    如果path引用的是符号链接,则出错</li>
<li>O_NONBLOCK    如果path引用的是一FIFO,一个块特殊文件或者一个字符特殊文件,则此选项为文件的本次打开操作后和后续的I/O操作设置非阻塞方式.</li>
<li>O_SYNC    使每次write等待物理I/O操作完成</li>
<li>O_TRUNC   如果此文件存在,而且为只写(或者读写)成功打开,则将其长度截断为0</li>
<li>O_TTY_INIT    如果打开一个还未打开的终端设备,设置非标准termios参数.<br>下面两个参数是可选择的</li>
<li>O_DSYNC</li>
<li>O_RSYNC</li>
</ul>
</li>
</ul>
<h2 id="creat"><a href="#creat" class="headerlink" title="creat"></a>creat</h2><p>创建一个文件,相当于<br><code>open(path, O_WRONLY| O_CREAT | O_TRUNC, mode)</code></p>
<h2 id="close"><a href="#close" class="headerlink" title="close"></a>close</h2><p>关闭一个文件,并且释放该进程加在该文件记录上的所有的锁</p>
<h2 id="lseek"><a href="#lseek" class="headerlink" title="lseek"></a>lseek</h2><p>每打开一个文件都有一个与其相关联的当前文件偏移量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">off_t lseek(int fd, off_t offset, int whence);</div></pre></td></tr></table></figure>
<h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">       #include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">       ssize_t read(int fd, void *buf, size_t count);</div></pre></td></tr></table></figure>
<p>read函数需要搞清楚的几个问题在于<br>返回值</p>
<ul>
<li>返回读取到的字节数</li>
<li>若到了文件末尾,返回0</li>
<li>出错,返回-1</li>
</ul>
<h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><p>返回值</p>
<ul>
<li>返回写的字节数</li>
<li>出错,返回-1</li>
</ul>
<h2 id="I-O的效率"><a href="#I-O的效率" class="headerlink" title="I/O的效率"></a>I/O的效率</h2><p>在linux的ext4文件系统下,磁盘长度为4096字节<br>read ahead预读技术</p>
<h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><p>内核使用3种数据结构标示打开文件</p>
<ul>
<li>1) 每个进程在进程表中都有一个记录项,记录项中包含了一张打开的文件描述符表,每个文件描述符占有一项,与每个文件描速符相关联的是:<ul>
<li>a) 文件状态标志</li>
<li>b) 指向文件表项的指针</li>
</ul>
</li>
<li>2) 内核为所有打开文件维持一张文件表,每个文件表项包含<ul>
<li>a) 文件状态标志(读,写)</li>
<li>b) 当前文件偏移量</li>
<li>c) 指向文件v节点的指针</li>
</ul>
</li>
<li>3) 每个打开的文件(或设备)都有一个v节点</li>
</ul>
<p><img src="http://7xrn62.com1.z0.glb.clouddn.com/92f25f9776532b05a345d16161207a9e.png" alt="进程控制文件"></p>
<p>当两个进程打开同一个文件<br><img src="http://7xrn62.com1.z0.glb.clouddn.com/e8767b4eab3932b6fedb29a8cac69850.png" alt="两个进程打开一个文件"></p>
<h2 id="fcntl"><a href="#fcntl" class="headerlink" title="fcntl"></a>fcntl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">       #include &lt;unistd.h&gt;</div><div class="line">       #include &lt;fcntl.h&gt;</div><div class="line"></div><div class="line">       int fcntl(int fd, int cmd, ... /* arg */ );</div><div class="line">该函数可以改变打开的文件的属性</div></pre></td></tr></table></figure>
<p><code>fcntl</code>函数有以下5个功能</p>
<ul>
<li>(1) 复制一个已有的描述符(cmd=<code>F_DUPFD</code> 或 <code>F_DUPFD_CLOEXEC</code>)</li>
<li>(2) 获取/设置文件描述符标志(cmd=<code>F_GETFE</code> 或 <code>F_SETFD</code>)</li>
<li>(3) 获取/设置文件状态标志(cmd=<code>F_GETFL</code> 或 <code>F_SETFL</code>)</li>
<li>(4) 获取/设置异步I/O所有权(cmd=<code>F_GETOWN</code> 或 <code>F_SETOWN</code>)</li>
<li>(5) 获取/设置记录锁(cmd=<code>F_GETLK</code>,<code>F_SETLK</code> 或 <code>F_SETLWK</code>)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;fcntl.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">int main(int argc, char **argv) &#123;</div><div class="line">	int val;</div><div class="line"></div><div class="line">	if (argc != 2) &#123;</div><div class="line">		printf(&quot;Usage: a.out &lt;descriptor&gt;\n&quot;);</div><div class="line">		exit(-1);</div><div class="line">	&#125;</div><div class="line">	if ((val = fcntl(atoi(argv[1]), F_GETFL, 0)) &lt; 0 ) &#123;</div><div class="line">		printf(&quot;fcntl error for fd %d\n&quot;, atoi(argv[1]));</div><div class="line">	&#125;</div><div class="line">	switch (val &amp; O_ACCMODE) &#123;</div><div class="line">		case O_RDONLY:</div><div class="line">			printf(&quot;read only\n&quot;);</div><div class="line">			break;</div><div class="line">		case O_WRONLY:</div><div class="line">			printf(&quot;write only\n&quot;);</div><div class="line">			break;</div><div class="line">		case O_RDWR:</div><div class="line">			printf(&quot;read write\n&quot;);</div><div class="line">			break;</div><div class="line">		default:</div><div class="line">			printf(&quot;unkonw access mode&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (val &amp; O_APPEND)</div><div class="line">		printf(&quot;, append\n&quot;);</div><div class="line">	if (val &amp; O_NONBLOCK)</div><div class="line">		printf(&quot;, nonblocking\n&quot;);</div><div class="line">	if (val &amp; O_SYNC) &#123;</div><div class="line">		printf(&quot;, synchronous writes\n&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">#if !defined(_POSIX_C_SOURCE) &amp;&amp; defined(O_FSYNC) &amp;&amp; (O_FSYNC != O_SYNC)</div><div class="line">	if (val &amp; O_FSYNC)</div><div class="line">		printf(&quot;, synchronous writes\n&quot;);</div><div class="line">#endif</div><div class="line">	putchar(&apos;\n&apos;);</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rabbitmq学习(3)--work_queue]]></title>
      <url>/2016/06/21/tool/2016_06_21_rabbitmq%E5%AD%A6%E4%B9%A0(3)--work_queue/</url>
      <content type="html"><![CDATA[<h1 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h1><h2 id="new-task"><a href="#new-task" class="headerlink" title="new_task"></a>new_task</h2><p><code>new_task</code>代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">import pika</div><div class="line">import sys</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=&apos;localhost&apos;))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.queue_declare(queue=&apos;task_queue&apos;, durable=True)</div><div class="line"></div><div class="line">message = &apos; &apos;.join(sys.argv[1:]) or &quot;Hello World!&quot;</div><div class="line">channel.basic_publish(exchange=&apos;&apos;,</div><div class="line">                      routing_key=&apos;task_queue&apos;,</div><div class="line">                      body=message,</div><div class="line">                      properties=pika.BasicProperties(</div><div class="line">                         delivery_mode = 2, # make message persistent</div><div class="line">                      ))</div><div class="line">print(&quot; [x] Sent %r&quot; % message)</div><div class="line">connection.close()</div></pre></td></tr></table></figure>
<p><code>wokrer.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import pika</div><div class="line">import time</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=&apos;localhost&apos;))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.queue_declare(queue=&apos;task_queue&apos;, durable=True)</div><div class="line">print(&apos; [*] Waiting for messages. To exit press CTRL+C&apos;)</div><div class="line"></div><div class="line">def callback(ch, method, properties, body):</div><div class="line">    print(&quot; [x] Received %r&quot; % body)</div><div class="line">    time.sleep(body.count(b&apos;.&apos;))</div><div class="line">    print(&quot; [x] Done&quot;)</div><div class="line">    ch.basic_ack(delivery_tag = method.delivery_tag)</div><div class="line"></div><div class="line">channel.basic_qos(prefetch_count=1)</div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=&apos;task_queue&apos;)</div><div class="line"></div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rabbitMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unix编程基础(1)--系统概述]]></title>
      <url>/2016/06/21/linuxtcp/2016_06_21_unix%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80(1)--%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h1 id="Unix系统概述"><a href="#Unix系统概述" class="headerlink" title="Unix系统概述"></a>Unix系统概述</h1><h2 id="UNIX的系统架构"><a href="#UNIX的系统架构" class="headerlink" title="UNIX的系统架构"></a>UNIX的系统架构</h2><p>一个比较直观的认识是,操作系统<br><img src="http://7xrn62.com1.z0.glb.clouddn.com/25b7ae3473e8ce7336b4e63d034c482b.png" alt="unix系统架构"></p>
<p>kernel:运行于硬件之上<br>系统调用(system call): 内核的接口</p>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>登录名<br>shell</p>
<h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><p>文件系统<br>文件名<br>路径名</p>
<h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>文件描述符<br>标准输入,标准输出和标准错误<br>不带缓冲的IO</p>
<h2 id="程序和进程"><a href="#程序和进程" class="headerlink" title="程序和进程"></a>程序和进程</h2><p>程序<br>进程和进程ID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">	printf(&quot;this pid is %ld\n&quot;, (long)getpid());</div><div class="line">	printf(&quot;this ppid is %ld\n&quot;, (long)getppid());</div><div class="line">	for(;;) &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/***</div><div class="line">pstree</div><div class="line">─gnome-terminal─┬─gnome-pty-helpe</div><div class="line">     │         │         │      │                ├─zsh───sh───node───8*[&#123;node&#125;]</div><div class="line">     │         │         │      │                ├─5*[zsh───ssh]</div><div class="line">     │         │         │      │                ├─5*[zsh]</div><div class="line">     │         │         │      │                ├─zsh───mongo───2*[&#123;mongo&#125;]</div><div class="line">     │         │         │      │                ├─zsh───python─┬─python───5*[&#123;+</div><div class="line">     │         │         │      │                │              └─4*[&#123;python&#125;]</div><div class="line">     │         │         │      │                ├─2*[zsh───python]</div><div class="line">     │         │         │      │                ├─zsh───a.out</div><div class="line">**/</div></pre></td></tr></table></figure></p>
<p>进程控制<br>线程和线程ID</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SYNOPSIS</div><div class="line">       #include &lt;sys/types.h&gt;</div><div class="line">       #include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">       pid_t getpid(void);</div><div class="line">       pid_t getppid(void);</div></pre></td></tr></table></figure>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h2 id="用户标识-User-id"><a href="#用户标识-User-id" class="headerlink" title="用户标识(User-id)"></a>用户标识(User-id)</h2><h2 id="信号-Signals"><a href="#信号-Signals" class="headerlink" title="信号(Signals)"></a>信号(Signals)</h2><h2 id="时间-Time-Value"><a href="#时间-Time-Value" class="headerlink" title="时间(Time Value)"></a>时间(Time Value)</h2><h2 id="系统调用和库函数"><a href="#系统调用和库函数" class="headerlink" title="系统调用和库函数"></a>系统调用和库函数</h2>]]></content>
      
        <categories>
            
            <category> Read </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular2基础学习]]></title>
      <url>/2016/06/15/front-end/2016_06_15_angular2%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="Angular2基础学习"><a href="#Angular2基础学习" class="headerlink" title="Angular2基础学习"></a>Angular2基础学习</h1><h2 id="Angular初识"><a href="#Angular初识" class="headerlink" title="Angular初识"></a>Angular初识</h2><p>ES6工具链</p>
<p><img src="http://7xrn62.com1.z0.glb.clouddn.com/062d2a05a05472a2bccf6ca4cbf650cf.png" alt="ES6tool-chain"></p>
<ul>
<li>systemjs – 通用模块加载器,支持AMD,CommonJS,ES6等各种格式的JS的模块加载</li>
<li>es6-module-loader – ES6模块加载器,systemjs会自动加载这个模块</li>
<li>traceur –ES6转码器,将ES6代码转换为当前浏览器支持的ES5代码.systemjs会自动加载 这个模块.</li>
</ul>
<h2 id="Angular应用三步走"><a href="#Angular应用三步走" class="headerlink" title="Angular应用三步走"></a>Angular应用三步走</h2><h3 id="1-引入Angular2预定义类型"><a href="#1-引入Angular2预定义类型" class="headerlink" title="1. 引入Angular2预定义类型"></a>1. 引入Angular2预定义类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &#123;Component, View, bootstrap&#125; from &quot;angualr2/anguar&quot;;</div></pre></td></tr></table></figure>
<h3 id="2-实现一个Angualr2组件"><a href="#2-实现一个Angualr2组件" class="headerlink" title="2. 实现一个Angualr2组件"></a>2. 实现一个Angualr2组件</h3><p>定义一个类,然后在这个类加注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[@Component](/user/Component)(&#123;selector:&quot;ez-app&quot;&#125;)</div><div class="line">[@View](/user/View)(&#123;template:&quot;&lt;h1&gt;Hello,Angular2&lt;/h1&gt;&quot;&#125;)</div><div class="line">class EzApp&#123;&#125;</div></pre></td></tr></table></figure></p>
<p><code>@Component</code>和<code>@View</code>都是给类<code>EzApp</code>附加的元信息， 被称为注解<code>Annotation</code>。</p>
<p><code>@Component</code>最重要的作用是通过<code>selector</code>属性（值为CSS选择符），指定这个组件渲染到哪个DOM对象上。 <code>@View</code>最重要的作用是通过<code>template</code>属性，指定渲染的模板。</p>
<h3 id="3-渲染组件到DATE-FORMAT"><a href="#3-渲染组件到DATE-FORMAT" class="headerlink" title="3. 渲染组件到DATE_FORMAT"></a>3. 渲染组件到DATE_FORMAT</h3><p>将组件渲染到DOM上，需要使用自举/bootstrap函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bootstrap(EzApp);</div></pre></td></tr></table></figure></p>
<p>这个函数的作用就是通知Angular2框架将EzApp组件渲染到DOM树上。</p>
<h2 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解/Annotation"></a>注解<code>/Annotation</code></h2><p>你一定好奇<code>@Component</code>和<code>@View</code>到底是怎么回事。看起来像其他语言（比如python） 的装饰器，是这样吗？</p>
<p>ES6规范里没有装饰器。这其实利用了traceur的一个实验特性：注解。给一个类 加注解，等同于设置这个类的annotations属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//注解写法</div><div class="line">[@Component](/user/Component)(&#123;selector:&quot;ez-app&quot;&#125;)</div><div class="line">class EzApp&#123;...&#125;</div></pre></td></tr></table></figure>
<p>等同于:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class EzApp&#123;...&#125;</div><div class="line">EzApp.annotations = [new Component(&#123;selector:&quot;ez-app&quot;&#125;)];</div></pre></td></tr></table></figure>
<p>注解可以看做编译器（traceur）层面的语法糖，但和python的装饰器不同， 注解在编译时仅仅被放在annotation里，编译器并不进行解释展开 - 这个解释的工作是 Angular2完成的：</p>
<p><img src="http://7xrn62.com1.z0.glb.clouddn.com/e9ada5202e0f5f1581f7a790f47c9dbb.png" alt="注解"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在Angular2中，bootstrap是围绕组件开始的，你定义一个组件，然后启动它。如果没有一个组件， 你甚至都没有办法使用Angular2！</p>
<p>支持多种渲染引擎</p>
<p>以组件而非DOM为核心，意味着Angular2在内核隔离了对DOM的依赖 - DOM仅仅作为一种可选的渲染引擎存在：<br><img src="http://7xrn62.com1.z0.glb.clouddn.com/933d3c64cc1da5d38833f14bbeffe648.png" alt="小结"></p>
]]></content>
      
        <categories>
            
            <category> Front-End </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ci持续集成]]></title>
      <url>/2016/06/01/devops/2016_06_01_ci%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<h1 id="CI持续集成"><a href="#CI持续集成" class="headerlink" title="CI持续集成"></a>CI持续集成</h1><p><a href="https://github.com/aosabook/500lines" target="_blank" rel="external">项目直达</a><br>这是一个500行实现的一个例子.<br><a href="http://qingyunha.github.io/taotao/" target="_blank" rel="external">该文章的中文翻译地址</a></p>
<h2 id="什么是持续集成系统"><a href="#什么是持续集成系统" class="headerlink" title="什么是持续集成系统"></a>什么是持续集成系统</h2><p>When developing software, we want to be able to verify that our new features or bug fixes are safe and work as expected. We do this by running tests against our code. Sometimes, developers will run tests locally to verify that their changes are safe, but developers may not have the time to test their code on every system their software runs in. Further, as more and more tests are added the amount of time required to run them, even only locally, becomes less viable. Because of this, continuous integration systems have been created.</p>
<p>当我们开发软件的时候,我们想要能够验证我们的新功能或者是修复的bug能够安全有效的想预期那样运行.我们通过重新测试我们的代码可以实现.有的时候,开发者会在本地来验证他们的代码的变更是否安全,但是开发者没有时间去测试他们的代码能否在所有可能的系统里面运行.进一步讲,需要的测试用例越多,就需要更多的事件去测试,即使是在本地,也只是很少的.因此,持续集成系统被创建了.</p>
<p>Continuous Integration (CI) systems are dedicated systems used to test new code. Upon a commit to the code repository, it is the responsibility of the continuous integration system to verify that this commit will not break any tests. To do this, the system must be able to fetch the new changes, run the tests and report its results. Like any other system, it should also be failure resistant. This means if any part of the system fails, it should be able to recover and continue from that point.</p>
<p>Continuous Integration (CI) systems主要集中于测试新的代码.当你提交代码到仓库的时候,持续集成系统应该验证这次提交是否应该测试.要做到中诶但,系统必须能够获取到新的变更,能够得到测试的结果和报告.像其他的系统一样,也是有容错机制的,这意味着你可以恢复到某个个点.</p>
<p>This test system should also handle load well, so that we can get test results in a reasonable amount of time in the event that commits are being made faster than the tests can be run. We can achieve this by distributing and parallelizing the testing effort. This project will demonstrate a small, bare-bones distributed continuous integration system that is designed for extensibility.</p>
<p>这个测试系统也应该处理负载,这样我们可以得到测试结果在合理的时间内提交的事件是由速度比测试可以运行。我们可以实现通过分配和并行测试工作。这个项目将展示一个小,持续集成的分布式系统设计的可扩展性。</p>
<h2 id="Project-Limitations-and-Notes"><a href="#Project-Limitations-and-Notes" class="headerlink" title="Project Limitations and Notes"></a>Project Limitations and Notes</h2><p>Due to the limitations of code length and unittest, I simplified test discovery. We will only run tests that are in a directory named tests within the repository.</p>
<p>Continuous integration systems monitor a master repository which is usually hosted on a web server, and not local to the CI’s file systems. For the cases of our example, we will use a local repository instead of a remote repository.</p>
<p>Continuous integration systems need not run on a fixed, regular schedule. You can also have them run every few commits, or per-commit. For our example case, the CI system will run periodically. This means if it is set up to check for changes in five-second periods, it will run tests against the most recent commit made after the five-second period. It won’t test every commit made within that period of time, only the most recent one.</p>
<p>This CI system is designed to check periodically for changes in a repository. In real-world CI systems, you can also have the repository observer get notified by a hosted repository. Github, for example, provides “post-commit hooks” which send out notifications to a URL. Following this model, the repository observer would be called by the web server hosted at that URL to respond to that notification. Since this is complex to model locally, we’re using an observer model, where the repository observer will check for changes instead of being notified.</p>
<p>CI systems also have a reporter aspect, where the test runner reports its results to a component that makes them available for people to see, perhaps on a webpage. For simplicity, this project gathers the test results and stores them as files in the file system local to the dispatcher process.</p>
<p>Note that the architecture this CI system uses is just one possibility among many. This approach has been chosen to simplify our case study into three main components.</p>
<p>这个项目使用Git存储库的需要测试的代码。只有将使用标准源代码管理调用,所以如果你不熟悉Git但熟悉其他版本控制系统(VCS)像svn或Mercurial,你仍然可以跟随。<br>由于代码长度和unittest的局限性,我简化测试发现。我们只会运行测试在一个目录中指定的测试库。<br>持续集成系统监控主存储库通常驻留在一个web服务器,而不是当地的CI的文件系统。的情况下,我们的示例中,我们将使用一个本地存储库,而不是一个远程存储库。<br>持续集成系统不需要在一个固定的运行,定期。你也可以让他们每隔几提交运行,或per-commit。在我们的示例中,CI系统会周期性地运行。这意味着如果是建立在五秒钟的时间检查更改,它将运行测试对最近提交后五秒的时间。它不会测试每一个提交了在这段时间内,只有最近的一个。<br>这个CI系统旨在定期检查存储库的变化。在现实世界的CI系统中,也可以存储库观察者通过托管库得到通知。Github,例如,提供“post-commit钩子”URL发送通知。在这个模型中,存储库观察者将由web服务器托管调用该URL通知的回应。因为这是在本地复杂的模型,我们使用观察者模式,观察者会检查存储库的变化而不是通知。<br>CI系统也有一个记者方面,测试运行器组件使得他们报道了他们的研究成果可供人们看到的,也许在一个网页。为简单起见,本项目收集测试结果并将它们存储在本地文件系统的文件调度过程。<br>注意,架构这个CI系统使用只是一个在许多可能性。这种方法已被选为简化我们的案例研究分成三个主要组件。</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The basic structure of a continuous integration system consists of three components: an observer, a test job dispatcher, and a test runner. The observer watches the repository. When it notices that a commit has been made, it notifies the job dispatcher. The job dispatcher then finds a test runner and gives it the commit number to test.</p>
<p>There are many ways to architect a CI system. We could have the observer, dispatcher and runner be the same process on a single machine. This approach is very limited since there is no load handling, so if more changes are added to the repository than the CI system can handle, a large backlog will accrue. This approach is also not fault-tolerant at all; if the computer it is running on fails or there is a power outage, there are no fallback systems, so no tests will run. The ideal system would be one that can handle as many test jobs as requested, and will do its best to compensate when machines go down.</p>
<p>To build a CI system that is fault-tolerant and load-bearing, in this project, each of these components is its own process. This will let each process be independent of the others, and let us run multiple instances of each process. This is useful when you have more than one test job that needs to be run at the same time. We can then spawn multiple test runners in parallel, allowing us to run as many jobs as needed, and prevent us from accumulating a backlog of queued tests.</p>
<p>In this project, not only do these components run as separate processes, but they also communicate via sockets, which will let us run each process on a separate, networked machine. A unique host/port address is assigned to each component, and each process can communicate with the others by posting messages at the assigned addresses.</p>
<p>This design will let us handle hardware failures on the fly by enabling a distributed architecture. We can have the observer run on one machine, the test job dispatcher on another, and the test runners on another, and they can all communicate with each other over a network. If any of these machines go down, we can schedule a new machine to go up on the network, so the system becomes fail-safe.</p>
<p>This project does not include auto-recovery code, as that is dependent on your distributed system’s architecture, but in the real world, CI systems are run in a distributed environment like this so they can have failover redundancy (i.e., we can fall back to a standby machine if one of the machines a process was running on becomes defunct).</p>
<p>For the purposes of this project, each of these processes will be locally and manually started distinct local ports.</p>
<p>持续集成系统的基本结构由三部分组成:一个观察者,一个测试作业调度器,一个测试运行器。观察者观测代码仓库库。当它发现一个commit时,它通知作业调度器。作业调度器然后发现一个测试运行器,使其提交测试。<br>构建CI系统的方法有很多。我们可以有观察者,调度器和runner是相同的进程在同一台计算机上。这种方法是非常有限,由于没有对负载进行处理,如果大量的更改添加到库,CI系统将积累大量积压。这种方法也不是容错;如果计算机上运行发生故障或停电,没有后备系统,所以没有测试运行。理想的系统是一个能够处理请求尽可能多的测试工作,并且能够容灾。<br>建立一个CI系统容错和承载,在这个项目中,每一个组件都是自己的过程。这将让每个过程是独立于他人,让我们每个流程的多个实例运行。这是有用的,当你有不止一个的测试工作,需要同时运行。我们可以产生多个并行测试,让我们尽可能多的工作需要,并阻止我们积累的排队测试。<br>在这个项目中,不仅这些组件作为独立进程运行,但他们也通过套接字进行通信,这将让我们每个进程运行在一个单独的、网络化的机器。独特的主机/端口地址是分配给每个组件,和每个进程可以与别人交流,发布信息的分配地址。<br>这个设计将让我们处理硬件故障动态通过启用一个分布式架构。我们可以有观察者在一台机器上运行,测试作业调度器,测试运行在另一个,他们都能通过网络相互通信。如果这些机器,我们可以安排一个新机器在网络上,所以这个系统就自动防故障装置。<br>这个项目不包括自动恢复代码,因为这是依赖于分布式系统的架构,但在现实世界中,这样的CI系统是运行在分布式环境中,这样他们就可以有故障转移(即冗余。,我们可以回到一个备用计算机如果其中一个机器运行过程成为破产)。<br>对于本项目,这些过程将在本地和手动开始不同的当地的端口。</p>
<h2 id="Files-in-this-Project"><a href="#Files-in-this-Project" class="headerlink" title="Files in this Project"></a>Files in this Project</h2><p>This project contains Python files for each of these components: the repository observer \newline (repo_observer.py), the test job dispatcher (dispatcher.py), and the test runner \newline (test_runner.py). Each of these three processes communicate with each other using sockets, and since the code used to transmit information is shared by all of them, there is a helpers.py file that contains it, so each process imports the communicate function from here instead of having it duplicated in the file.</p>
<p>There are also bash script files used by these processes. These script files are used to execute bash and git commands in an easier way than constantly using Python’s operating system-level modules like os and subprocess.</p>
<p>Lastly, there is a tests directory, which contains two example tests the CI system will run. One test will pass, and the other will fail.</p>
<p>这个项目包含为每个这些组件:Python文件存储库观察者(repo_observer.py),测试作业调度器(dispatcher.py),并测试运行器(test_runner.py)。这三个过程相互通信使用套接字,因为用于传输信息的代码是由所有人共享helpers.py文件,其中包含它,所以每个流程导入函数从这里交流而不是复制的文件。<br>也有这些进程使用的bash脚本文件。这些脚本文件用于执行bash和git命令在一个更简单的方法比不断使用Python的操作系统级模块如操作系统和子流程。<br>最后,有一个测试目录,它包含了两个示例测试CI系统将运行。一个测试能通过,另一个就会失败。</p>
<h2 id="Inital-Setup"><a href="#Inital-Setup" class="headerlink" title="Inital Setup"></a>Inital Setup</h2><p>While this CI system is ready to work in a distributed system, let us start by running everything locally on one computer so we can get a grasp on how the CI system works without adding the risk of running into network-related issues. If you wish to run this in a distributed environment, you can run each component on its own machine.</p>
<p>Continuous integration systems run tests by detecting changes in a code repository, so to start, we will need to set up the repository our CI system will monitor.</p>
<p>Let’s call this test_repo:</p>
<p>$ mkdir test_repo<br>$ cd test_repo<br>$ git init<br>This will be our master repository. This is where developers check in their code, so our CI should pull this repository and check for commits, then run tests. The thing that checks for new commits is the repository observer.</p>
<p>The repository observer works by checking commits, so we need at least one commit in the master repository. Let’s commit our example tests so we have some tests to run.</p>
<p>Copy the tests folder from this code base to test_repo and commit it:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cp -r /this/directory/tests /path/to/test_repo/</div><div class="line">$ cd /path/to/test\_repo</div><div class="line">$ git add tests/</div><div class="line">$ git commit -m ”add tests”</div></pre></td></tr></table></figure></p>
<p>Now you have a commit in the master repository.</p>
<p>The repo observer component will need its own clone of the code, so it can detect when a new commit is made. Let’s create a clone of our master repository, and call it test_repo_clone_obs:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone /path/to/test_repo test_repo_clone_obs</div></pre></td></tr></table></figure></p>
<p>The test runner will also need its own clone of the code, so it can checkout the repository at a given commit and run the tests. Let’s create another clone of our master repository, and call it test_repo_clone_runner:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone /path/to/test_repo test_repo_clone_runner</div></pre></td></tr></table></figure></p>
<p>虽然这CI系统准备工作在分布式系统中,让我们从一台计算机上本地运行一切我们可以得到一个对CI系统如何工作在不增加的风险跑到网络相关问题。如果你想运行在分布式环境中,您可以运行自己的机器上的每个组件。<br>持续集成系统通过检测运行测试代码库的变化,所以开始,我们将需要设置存储库CI系统将监测。</p>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Logstalgia介绍]]></title>
      <url>/2016/05/04/tool/2016_05_04_logstalgia%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>依赖于OpenGL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libglew-dev</div><div class="line">sudo apt-get install libsdl-image1.2-dev</div><div class="line">sudo apt-get install libboost-all-dev</div><div class="line">sudo apt-get install libglm-dev</div></pre></td></tr></table></figure>
<p>使用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh user@exapmle.com tail -f /var/log/example.com.log | logstalgia</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OAuth授权认证]]></title>
      <url>/2016/04/27/HTTP/2016_04_27_oauth%E6%8E%88%E6%9D%83%E8%AE%A4%E8%AF%81/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python实现python解释器]]></title>
      <url>/2016/04/27/python/2016_04_27_python%E5%AE%9E%E7%8E%B0python%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="Python实现的Python解释器"><a href="#Python实现的Python解释器" class="headerlink" title="Python实现的Python解释器"></a>Python实现的Python解释器</h1><p>原文地址<br><a href="https://github.com/aosabook/500lines/blob/b5ee54148551b2e71991cf0a4858d86b671f6e52/interpreter/interpreter.markdown" target="_blank" rel="external">https://github.com/aosabook/500lines/blob/b5ee54148551b2e71991cf0a4858d86b671f6e52/interpreter/interpreter.markdown</a></p>
<p><a href="https://github.com/aosabook/500lines" target="_blank" rel="external">项目直达</a><br>这是一个500行实现的一个例子.<br><a href="http://qingyunha.github.io/taotao/" target="_blank" rel="external">该文章的中文翻译地址</a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Byterun</code> is a Python interpreter implemented in Python. Through my work on Byterun, I was surprised and delighted to discover that the fundamental structure of the Python interpreter fits easily into the 500-line size restriction. This chapter will walk through the structure of the interpreter and give you enough context to explore it further. The goal is not to explain everything there is to know about interpreters—like so many interesting areas of programming and computer science, you could devote years to developing a deep understanding of the topic.</p>
<p>Byterun was written by Ned Batchelder and myself, building on the work of Paul Swartz. Its structure is similar to the primary implementation of Python, CPython, so understanding Byterun will help you understand interpreters in general and the CPython interpreter in particular. (If you don’t know which Python you’re using, it’s probably CPython.) Despite its short length, Byterun is capable of running most simple Python programs[^versions].</p>
<p>[^versions]: This chapter is based on bytecode produced by Python 3.5 or earlier, as there were some changes to the bytecode specification in Python 3.6.</p>
<h2 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h2><p>解释器: 指的就是REPL(A read–eval–print loop )</p>
<p>在解释器接手之前，Python会执行其他3个步骤：词法分析，语法解析和编译。这三步合起来把源代码转换成code object,它包含着解释器可以理解的指令。而解释器的工作就是解释code object中的指令。</p>
<h2 id="A-Python-Python-Interpreter"><a href="#A-Python-Python-Interpreter" class="headerlink" title="A Python Python Interpreter"></a>A Python Python Interpreter</h2><p>gcc就是C语言写的</p>
<h2 id="Building-an-Interpreter"><a href="#Building-an-Interpreter" class="headerlink" title="Building an Interpreter"></a>Building an Interpreter</h2><p>Python解释器是一个虚拟机,模拟真实计算机的软件。我们这个虚拟机是栈机器，它用几个栈来完成操作（与之相对的是寄存器机器，它从特定的内存地址读写数据）。<br>Python解释器是一个字节码解释器：它的输入是一些命令集合称作字节码。当你写Python代码时，词法分析器，语法解析器和编译器生成code object让解释器去操作。每个code object都包含一个要被执行的指令集合 — 它就是字节码 — 另外还有一些解释器需要的信息。字节码是Python代码的一个中间层表示：它以一种解释器可以理解的方式来表示源代码。这和汇编语言作为C语言和机器语言的中间表示很类似。</p>
<h2 id="A-Tiny-Interpreter"><a href="#A-Tiny-Interpreter" class="headerlink" title="A Tiny Interpreter"></a>A Tiny Interpreter</h2><p>理解3个指令<br><code>LOAD_VALUE</code><br><code>ADD_TOW_VALUE</code><br><code>PRINT_ANSWER</code></p>
<p>假设你输入的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">7+5</div></pre></td></tr></table></figure></p>
<p>生成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">what_to_execute = &#123;</div><div class="line">    &quot;instructions&quot;: [(&quot;LOAD_VALUE&quot;, 0),  # the first number</div><div class="line">                     (&quot;LOAD_VALUE&quot;, 1),  # the second number</div><div class="line">                     (&quot;ADD_TWO_VALUES&quot;, None),</div><div class="line">                     (&quot;PRINT_ANSWER&quot;, None)],</div><div class="line">    &quot;numbers&quot;: [7, 5] &#125;</div></pre></td></tr></table></figure></p>
<p>Python解释器是一个栈机器，所以它必须通过操作栈来完成这个加法。(Figure 1.1)解释器先执行第一条指令，LOAD_VALUE，把第一个数压到栈中。接着它把第二个数也压到栈中。然后，第三条指令，ADD_TWO_VALUES,先把两个数从栈中弹出，加起来，再把结果压入栈中。最后一步，把结果弹出并输出。</p>
<p><img src="http://7xrn62.com1.z0.glb.clouddn.com/a2e07f8d634f98373fe498bd2a9e8ae5.png" alt="栈机器"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Interpreter:</div><div class="line">    def __init__(self):</div><div class="line">        self.stack = []</div><div class="line"></div><div class="line">    def LOAD_VALUE(self, number):</div><div class="line">        self.stack.append(number)</div><div class="line"></div><div class="line">    def PRINT_ANSWER(self):</div><div class="line">        answer = self.stack.pop()</div><div class="line">        print(answer)</div><div class="line"></div><div class="line">    def ADD_TWO_VALUES(self):</div><div class="line">        first_num = self.stack.pop()</div><div class="line">        second_num = self.stack.pop()</div><div class="line">        total = first_num + second_num</div><div class="line">        self.stack.append(total)</div></pre></td></tr></table></figure>
<p>上面3个方法完成了解释器的3个指令.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def run_code(self, what_to_execute):</div><div class="line">       instructions = what_to_execute[&quot;instructions&quot;]</div><div class="line">       numbers = what_to_execute[&quot;numbers&quot;]</div><div class="line">       for each_step in instructions:</div><div class="line">           instruction, argument = each_step</div><div class="line">           if instruction == &quot;LOAD_VALUE&quot;:</div><div class="line">               number = numbers[argument]</div><div class="line">               self.LOAD_VALUE(number)</div><div class="line">           elif instruction == &quot;ADD_TWO_VALUES&quot;:</div><div class="line">               self.ADD_TWO_VALUES()</div><div class="line">           elif instruction == &quot;PRINT_ANSWER&quot;:</div></pre></td></tr></table></figure>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">what_to_execute = &#123;</div><div class="line">        &quot;instructions&quot;: [(&quot;LOAD_VALUE&quot;, 0),</div><div class="line">                         (&quot;STORE_NAME&quot;, 0),</div><div class="line">                         (&quot;LOAD_VALUE&quot;, 1),</div><div class="line">                         (&quot;STORE_NAME&quot;, 1),</div><div class="line">                         (&quot;LOAD_NAME&quot;, 0),</div><div class="line">                         (&quot;LOAD_NAME&quot;, 1),</div><div class="line">                         (&quot;ADD_TWO_VALUES&quot;, None),</div><div class="line">                         (&quot;PRINT_ANSWER&quot;, None)],</div><div class="line">        &quot;numbers&quot;: [1, 2],</div><div class="line">        &quot;names&quot;:   [&quot;a&quot;, &quot;b&quot;] &#125;</div></pre></td></tr></table></figure>
<p>变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class Interpreter:</div><div class="line">    def __init__(self):</div><div class="line">        self.stack = []</div><div class="line">        self.environment = &#123;&#125;</div><div class="line"></div><div class="line">    def STORE_NAME(self, name):</div><div class="line">        val = self.stack.pop()</div><div class="line">        self.environment[name] = val</div><div class="line"></div><div class="line">    def LOAD_NAME(self, name):</div><div class="line">        val = self.environment[name]</div><div class="line">        self.stack.append(val)</div><div class="line"></div><div class="line">    def parse_argument(self, instruction, argument, what_to_execute):</div><div class="line">        &quot;&quot;&quot; Understand what the argument to each instruction means.&quot;&quot;&quot;</div><div class="line">        numbers = [&quot;LOAD_VALUE&quot;]</div><div class="line">        names = [&quot;LOAD_NAME&quot;, &quot;STORE_NAME&quot;]</div><div class="line"></div><div class="line">        if instruction in numbers:</div><div class="line">            argument = what_to_execute[&quot;numbers&quot;][argument]</div><div class="line">        elif instruction in names:</div><div class="line">            argument = what_to_execute[&quot;names&quot;][argument]</div><div class="line"></div><div class="line">        return argument</div><div class="line"></div><div class="line">    def run_code(self, what_to_execute):</div><div class="line">        instructions = what_to_execute[&quot;instructions&quot;]</div><div class="line">        for each_step in instructions:</div><div class="line">            instruction, argument = each_step</div><div class="line">            argument = self.parse_argument(instruction, argument, what_to_execute)</div><div class="line"></div><div class="line">            if instruction == &quot;LOAD_VALUE&quot;:</div><div class="line">                self.LOAD_VALUE(argument)</div><div class="line">            elif instruction == &quot;ADD_TWO_VALUES&quot;:</div><div class="line">                self.ADD_TWO_VALUES()</div><div class="line">            elif instruction == &quot;PRINT_ANSWER&quot;:</div><div class="line">                self.PRINT_ANSWER()</div><div class="line">            elif instruction == &quot;STORE_NAME&quot;:</div><div class="line">                self.STORE_NAME(argument)</div><div class="line">            elif instruction == &quot;LOAD_NAME&quot;:</div><div class="line">                self.LOAD_NAME(argument)</div></pre></td></tr></table></figure>
<p>可以看到run_code的方法已经很冗长了.使用python的动态方法查找</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def execute(self, what_to_execute):</div><div class="line">    instructions = what_to_execute[&quot;instructions&quot;]</div><div class="line">    for each_step in instructions:</div><div class="line">       instruction, argument = each_step</div><div class="line">       argument = self.parse_argument(instruction, argument, what_to_execute)</div><div class="line">       bytecode_method = getattr(self, instruction)</div><div class="line">       if argument is None:</div><div class="line">           bytecode_method()</div><div class="line">       else:</div><div class="line">           bytecode_method(argument)</div></pre></td></tr></table></figure>
<h2 id="Real-Python-Bytecode"><a href="#Real-Python-Bytecode" class="headerlink" title="Real Python Bytecode"></a>Real Python Bytecode</h2><p>python字节码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; def cond():</div><div class="line">...     x = 3</div><div class="line">...     if x &lt; 5:</div><div class="line">...         return &apos;yes&apos;</div><div class="line">...     else:</div><div class="line">...         return &apos;no&apos;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>使用<code>cond.__code__</code>可以看到其字节码,但是看上去难以理解</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; cond.__code__.co_code  # the bytecode as raw bytes</div><div class="line">b&apos;d\x01\x00&#125;\x00\x00|\x00\x00d\x02\x00k\x00\x00r\x16\x00d\x03\x00Sd\x04\x00Sd\x00</div><div class="line">   \x00S&apos;</div><div class="line">&gt;&gt;&gt; list(cond.__code__.co_code)  # the bytecode as numbers</div><div class="line">[100, 1, 0, 125, 0, 0, 124, 0, 0, 100, 2, 0, 107, 0, 0, 114, 22, 0, 100, 3, 0, 83,</div><div class="line"> 100, 4, 0, 83, 100, 0, 0, 83]</div></pre></td></tr></table></figure>
<p>使用标准库中的<code>dis</code> module来解决这个问题.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; dis.dis(cond)</div><div class="line">  2           0 LOAD_CONST               1 (3)</div><div class="line">              3 STORE_FAST               0 (x)</div><div class="line"></div><div class="line">  3           6 LOAD_FAST                0 (x)</div><div class="line">              9 LOAD_CONST               2 (5)</div><div class="line">             12 COMPARE_OP               0 (&lt;)</div><div class="line">             15 POP_JUMP_IF_FALSE       22</div><div class="line"></div><div class="line">  4          18 LOAD_CONST               3 (&apos;yes&apos;)</div><div class="line">             21 RETURN_VALUE</div><div class="line"></div><div class="line">  6     &gt;&gt;   22 LOAD_CONST               4 (&apos;no&apos;)</div><div class="line">             25 RETURN_VALUE</div><div class="line">             26 LOAD_CONST               0 (None)</div><div class="line">             29 RETURN_VALUE</div></pre></td></tr></table></figure>
<p>第一列的数字标示对应的源码行数<br>第二列数字是字节码的索引<br>第三列是指令本省对应的名字<br>第四列标示之列那个 参数<br>第五列标示关于参数的提示</p>
<h2 id="Conditrionals-and-Loops"><a href="#Conditrionals-and-Loops" class="headerlink" title="Conditrionals and Loops"></a>Conditrionals and Loops</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; def loop():</div><div class="line">...      x = 1</div><div class="line">...      while x &lt; 5:</div><div class="line">...          x = x + 1</div><div class="line">...      return x</div><div class="line">...</div><div class="line">&gt;&gt;&gt; dis.dis(loop)</div><div class="line">  2           0 LOAD_CONST               1 (1)</div><div class="line">              3 STORE_FAST               0 (x)</div><div class="line"></div><div class="line">  3           6 SETUP_LOOP              26 (to 35)</div><div class="line">        &gt;&gt;    9 LOAD_FAST                0 (x)</div><div class="line">             12 LOAD_CONST               2 (5)</div><div class="line">             15 COMPARE_OP               0 (&lt;)</div><div class="line">             18 POP_JUMP_IF_FALSE       34</div><div class="line"></div><div class="line">  4          21 LOAD_FAST                0 (x)</div><div class="line">             24 LOAD_CONST               1 (1)</div><div class="line">             27 BINARY_ADD</div><div class="line">             28 STORE_FAST               0 (x)</div><div class="line">             31 JUMP_ABSOLUTE            9</div><div class="line">        &gt;&gt;   34 POP_BLOCK</div><div class="line"></div><div class="line">  5     &gt;&gt;   35 LOAD_FAST                0 (x)</div><div class="line">             38 RETURN_VALUE</div></pre></td></tr></table></figure>
<h2 id="Explore-Bytecode"><a href="#Explore-Bytecode" class="headerlink" title="Explore Bytecode"></a>Explore Bytecode</h2><p>我鼓励你用dis.dis来试试你自己写的函数。一些有趣的问题值得探索：</p>
<ul>
<li>对解释器而言for循环和while循环有什么不同？</li>
<li>能不能写出两个不同函数，却能产生相同的字节码?</li>
<li>elif是怎么工作的？列表推导呢？</li>
</ul>
<h2 id="Frames"><a href="#Frames" class="headerlink" title="Frames"></a>Frames</h2><p>一个frame是一些信息的集合和代码的执行上下文。frames在Python代码执行时动态的创建和销毁。每个frame对应函数的一次调用。— 所以每个frame只有一个code object与之关联，而一个code object可以很多frame。比如你有一个函数递归的调用自己10次，这时有11个frame。总的来说，Python程序的每个作用域有一个frame，比如，每个module，每个函数调用，每个类定义。</p>
<p>ex:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; def bar(y):</div><div class="line">...     z = y + 3     # &lt;--- (3) ... and the interpreter is here.</div><div class="line">...     return z</div><div class="line">...</div><div class="line">&gt;&gt;&gt; def foo():</div><div class="line">...     a = 1</div><div class="line">...     b = 2</div><div class="line">...     return a + bar(b) # &lt;--- (2) ... which is returning a call to bar ...</div><div class="line">...</div><div class="line">&gt;&gt;&gt; foo()             # &lt;--- (1) We&apos;re in the middle of a call to foo ...</div></pre></td></tr></table></figure>
<p><img src="http://7xrn62.com1.z0.glb.clouddn.com/fe2d2dacab4fd28e6d6cd4acdf1f5ff2.png" alt="python frame 概念"></p>
<p>在，解释器在foo函数的调用中。调用栈中有3个fram：一个对应于module层，一个对应函数foo,别一个对应函数bar。(Figure 1.2)一旦bar返回，与它对应的frame就会从调用栈中弹出并丢弃。</p>
<p>我惊讶的发现Python真的很少依赖于每个frame有一个数据栈这个特性。在Python中几乎所有的操作都会清空数据栈，所以所有的frame公用一个数据栈是没问题的。在上面的例子中，当bar执行完后，它的数据栈为空。即使foo公用这一个栈，它的值也不会受影响。然而，对应生成器，一个关键的特点是它能暂停一个frame的执行，返回到其他的frame，一段时间后它能返回到原来的frame，并以它离开时的同样的状态继续执行。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql出现Lock-Wait-Timeout]]></title>
      <url>/2016/04/21/MISC/2016_04_21_mysql%E5%87%BA%E7%8E%B0lock-wait-timeout/</url>
      <content type="html"><![CDATA[<h1 id="mysql出现Lock-Wait-Timeout"><a href="#mysql出现Lock-Wait-Timeout" class="headerlink" title="mysql出现Lock Wait Timeout"></a>mysql出现Lock Wait Timeout</h1><p>使用的RDS,出现了Lock Wait Timeout的问题<br>解决方法</p>
<p>以ROOT用户登录数据库后执行<br><code>SHOW FULL PROCESSLIST</code>,然后<code>KILL &lt;id&gt;</code></p>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql的时间查询操作]]></title>
      <url>/2016/04/20/SQL/2016_04_20_mysql%E7%9A%84%E6%97%B6%E9%97%B4%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="MySQL关于时间的查询"><a href="#MySQL关于时间的查询" class="headerlink" title="MySQL关于时间的查询"></a>MySQL关于时间的查询</h1><ul>
<li><p>1 、 查看当天日期</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select current_date();</div></pre></td></tr></table></figure>
</li>
<li><p>2、 查看当天时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select current_time();</div></pre></td></tr></table></figure>
</li>
<li><p>3、查看当天时间日期</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select current_timestamp();</div></pre></td></tr></table></figure>
</li>
<li><p>4、查询当天记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名 where to_days(时间字段名) = to_days(now());</div></pre></td></tr></table></figure>
</li>
<li><p>5、查询昨天记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) – TO_DAYS( 时间字段名) &lt;= 1</div></pre></td></tr></table></figure>
</li>
<li><p>6、查询7天的记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)</div></pre></td></tr></table></figure>
</li>
<li><p>7、查询近30天的记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)</div></pre></td></tr></table></figure>
</li>
<li><p>8、查询本月的记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, ‘%Y%m’ ) = DATE_FORMAT( CURDATE( ) , ‘%Y%m’ )</div></pre></td></tr></table></figure>
</li>
<li><p>9、查询上一月的记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , ‘%Y%m’ ) , date_format( 时间字段名, ‘%Y%m’ ) ) =1</div></pre></td></tr></table></figure>
</li>
<li><p>10、查询本季度数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名 where QUARTER(create_date)=QUARTER(now());</div></pre></td></tr></table></figure>
</li>
<li><p>11、查询上季度数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名 where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));</div></pre></td></tr></table></figure>
</li>
<li><p>12、查询本年数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名  where YEAR(create_date)=YEAR(NOW());</div></pre></td></tr></table></figure>
</li>
<li><p>13、查询上年数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名 where year(create_date)=year(date_sub(now(),interval 1 year));</div></pre></td></tr></table></figure>
</li>
<li><p>14、查询当前这周的数据</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM 表名 WHERE YEARWEEK(date_format(submittime,&apos;%Y-%m-%d&apos;)) = YEARWEEK(now());</div></pre></td></tr></table></figure>
<ul>
<li>15、查询上周的数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM 表名 WHERE YEARWEEK(date_format(submittime,&apos;%Y-%m-%d&apos;)) = YEARWEEK(now())-1;</div></pre></td></tr></table></figure>
<ul>
<li><p>16、查询当前月份的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名   where date_format(submittime,&apos;%Y-%m&apos;)=date_format(now(),&apos;%Y-%m&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>17、查询距离当前现在6个月的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python打包和发布]]></title>
      <url>/2016/04/19/python/2016_04_19_python%E6%89%93%E5%8C%85%E5%92%8C%E5%8F%91%E5%B8%83/</url>
      <content type="html"><![CDATA[<h1 id="setuptools工具"><a href="#setuptools工具" class="headerlink" title="setuptools工具"></a>setuptools工具</h1><h2 id="编写setupt-py文件"><a href="#编写setupt-py文件" class="headerlink" title="编写setupt.py文件"></a>编写<code>setupt.py</code>文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from setuptools import setup</div><div class="line">setup(name=&quot;pyIP&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">python setup.py --help-commands</div><div class="line">Standard commands:</div><div class="line">  build             build everything needed to install</div><div class="line">  build_py          &quot;build&quot; pure Python modules (copy to build directory)</div><div class="line">  build_ext         build C/C++ extensions (compile/link to build directory)</div><div class="line">  build_clib        build C/C++ libraries used by Python extensions</div><div class="line">  build_scripts     &quot;build&quot; scripts (copy and fixup #! line)</div><div class="line">  clean             clean up temporary files from &apos;build&apos; command</div><div class="line">  install           install everything from build directory</div><div class="line">  install_lib       install all Python modules (extensions and pure Python)</div><div class="line">  install_headers   install C/C++ header files</div><div class="line">  install_scripts   install scripts (Python or otherwise)</div><div class="line">  install_data      install data files</div><div class="line">  sdist             create a source distribution (tarball, zip file, etc.)</div><div class="line">  register          register the distribution with the Python package index</div><div class="line">  bdist             create a built (binary) distribution</div><div class="line">  bdist_dumb        create a &quot;dumb&quot; built distribution</div><div class="line">  bdist_rpm         create an RPM distribution</div><div class="line">  bdist_wininst     create an executable installer for MS Windows</div><div class="line">  upload            upload binary package to PyPI</div><div class="line">  check             perform some checks on the package</div><div class="line"></div><div class="line">Extra commands:</div><div class="line">  develop           install package in &apos;development mode&apos;</div><div class="line">  saveopts          save supplied options to setup.cfg or other config file</div><div class="line">  egg_info          create a distribution&apos;s .egg-info directory</div><div class="line">  upload_docs       Upload documentation to PyPI</div><div class="line">  alias             define a shortcut to invoke one or more commands</div><div class="line">  easy_install      Find/get/install Python packages</div><div class="line">  rotate            delete older distributions, keeping N newest files</div><div class="line">  bdist_egg         create an &quot;egg&quot; distribution</div><div class="line">  install_egg_info  Install an .egg-info directory for the package</div><div class="line">  test              run unit tests after in-place build</div><div class="line">  setopt            set an option in setup.cfg or another config file</div></pre></td></tr></table></figure>
<h2 id="sdist–创建一个发行树"><a href="#sdist–创建一个发行树" class="headerlink" title="sdist–创建一个发行树"></a><code>sdist</code>–创建一个发行树</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py sdist</div></pre></td></tr></table></figure>
<p>如果需要执行脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scripts=[&apos;bin/sshtool.py&apos;]</div></pre></td></tr></table></figure></p>
<h2 id="register和upload命令"><a href="#register和upload命令" class="headerlink" title="register和upload命令"></a><code>register</code>和<code>upload</code>命令</h2><p>pypi服务器,位于<a href="http://pypi.python.org/pypi.这是distutils包所使用的默认服务器" target="_blank" rel="external">http://pypi.python.org/pypi.这是distutils包所使用的默认服务器</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python setup.py register</div><div class="line">python setup.py sdist upload</div><div class="line">python setup.py sdist upload -r pypi-server //可以选择服务器</div></pre></td></tr></table></figure>
<p>会在主目录下存在一个<code>.pypirc</code>的文件保存帐号和密码.</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python和MongoDB--Using MongoEngine]]></title>
      <url>/2016/04/14/python/2016_04_14_python%E5%92%8Cmongodb--using-mongoengine/</url>
      <content type="html"><![CDATA[<h1 id="Python操作MongoDB–使用MongoEngine"><a href="#Python操作MongoDB–使用MongoEngine" class="headerlink" title="Python操作MongoDB–使用MongoEngine"></a>Python操作MongoDB–使用MongoEngine</h1><p>python操作mongo的模块用很多,如果你习惯与ORM,那么推荐使用MongoEngine.</p>
<h2 id="RefernceField"><a href="#RefernceField" class="headerlink" title="RefernceField"></a>RefernceField</h2><p>可以很方便的构建一对多或多对多的关系</p>
<h2 id="oreder-by"><a href="#oreder-by" class="headerlink" title="oreder_by"></a>oreder_by</h2><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> MongoDB </tag>
            
            <tag> MongoEngine </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Window折腾Python]]></title>
      <url>/2016/04/09/python/2016_04_09_window%E4%B8%8B%E6%8A%98%E8%85%BEpython/</url>
      <content type="html"><![CDATA[<h1 id="Windows下折腾python"><a href="#Windows下折腾python" class="headerlink" title="Windows下折腾python"></a>Windows下折腾python</h1><h2 id="Unable-to-find-vcvarsall-bat"><a href="#Unable-to-find-vcvarsall-bat" class="headerlink" title="Unable to find vcvarsall.bat"></a>Unable to find vcvarsall.bat</h2><p>命令行下执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET VS90COMNTOOLS=%VS100COMNTOOLS%</div></pre></td></tr></table></figure></p>
<p>如果你安装的是 2012 版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET VS90COMNTOOLS=%VS110COMNTOOLS%</div></pre></td></tr></table></figure></p>
<p>如果你安装的是 2013版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET VS90COMNTOOLS=%VS120COMNTOOLS%</div></pre></td></tr></table></figure></p>
<p>或者更暴力，直接配置系统环境变量 VS90COMNTOOLS指向 %VS你的版本COMNTOOLS%</p>
<p>你还可以更暴力，在<code>..python安装路径...\Lib\distutils目录下有个msvc9compiler.py</code>找到243行  </p>
<p><code>toolskey = &quot;VS%0.f0COMNTOOLS&quot; % version</code>   直接改为 <code>toolskey = &quot;VS你的版本COMNTOOLS&quot;(这个就是为什么要配 ”VS90COMNTOOLS“ 的原因，因为人家文件名都告诉你了是  Microsoft vc 9的compiler,   代码都写死了要vc9的comntools，就要找这个玩意儿，找不到不干活)</code></p>
<p>这么做的理由是<code>Python2.7</code> 扩展包是可以用08版或者更高的VS编译的，其<code>setup.py</code>(安装脚本)都是去windows系统寻找08版的VS,所以设置VS90的path</p>
<p>如果Python版本小于2.7，强烈建议使用 VS08版，用2010或者更高可能部分扩展不好使。给个例子：</p>
<p>在安装一些Python模块时，大部分是cpython写的模块时会发生如下错误 <code>error: Unable to find vcvarsall.bat</code>先前的一篇文章：在Windows上安装Scrapy时也讲到了这个问题。当时讲到的方案是，安装VS 2008进行解决，但是Vs 2008又太大，不想装，所以这次想到了另外的方案，同样是上次说的，当时上次很不完整。<br>解决方案一：安装Vs2008（实测）<br>完全的无脑流，安装完问题直接解决。<br>解决方案二：安装Vs2010（未测试）<br>上次在电脑上装个Vs2010并不能像 vs2008那样直接解决问题，从网上找到如下解决方案，不知是否可行。<br>打开<code>&lt;python安装目录&gt;\Lib\distutils\msvc9compiler.py</code><br>找到 <code>toolskey = &quot;VS%0.f0COMNTOOLS&quot; % version</code>，直接修改为 <code>toolskey = &quot;VS100COMNTOOLS&quot;</code><br>解决方案三：安装MinGW（实测）</p>
<h3 id="1、下载安装MinGW，下载地址为：MinGW"><a href="#1、下载安装MinGW，下载地址为：MinGW" class="headerlink" title="1、下载安装MinGW，下载地址为：MinGW"></a>1、下载安装MinGW，下载地址为：<a href="http://sourceforge.net/projects/mingw/files/latest/download?source=files" target="_blank" rel="external">MinGW</a></h3><h3 id="2、在MinGW的安装目录下找到bin文件夹，找到mingw32-make-exe，复制一份更名为make-exe"><a href="#2、在MinGW的安装目录下找到bin文件夹，找到mingw32-make-exe，复制一份更名为make-exe" class="headerlink" title="2、在MinGW的安装目录下找到bin文件夹，找到mingw32-make.exe，复制一份更名为make.exe"></a>2、在<code>MinGW</code>的安装目录下找到<code>bin</code>文件夹，找到<code>mingw32-make.exe</code>，复制一份更名为<code>make.exe</code></h3><h3 id="3、把MinGW的路径添加到环境变量path中，比如我把MinGW安装到D-MinGW-中，就把D-MinGW-bin添加到path中；"><a href="#3、把MinGW的路径添加到环境变量path中，比如我把MinGW安装到D-MinGW-中，就把D-MinGW-bin添加到path中；" class="headerlink" title="3、把MinGW的路径添加到环境变量path中，比如我把MinGW安装到D:\MinGW\中，就把D:\MinGW\bin添加到path中；"></a>3、把<code>MinGW</code>的路径添加到环境变量<code>path</code>中，比如我把M<code>inGW</code>安装到<code>D:\MinGW\</code>中，就把<code>D:\MinGW\bin</code>添加到<code>path</code>中；</h3><h3 id="4、在-lt-python安装目录-gt-distutils增加文件distutils-cfg，在文件里输入"><a href="#4、在-lt-python安装目录-gt-distutils增加文件distutils-cfg，在文件里输入" class="headerlink" title="4、在&lt;python安装目录&gt;\distutils增加文件distutils.cfg，在文件里输入"></a>4、在<code>&lt;python安装目录&gt;\distutils</code>增加文件<code>distutils.cfg</code>，在文件里输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[build]</div><div class="line">compiler=mingw32</div></pre></td></tr></table></figure>
<p>保存；</p>
<h3 id="5、执行原先的模块安装，发现还是报错，报错内容为"><a href="#5、执行原先的模块安装，发现还是报错，报错内容为" class="headerlink" title="5、执行原先的模块安装，发现还是报错，报错内容为"></a>5、执行原先的模块安装，发现还是报错，报错内容为</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">：error: command ‘gcc’ failed: No such file or directory</div></pre></td></tr></table></figure>
<p>解决方案是将<code>D:\MinGW\lib</code>再添加到PATH中。</p>
<h3 id="6、如果安装过程中出现-error-Could-not-find-‘openssl-exe’-则直接到http-pypi-python-org-pypi-pyOpenSSL-0-13-下载安装即可。"><a href="#6、如果安装过程中出现-error-Could-not-find-‘openssl-exe’-则直接到http-pypi-python-org-pypi-pyOpenSSL-0-13-下载安装即可。" class="headerlink" title="6、如果安装过程中出现 error: Could not find ‘openssl.exe’ 则直接到http://pypi.python.org/pypi/pyOpenSSL/0.13 下载安装即可。"></a>6、如果安装过程中出现 error: Could not find ‘openssl.exe’ 则直接到<a href="http://pypi.python.org/pypi/pyOpenSSL/0.13" target="_blank" rel="external">http://pypi.python.org/pypi/pyOpenSSL/0.13</a> 下载安装即可。</h3><h3 id="7、再次执行时安装模块时，发现如下错误："><a href="#7、再次执行时安装模块时，发现如下错误：" class="headerlink" title="7、再次执行时安装模块时，发现如下错误："></a>7、再次执行时安装模块时，发现如下错误：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">D:\MinGW\bin\gcc.exe -mno-cygwin -mdll -O -Wall “-ID:\Program Files\Python27\inc</div><div class="line">lude” “-ID:\Program Files\Python27\include” “-ID:\Program Files\Python27\PC” -c</div><div class="line">../libdasm.c -o build\temp.win32-2.7\Release\..\libdasm.o</div><div class="line">cc1.exe: error:unrecognized command line option ‘-mno-cygwin’</div><div class="line">error: command ‘gcc’ failed with exit status 1</div></pre></td></tr></table></figure>
<p>原因是<code>gcc 4.6.x</code> 以后不再接受<code>-mno-cygwin</code>为了解决这个问题需要修改<code>&lt;python安装目录&gt;\distutils\cygwinccompiler.py</code>文件。找到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">self.set_executables(compiler=&amp;#039;gcc -mno-cygwin -O -Wall&amp;#039;,</div><div class="line">                            compiler_so=&amp;#039;gcc -mno-cygwin -mdll -O -Wall&amp;#039;,</div><div class="line">                            compiler_cxx=&amp;#039;g++ -mno-cygwin -O -Wall&amp;#039;,</div><div class="line">                            linker_exe=&amp;#039;gcc&amp;#039;,</div><div class="line">                            linker_so=&amp;#039;%s -mno-cygwin %s %s&amp;#039;</div><div class="line">                                       % (self.linker_dll, shared_option,</div><div class="line">                                          entry_point))</div></pre></td></tr></table></figure>
<p>   修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">self.set_executables(compiler=&amp;#039;gcc -O -Wall&amp;#039;,</div><div class="line">                            compiler_so=&amp;#039;gcc -mdll -O -Wall&amp;#039;,</div><div class="line">                            compiler_cxx=&amp;#039;g++ -mno-cygwin -O -Wall&amp;#039;,</div><div class="line">                            linker_exe=&amp;#039;gcc&amp;#039;,</div><div class="line">                            linker_so=&amp;#039;%s -mno-cygwin %s %s&amp;#039;</div><div class="line">                                       % (self.linker_dll, shared_option,</div><div class="line">                                          entry_point))</div></pre></td></tr></table></figure>
<p>   an</p>
<h2 id="No-module-named-Crypto-PublicKey"><a href="#No-module-named-Crypto-PublicKey" class="headerlink" title="No module named Crypto.PublicKey"></a>No module named Crypto.PublicKey</h2><p>明明安装了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pycrypto</div></pre></td></tr></table></figure></p>
<p>解决方法：<br>We should rename crypto directory under “Lib/site-packages” to Crypto<br>因为windows是不区分大小写的，但是py加载模块区分。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RAML初识]]></title>
      <url>/2016/04/05/HTTP/2016_04_05_raml%E5%88%9D%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="RAML"><a href="#RAML" class="headerlink" title="RAML"></a>RAML</h1><p>raml()<br><a href="https://www.mulesoft.com/platform/api/api-designer" target="_blank" rel="external">在线的API designer tool</a></p>
<h2 id="ENTER-THE-ROOT"><a href="#ENTER-THE-ROOT" class="headerlink" title="ENTER THE ROOT"></a>ENTER THE ROOT</h2><p>确定根的url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#%RAML 1.0</div><div class="line">  ---</div><div class="line">  title: e-BookMobile API</div><div class="line">  baseUri: http://api.e-bookmobile.com/&#123;version&#125;</div><div class="line">  version: v1</div></pre></td></tr></table></figure></p>
<h2 id="ENTER-RESOURCES"><a href="#ENTER-RESOURCES" class="headerlink" title="ENTER RESOURCES"></a>ENTER RESOURCES</h2><p>确定资源，资源一般都是一个名词<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/users:</div><div class="line">    /authors:</div><div class="line">    /books:</div></pre></td></tr></table></figure></p>
<h2 id="ENTER-METHODS"><a href="#ENTER-METHODS" class="headerlink" title="ENTER METHODS"></a>ENTER METHODS</h2><p>确定方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/books:</div><div class="line">      get:</div><div class="line">      post:</div><div class="line">      put:</div></pre></td></tr></table></figure></p>
<h2 id="ENTER-URI-PARAMETERS"><a href="#ENTER-URI-PARAMETERS" class="headerlink" title="ENTER URI PARAMETERS"></a>ENTER URI PARAMETERS</h2><p>确定URI的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/books:</div><div class="line">    get:</div><div class="line">    put:</div><div class="line">    post:</div><div class="line">    /&#123;bookTitle&#125;:</div><div class="line">      get:</div><div class="line">      put:</div><div class="line">      delete:</div><div class="line">      /author:</div><div class="line">        get:</div><div class="line">      /publisher:</div><div class="line">        get:</div></pre></td></tr></table></figure></p>
<h2 id="确定查询的参数"><a href="#确定查询的参数" class="headerlink" title="确定查询的参数"></a>确定查询的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/books:</div><div class="line">     /&#123;bookTitle&#125;</div><div class="line">       get:</div><div class="line">         queryParameters:</div><div class="line">           author:</div><div class="line">           publicationYear:</div><div class="line">           rating:</div><div class="line">           isbn:</div><div class="line">       put:</div><div class="line">         queryParameters:</div><div class="line">           access_token:</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/books:</div><div class="line">     /&#123;bookTitle&#125;</div><div class="line">       get:</div><div class="line">         queryParameters:</div><div class="line">           author:</div><div class="line">             displayName: Author</div><div class="line">             type: string</div><div class="line">             description: An author&apos;s full name</div><div class="line">             example: Mary Roach</div><div class="line">             required: false</div><div class="line">           publicationYear:</div><div class="line">             displayName: Pub Year</div><div class="line">             type: number</div><div class="line">             description: The year released for the first time in the US</div><div class="line">             example: 1984</div><div class="line">             required: false</div><div class="line">           rating:</div><div class="line">             displayName: Rating</div><div class="line">             type: number</div><div class="line">             description: Average rating (1-5) submitted by users</div><div class="line">             example: 3.14</div><div class="line">             required: false</div><div class="line">           isbn:</div><div class="line">             displayName: ISBN</div><div class="line">             type: string</div><div class="line">             minLength: 10</div><div class="line">             example: 0321736079?</div><div class="line">        put:</div><div class="line">          queryParameters:</div><div class="line">            access_token:</div><div class="line">              displayName: Access Token</div><div class="line">              type: string</div><div class="line">              description: Token giving you permission to make call</div><div class="line">              required: true</div></pre></td></tr></table></figure>
<h2 id="ENTER-RESPONSES"><a href="#ENTER-RESPONSES" class="headerlink" title="ENTER RESPONSES"></a>ENTER RESPONSES</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/books:</div><div class="line">     /&#123;bookTitle&#125;:</div><div class="line">       get:</div><div class="line">         description: Retrieve a specific book title</div><div class="line">         responses:</div><div class="line">           200:</div><div class="line">             body:</div><div class="line">               application/json:</div><div class="line">                example: |</div><div class="line">                   &#123;</div><div class="line">                     &quot;data&quot;: &#123;</div><div class="line">                       &quot;id&quot;: &quot;SbBGk&quot;,</div><div class="line">                       &quot;title&quot;: &quot;Stiff: The Curious Lives of Human Cadavers&quot;,</div><div class="line">                       &quot;description&quot;: null,</div><div class="line">                       &quot;datetime&quot;: 1341533193,</div><div class="line">                       &quot;genre&quot;: &quot;science&quot;,</div><div class="line">                       &quot;author&quot;: &quot;Mary Roach&quot;,</div><div class="line">                       &quot;link&quot;: &quot;http://e-bookmobile.com/books/Stiff&quot;,</div><div class="line">                     &#125;,</div><div class="line">                     &quot;success&quot;: true,</div><div class="line">                     &quot;status&quot;: 200</div><div class="line">                   &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> restful </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python面向对象--描述符和属性]]></title>
      <url>/2016/03/30/python/2016_03_30_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1--%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="python面向对象–描述符和属性"><a href="#python面向对象–描述符和属性" class="headerlink" title="python面向对象–描述符和属性"></a>python面向对象–描述符和属性</h1><h2 id="python中的私有属性"><a href="#python中的私有属性" class="headerlink" title="python中的私有属性"></a>python中的私有属性</h2><p>python中没有访问限制的描速符.通过<code>__</code>符号来实现</p>
<p>Ex:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class MyClass(object):</div><div class="line">    __secret_value = 1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [3]: m.__secret_value</div><div class="line">---------------------------------------------------------------------------</div><div class="line">AttributeError                            Traceback (most recent call last)</div><div class="line">&lt;ipython-input-3-3a26128381d5&gt; in &lt;module&gt;()</div><div class="line">----&gt; 1 m.__secret_value</div><div class="line"></div><div class="line">AttributeError: &apos;MyClass&apos; object has no attribute &apos;__secret_value&apos;</div></pre></td></tr></table></figure>
<p>查看属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [4]: dir(m)</div><div class="line">Out[4]:</div><div class="line">[&apos;_MyClass__secret_value&apos;,</div><div class="line"> &apos;__class__&apos;,</div></pre></td></tr></table></figure></p>
<p>其实也并不是真正意义上的私有属性.</p>
<h2 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h2><p>描述符用来自定义在引用一个对象上的特性时所应该完成的事情.<br>基于如下三个特殊的方法</p>
<ul>
<li><code>__set__</code> 在任何属性被设置时调用,setter;</li>
<li><code>__get__</code> 在任何属性被读取的时候被调用,getter;</li>
<li><code>__delete__</code><br>这些方法都在 <code>__dict__</code>之前被调用.</li>
</ul>
<p>其实就是通过一个类,对另外一个类的某个属性进行控制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class UpperString(object):</div><div class="line">	def __init__(self):</div><div class="line">		self._val = &quot;&quot;</div><div class="line">	def __get__(self, instance, klass):</div><div class="line">		return self._val</div><div class="line">	def __set__(self, instance, value):</div><div class="line">		self._val = value.upper()</div><div class="line"></div><div class="line">class MyClass(object):</div><div class="line">	attribute = UpperString()</div><div class="line"></div><div class="line">mc = MyClass()</div><div class="line">mc.attribute = &quot;my value&quot;</div><div class="line">print mc.attribute</div></pre></td></tr></table></figure>
<h2 id="自省描述符"><a href="#自省描述符" class="headerlink" title="自省描述符"></a>自省描述符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">API</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_print_values</span><span class="params">(self, obj)</span>:</span></div><div class="line">		<span class="function"><span class="keyword">def</span> <span class="title">_print_value</span><span class="params">(key)</span>:</span></div><div class="line">			<span class="keyword">if</span> key.startswith(<span class="string">'_'</span>):</div><div class="line">				<span class="keyword">return</span> <span class="string">''</span></div><div class="line">			value = getattr(obj, key)</div><div class="line">			<span class="keyword">if</span> <span class="keyword">not</span> hasattr(value, <span class="string">'im_func'</span>):</div><div class="line">				doc = type(value).__name__</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">if</span> value.__doc__ <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">					doc = <span class="string">'no docstring'</span></div><div class="line">				<span class="keyword">else</span>:</div><div class="line">					doc = value.__doc__</div><div class="line">			<span class="keyword">return</span> <span class="string">" %s : %s"</span> % (key, value)</div><div class="line">		res = [_print_value(el) <span class="keyword">for</span> el <span class="keyword">in</span> dir(obj)]</div><div class="line">		<span class="keyword">return</span> <span class="string">'\n'</span>.join([el <span class="keyword">for</span> el <span class="keyword">in</span> res <span class="keyword">if</span> el != <span class="string">""</span>])</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, klass)</span>:</span></div><div class="line">		<span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">			<span class="keyword">return</span> self._print_values(instance)</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">return</span> self._print_values(klass)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">	__doc__ = API()</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		self.a = <span class="number">2</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">meth</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="string">'''</span></div><div class="line">		my method</div><div class="line">		'''</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line"><span class="keyword">print</span> MyClass.__doc__</div><div class="line">instance = MyClass()</div><div class="line"><span class="keyword">print</span> <span class="string">"========"</span></div><div class="line"><span class="keyword">print</span> instance.__doc__</div></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">meth : &lt;unbound method MyClass.meth&gt;</div><div class="line">========</div><div class="line">a : 2</div><div class="line">meth : &lt;bound method MyClass.meth of &lt;__main__.MyClass object at 0x7fe3295bcad0&gt;&gt;</div></pre></td></tr></table></figure>
<h2 id="元描述符"><a href="#元描述符" class="headerlink" title="元描述符"></a>元描述符</h2><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性提供了一个内建的描述符类型,属性采用<code>fget</code>和3个可选的参数–<code>fset</code>, <code>fdel</code>和<code>doc</code></p>
<h2 id="槽"><a href="#槽" class="headerlink" title="槽"></a>槽</h2><p>这个概念很少遇到</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> oop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[with和contextlib]]></title>
      <url>/2016/03/28/python/2016_03_28_with%E5%92%8Ccontextlib/</url>
      <content type="html"><![CDATA[<h1 id="with和contgextlib"><a href="#with和contgextlib" class="headerlink" title="with和contgextlib"></a>with和contgextlib</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>即使运行失败也要退出,比如:</p>
<ul>
<li>关闭一个文件</li>
<li>释放一个锁</li>
<li>创建一个临时的代码补丁</li>
<li>在特殊环境中运行受保护的代码</li>
</ul>
<h2 id="with语句和上下文协议"><a href="#with语句和上下文协议" class="headerlink" title="with语句和上下文协议"></a>with语句和上下文协议</h2><p>最常用的是打开和关闭一个文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from __future__ import with_statement</div><div class="line"># 在2.5 以及2.5之前,需要这样引入</div><div class="line">with open(&apos;/etc/hosts&apos;) as fd:</div><div class="line">    for line in fd</div></pre></td></tr></table></figure>
<p>实现with的协议如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Context(object):</div><div class="line">	def __enter__(self):</div><div class="line">		print(&quot;entering the zone&quot;)</div><div class="line">	def __exit__(self, exception_type, exception_value,</div><div class="line">					exception_traceback):</div><div class="line">		print(&apos;leaving the zone&apos;)</div><div class="line">		if exception_type is None:</div><div class="line">			print(&apos;no error&apos;)</div><div class="line">		else:</div><div class="line">			print(&quot;with an error (%s)&quot; % exception_value)</div><div class="line"></div><div class="line">with Context():</div><div class="line">	print(&quot;i an the zone&quot;)</div></pre></td></tr></table></figure>
<p>output<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">entering the zone</div><div class="line">i an the zone</div><div class="line">leaving the zone</div><div class="line">no error</div><div class="line">[Finished in 0.1s]</div></pre></td></tr></table></figure></p>
<p>在py中,一个类实现两个方法 <code>__enter__</code>和<code>__exit__</code>,就实现了with协议,<code>thread</code>和<code>threading</code>模块的一些类也实现了这些方法<br>thread.LockType<br>threading.Lock<br>threading.RLock<br>threading.Condition<br>threading.Semaphore<br>threading.BoundedSemaphore</p>
<h2 id="contextlib模块"><a href="#contextlib模块" class="headerlink" title="contextlib模块"></a>contextlib模块</h2><p>给with提供了一个辅助类,包含了一yield分开的<code>__enter__</code>和<code>__exit__</code>,所以上面的离职可以写成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from contextlib import contextmanager</div><div class="line"># from __future__ import with_statement</div><div class="line"></div><div class="line">@contextmanager</div><div class="line">def context():</div><div class="line">	print(&quot;entering the zone&quot;)</div><div class="line">	try:</div><div class="line">		yield</div><div class="line">	except Exception, e:</div><div class="line">		print(&quot;with an error (%s) % e&quot;)</div><div class="line">		raise e</div><div class="line">	else:</div><div class="line">		print(&quot;with no error&quot;)</div><div class="line"></div><div class="line">with context():</div><div class="line">	print(&quot;starting&quot;)</div></pre></td></tr></table></figure></p>
<h2 id="上下文实例"><a href="#上下文实例" class="headerlink" title="上下文实例"></a>上下文实例</h2>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jenkins初识]]></title>
      <url>/2016/03/23/devops/2016_03_23_jenkins%E5%88%9D%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="Jenkins初识"><a href="#Jenkins初识" class="headerlink" title="Jenkins初识"></a>Jenkins初识</h1><h2 id="安装-ubuntu14-04"><a href="#安装-ubuntu14-04" class="headerlink" title="安装(ubuntu14.04)"></a>安装(ubuntu14.04)</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add</div><div class="line"></div><div class="line">sudo sh -c <span class="string">'echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list'</span>  </div><div class="line"></div><div class="line">sudo apt-get update -y  </div><div class="line">sudo apt-get install jenkins -y</div></pre></td></tr></table></figure>
<p>安装目录：/var/lib/jenkins<br>日志目录：/var/log/jenkins/jenkins.log  </p>
<p>3.启动/停止<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/jenkins start  </div><div class="line">sudo /etc/init.d/jenkins stop</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rabbitmq学习(2)--生产者和消费者]]></title>
      <url>/2016/03/13/tool/2016_03_13_rabbitmq%E5%AD%A6%E4%B9%A0(2)--%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85/</url>
      <content type="html"><![CDATA[<h1 id="rabbitmq生产者和消费者"><a href="#rabbitmq生产者和消费者" class="headerlink" title="rabbitmq生产者和消费者"></a>rabbitmq生产者和消费者</h1><p><code>send.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">import pika</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=&apos;localhost&apos;))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.queue_declare(queue=&apos;hello&apos;)</div><div class="line"></div><div class="line">channel.basic_publish(exchange=&apos;&apos;,</div><div class="line">                      routing_key=&apos;hello&apos;,</div><div class="line">                      body=&apos;Hello World!&apos;)</div><div class="line">print(&quot; [x] Sent &apos;Hello World!&apos;&quot;)</div><div class="line">connection.close()</div></pre></td></tr></table></figure>
<p><code>recive.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">import pika</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=&apos;localhost&apos;))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.queue_declare(queue=&apos;hello&apos;)</div><div class="line"></div><div class="line">def callback(ch, method, properties, body):</div><div class="line">    print(&quot; [x] Received %r&quot; % body)</div><div class="line"></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=&apos;hello&apos;,</div><div class="line">                      no_ack=True)</div><div class="line"></div><div class="line">print(&apos; [*] Waiting for messages. To exit press CTRL+C&apos;)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rabbitMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Celery分布式任务队列]]></title>
      <url>/2016/03/09/python/2016_03_09_celery%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="Celery分布式任务队列"><a href="#Celery分布式任务队列" class="headerlink" title="Celery分布式任务队列"></a>Celery分布式任务队列</h1><h2 id="Choosing-a-Broker"><a href="#Choosing-a-Broker" class="headerlink" title="Choosing a Broker"></a>Choosing a Broker</h2><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h3 id="Databbase-SQLAlchemy-Django-Database"><a href="#Databbase-SQLAlchemy-Django-Database" class="headerlink" title="Databbase(SQLAlchemy/Django Database)"></a>Databbase(<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/sqlalchemy.html#broker-sqlalchemy" target="_blank" rel="external">SQLAlchemy</a>/<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/django.html#broker-django" target="_blank" rel="external">Django Database</a>)</h3><h3 id="Create-app"><a href="#Create-app" class="headerlink" title="Create app"></a>Create app</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from celery import Celery</div><div class="line"></div><div class="line">app = Celery(&apos;tasks&apos;, broker=&apos;amqp://guest@localhost//&apos;)</div><div class="line"></div><div class="line">@app.task</div><div class="line">def add(x, y):</div><div class="line">    return x + y</div></pre></td></tr></table></figure>
<h3 id="Create-Celery-Server"><a href="#Create-Celery-Server" class="headerlink" title="Create Celery Server"></a>Create Celery Server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery -A tasks worker --loglevel=info</div></pre></td></tr></table></figure>
<h3 id="Call-APP"><a href="#Call-APP" class="headerlink" title="Call APP"></a>Call APP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from tasks import add</div><div class="line">&gt;&gt;&gt; add.delay(4, 4)</div></pre></td></tr></table></figure>
<h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><p>如果你想保存结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CELERY_RESULT_BACKEND = &apos;redis://localhost:6379/0&apos;</div></pre></td></tr></table></figure>
<h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>通过使用装饰器task(),就可以创建一个task了.</p>
<h3 id="names"><a href="#names" class="headerlink" title="names"></a>names</h3><p>一种好的实践模式是使用模块名字当作人物名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; @app.task(name=&apos;tasks.add&apos;)</div><div class="line">&gt;&gt;&gt; def add(x, y):</div><div class="line">...     return x + y</div></pre></td></tr></table></figure></p>
<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>request contains information and state related to the executing task.<br>request的<a href="!http://docs.celeryproject.org/en/latest/userguide/tasks.html#context">属性</a></p>
<h2 id="Custom-states"><a href="#Custom-states" class="headerlink" title="Custom states"></a>Custom states</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@app.task(bind=True)</div><div class="line">def upload_files(self, filenames):</div><div class="line">    for i, file in enumerate(filenames):</div><div class="line">        if not self.request.called_directly:</div><div class="line">            self.update_state(state=&apos;PROGRESS&apos;,</div><div class="line">                meta=&#123;&apos;current&apos;: i, &apos;total&apos;: len(filenames)&#125;)</div></pre></td></tr></table></figure>
<h2 id="Designing-Workflows"><a href="#Designing-Workflows" class="headerlink" title="Designing Workflows"></a>Designing Workflows</h2>]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> celery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RabbitMQ学习--基本概念(1)]]></title>
      <url>/2016/03/09/tool/2016_03_09_rabbitmq%E5%AD%A6%E4%B9%A0(1)--%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h1 id="RabbitMQ学习–基本概念"><a href="#RabbitMQ学习–基本概念" class="headerlink" title="RabbitMQ学习–基本概念"></a>RabbitMQ学习–基本概念</h1><h2 id="消息通信概念"><a href="#消息通信概念" class="headerlink" title="消息通信概念"></a>消息通信概念</h2><p>AMQP信道是基于TCP连接的虚拟连接,每个信道都有一个ID,发布消息,订阅队列,接受消息等AMQP命令都是通过信道发送出去的.</p>
<h2 id="AMQP元素"><a href="#AMQP元素" class="headerlink" title="AMQP元素"></a>AMQP元素</h2><p><img src="http://7xrn62.com1.z0.glb.clouddn.com/89a7568e480e0f6931c7db4dd51f4771.png" alt="AMQP栈"></p>
<h3 id="交换器"><a href="#交换器" class="headerlink" title="交换器"></a>交换器</h3><h4 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h4><p>如果路由键匹配的话,消息就被投递到对应的队列.有点类似单播.</p>
<h4 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h4><p>这个类似广播</p>
<h4 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h4><p>这个类似组播</p>
<h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2>]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rabbitMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RESTFul中的基本概念]]></title>
      <url>/2015/12/31/HTTP/2015_12_31_restful%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h1 id="RESRFul中的基本概念"><a href="#RESRFul中的基本概念" class="headerlink" title="RESRFul中的基本概念"></a>RESRFul中的基本概念</h1><h2 id="Resources-资源"><a href="#Resources-资源" class="headerlink" title="Resources 资源"></a>Resources 资源</h2><p>可以说这是RESTFul中最基本的概念了。</p>
<p>A resource is an object with a type, associated data, relationships to other resources, and a set of methods that operate on it. It is similar to an object instance in an object-oriented programming language, with the important difference that only a few standard methods are defined for the resource (corresponding to the standard HTTP GET, POST, PUT and DELETE methods), while an object instance typically has many methods.</p>
<p>资源是一个对象(拥有类型，相关联的数据，关系到其他资源，和一组在其上进行操作的方法)。<br>资源很类是与面向对象语言中的对象实例，但是资源只有几个方法可以使用。</p>
<h3 id="Resource-Data"><a href="#Resource-Data" class="headerlink" title="Resource Data"></a>Resource Data</h3><h4 id="Application-Data"><a href="#Application-Data" class="headerlink" title="Application Data"></a>Application Data</h4><h4 id="REST-Metadata"><a href="#REST-Metadata" class="headerlink" title="REST Metadata"></a>REST Metadata</h4><h4 id="Other-Data"><a href="#Other-Data" class="headerlink" title="Other Data"></a>Other Data</h4><h3 id="Representations-代表"><a href="#Representations-代表" class="headerlink" title="Representations 代表"></a>Representations 代表</h3><h3 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h3>]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> restful </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下搭建openvpn]]></title>
      <url>/2015/12/22/tool/2015_12_22_ubuntu%E4%B8%8B%E6%90%AD%E5%BB%BAopenvpn/</url>
      <content type="html"><![CDATA[<h1 id="ubuntu下搭建openvpn"><a href="#ubuntu下搭建openvpn" class="headerlink" title="ubuntu下搭建openvpn"></a>ubuntu下搭建openvpn</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get -y install openvpn easy-rsa dnsmasqS</div></pre></td></tr></table></figure>
<h2 id="生成证书和私钥"><a href="#生成证书和私钥" class="headerlink" title="生成证书和私钥"></a>生成证书和私钥</h2>]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[前端代码-yeoman-bower-gulp]]></title>
      <url>/2015/12/15/front-end/2015_12_15_%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81-yeoman-bower-gulp/</url>
      <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>codekit<br>fis</p>
<p>grunt Build tool构建工具<br>类似的有ant gmake等</p>
<h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><p>grunt依赖NodeJS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-cli</div></pre></td></tr></table></figure>
<p><code>package.json</code>中的<code>~</code>和<code>^</code>，版本更新的控制</p>
<h2 id="yo"><a href="#yo" class="headerlink" title="yo"></a>yo</h2><ul>
<li>使用yeoman来生成项目的文件，代码结构。</li>
<li>yeoman自动将最佳实践和工具整合进来，大大加速和方便</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g yo</div></pre></td></tr></table></figure>
<p>依赖<code>Node.js</code></p>
<h3 id="安装模板生成器"><a href="#安装模板生成器" class="headerlink" title="安装模板生成器"></a>安装模板生成器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g generator-webapp</div><div class="line">or</div><div class="line">npm install -g generator-angular</div></pre></td></tr></table></figure>
<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yo angular</div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yo angular --coffee</div></pre></td></tr></table></figure>
<p><strong>在Angular中</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ yo angular:controller myController</div><div class="line">$ yo angular:directive myDirective</div><div class="line">$ yo angular:filter myFilter</div><div class="line">$ yo angular:service myService</div></pre></td></tr></table></figure>
<p><strong>查看已经安装的模板生成器</strong></p>
<p>npm ls -g  –depth=1 2&gt;/dev/null | grep generator-</p>
<h2 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g bower</div><div class="line">bower install</div><div class="line">bower install xxx --save</div></pre></td></tr></table></figure>
<h3 id="bower安装github上的应用"><a href="#bower安装github上的应用" class="headerlink" title="bower安装github上的应用"></a>bower安装github上的应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bower install jquery/jquery</div><div class="line">bower install https://xxx.xx.git</div></pre></td></tr></table></figure>
<h3 id="通过url安装"><a href="#通过url安装" class="headerlink" title="通过url安装"></a>通过url安装</h3><p>直接bower install 地址</p>
<h3 id="bower的两个配置文件"><a href="#bower的两个配置文件" class="headerlink" title="bower的两个配置文件"></a>bower的两个配置文件</h3><p>bower.json</p>
<p>bowerrc</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"directory"</span>: <span class="string">"bower_components"</span>,</div><div class="line">    <span class="attr">"proxy"</span>: <span class="string">"http://.com"</span>,</div><div class="line">    <span class="attr">"https-proxy"</span>: <span class="string">"https://..."</span>,</div><div class="line">    <span class="attr">"timeout"</span>: <span class="number">6666</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="grunt"><a href="#grunt" class="headerlink" title="grunt"></a>grunt</h2><p>Build tool</p>
<p>3个 概念  Task Options Target</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-cli</div></pre></td></tr></table></figure>
<h2 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h2><p><a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">中文官方API</a></p>
<p>启用一个默认的任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&quot;gulp&quot;)</div><div class="line"></div><div class="line">gulp.task(&apos;default&apos;, function() &#123;</div><div class="line">	console.log(&quot;I have configured a gulpfile&quot;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>相对于gulp,webpack更加高级,关注的是web发布的逻辑构建,二gulp(grunt)是从底层构建</p>
<p>webpack的配置文件.webpack.config.js<br>入口文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">entry: [</div><div class="line">    &apos;webpack/hot/only-dev-server&apos;,</div><div class="line">    &apos;./src/components/GalleryByReactApp.js&apos;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>出口文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    filename: &apos;main.js&apos;</div><div class="line">    publicPath: &apos;/assets/&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>resolve</code>: 模块解析配置项<br><code>alias</code>的好处是:<br>require(“…/src/style/main.css”)可以简写成<br>require(“styles/main.css”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;],</div><div class="line">    alias: &#123;</div><div class="line">        &apos;styles&apos;: __dirname + &apos;/src/styles&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>webpack的loader机制, <code>loaders</code></p>
<p><img src="http://7xrn62.com1.z0.glb.clouddn.com/9c2763e916bdcdf0174a5f511b6829d8.png" alt="webpack的loaders"></p>
<p>autoprefixerloader解决不同浏览器兼容CSS的问题.</p>
]]></content>
      
        <categories>
            
            <category> Front-End </category>
            
        </categories>
        
        
        <tags>
            
            <tag> yeoman </tag>
            
            <tag> bower </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[装饰器]]></title>
      <url>/2015/12/14/python/2015_12_14_%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>装饰器是在python2.4之后新加入的.</p>
<p>如果没有装饰器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhatFor</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">it</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'work with %s'</span> % cls</div><div class="line">    it = classmethod(it)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uncommon</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'I could be a global function'</span></div><div class="line"></div><div class="line"></div><div class="line">WhatFor.it()</div><div class="line"><span class="comment"># WhatFor.uncommon()</span></div></pre></td></tr></table></figure></p>
<h2 id="自定义的装饰器"><a href="#自定义的装饰器" class="headerlink" title="自定义的装饰器"></a>自定义的装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydecorator</span><span class="params">(function)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_mydecorator</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> function(*args, **kw)</div><div class="line">    <span class="keyword">return</span> _mydecorator</div></pre></td></tr></table></figure>
<p>测试代码运行时间的装饰器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydecorator</span><span class="params">(function)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_mydecorator</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        start = time.time()</div><div class="line">        res = function(*args, **kw)</div><div class="line">        <span class="keyword">print</span> time.time() - start</div><div class="line">        <span class="keyword">return</span> res</div><div class="line">    <span class="keyword">return</span> _mydecorator</div><div class="line"></div><div class="line"><span class="comment"># foo = mydecorator(foo)</span></div><div class="line"><span class="meta">@mydecorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="number">2</span>**<span class="number">128</span></div><div class="line"></div><div class="line">foo()</div></pre></td></tr></table></figure>
<h2 id="如何去掉装饰器的效果"><a href="#如何去掉装饰器的效果" class="headerlink" title="如何去掉装饰器的效果"></a>如何去掉装饰器的效果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydecorator</span><span class="params">(function)</span>:</span></div><div class="line"><span class="meta">    @wraps(function)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_mydecorator</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        start = time.time()</div><div class="line">        res = function(*args, **kw)</div><div class="line">        print(time.time() - start)</div><div class="line">        <span class="keyword">return</span> res</div><div class="line">    <span class="keyword">return</span> _mydecorator</div><div class="line"></div><div class="line"><span class="comment"># foo = mydecorator(foo)</span></div><div class="line"><span class="meta">@mydecorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="number">2</span>**<span class="number">128</span>)</div><div class="line"></div><div class="line">foo()</div><div class="line"></div><div class="line">orig_foo = foo.__wrapped__</div><div class="line">orig_foo()</div></pre></td></tr></table></figure>
<p>上面这个貌似在py3.x才生效</p>
<h2 id="让装饰器带上参数"><a href="#让装饰器带上参数" class="headerlink" title="让装饰器带上参数"></a>让装饰器带上参数</h2><p>装饰器带上参数,需要在多加一层包裹的函数.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding: utf-8</div><div class="line"></div><div class="line">def mydecorator(arg1, arg2):</div><div class="line">	def _mydecorator(function):</div><div class="line">		def __mydecorator(*args, **kw):</div><div class="line">			# you can check the args before the function</div><div class="line">			res = function(*args, **kw)</div><div class="line">		return __mydecorator</div><div class="line">	return _mydecorator</div></pre></td></tr></table></figure></p>
<h2 id="装饰器的应用场景"><a href="#装饰器的应用场景" class="headerlink" title="装饰器的应用场景"></a>装饰器的应用场景</h2><h3 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h3><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>关于与内部状态而不影响输出的函数,这种编程风格是函数型编程的重要特性.<br>缓存装饰器可以讲输出与计算它所需要的参数放在一起.也称为自动缓存,这个在递归的时候,很常用.有的也成为自动缓存或者是动态编程等.</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><h3 id="上下文提供者"><a href="#上下文提供者" class="headerlink" title="上下文提供者"></a>上下文提供者</h3>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[迭代器和生成器]]></title>
      <url>/2015/12/03/python/2015_12_03_%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h1><h2 id="最简单实现的一个迭代器"><a href="#最简单实现的一个迭代器" class="headerlink" title="最简单实现的一个迭代器."></a>最简单实现的一个迭代器.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line">items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">it = iter(items)</div><div class="line"></div><div class="line"><span class="keyword">print</span> next(it)</div><div class="line"><span class="keyword">print</span> next(it)</div><div class="line"><span class="keyword">print</span> next(it)</div><div class="line"><span class="keyword">print</span> next(it)</div></pre></td></tr></table></figure>
<p>output<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">python iter_and_generate.py</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"iter_and_generate.py"</span>, line 10, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="built_in">print</span> next(it)</div><div class="line">StopIteration</div></pre></td></tr></table></figure></p>
<h2 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h2><p><strong>只需要一个具有<code>next</code>方法的类,只要能够提供返回迭代器实例的<code>__iter__</code>特殊方法</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, step)</span>:</span></div><div class="line">        self.step = step</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.step == <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> StopIteration</div><div class="line">        self.step -= <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> self.step</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line"><span class="keyword">for</span> el <span class="keyword">in</span> MyIterator(<span class="number">4</span>):</div><div class="line">    <span class="keyword">print</span> el</div></pre></td></tr></table></figure>
<h2 id="itertools模块中好玩的迭代器"><a href="#itertools模块中好玩的迭代器" class="headerlink" title="itertools模块中好玩的迭代器"></a>itertools模块中好玩的迭代器</h2><h3 id="islice-窗口迭代器"><a href="#islice-窗口迭代器" class="headerlink" title="islice:窗口迭代器"></a>islice:窗口迭代器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">starting_at_five</span><span class="params">()</span>:</span></div><div class="line">    value = raw_input().strip()</div><div class="line">    <span class="keyword">while</span> value != <span class="string">''</span>:</div><div class="line">        <span class="keyword">for</span> el <span class="keyword">in</span> itertools.islice(value.split(), <span class="number">4</span>, <span class="keyword">None</span>):</div><div class="line">            <span class="keyword">yield</span> el</div><div class="line">        value = raw_input().strip()</div></pre></td></tr></table></figure>
<h3 id="tee-往返式的迭代器"><a href="#tee-往返式的迭代器" class="headerlink" title="tee:往返式的迭代器"></a>tee:往返式的迭代器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_head</span><span class="params">(iterable, headsize=<span class="number">1</span>)</span>:</span></div><div class="line">    a, b = itertools.tee(iterable)</div><div class="line">    <span class="keyword">return</span> list(itertools.islice(a, headsize)), b</div></pre></td></tr></table></figure>
<h3 id="groupby-uniq迭代器"><a href="#groupby-uniq迭代器" class="headerlink" title="groupby:uniq迭代器"></a>groupby:uniq迭代器</h3><p>使用行程长度编码(RLF)来压缩数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(data)</span>:</span></div><div class="line">    reutrn ((len(list(group)), name) \</div><div class="line">        <span class="keyword">for</span> name, group <span class="keyword">in</span> groupby(data)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decompress</span><span class="params">(data)</span>:</span></div><div class="line">    <span class="keyword">return</span> (car * size <span class="keyword">for</span> size, car <span class="keyword">in</span> data)</div></pre></td></tr></table></figure></p>
<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>使得函数需要返回一系列元素的函数变得更加简单,高效.</p>
<p>Ex</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">()</span>:</span></div><div class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a+b</div><div class="line"></div><div class="line">fib = fibonacci()</div><div class="line"><span class="comment"># print fib.next()</span></div><div class="line"><span class="keyword">print</span> [fib.next() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</div></pre></td></tr></table></figure>
<p>在处理大的文件的时候，这种方式比较节省内存</p>
<h3 id="关于yield-以及yeild更多姿势"><a href="#关于yield-以及yeild更多姿势" class="headerlink" title="关于yield,以及yeild更多姿势"></a>关于yield,以及yeild更多姿势</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">psychologist</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"请告诉我你的问题？"</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        answer = (<span class="keyword">yield</span>)</div><div class="line">        <span class="keyword">if</span> answer <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">if</span> answer.endswith(<span class="string">'?'</span>):</div><div class="line">                print(<span class="string">"不要想太多问题"</span>)</div><div class="line">            <span class="keyword">elif</span> <span class="string">"good"</span> <span class="keyword">in</span> answer:</div><div class="line">                print(<span class="string">"A that\'s good, go on"</span>)</div><div class="line">            <span class="keyword">elif</span> <span class="string">'bad'</span> <span class="keyword">in</span> answer:</div><div class="line">                print(<span class="string">"Don'\t be so negative"</span>)</div><div class="line"></div><div class="line">free = psychologist()</div><div class="line">free.next()</div><div class="line">free.next()</div><div class="line">free.next()</div><div class="line">free.send(<span class="string">"why I show?"</span>)</div><div class="line">free.send(<span class="string">"good"</span>)</div><div class="line">free.send(<span class="string">"bad"</span>)</div></pre></td></tr></table></figure>
<p><code>send()</code>的工作机制和<code>next（）</code>一样。但是yield将变成能够返回传入的值。</p>
<p>在python3.x中，yield有更多的用法。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[python面向对象--继承]]></title>
      <url>/2015/12/03/python/2015_12_03_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1--%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<h1 id="python面向对象–继承-MRO"><a href="#python面向对象–继承-MRO" class="headerlink" title="python面向对象–继承(MRO)"></a>python面向对象–继承(MRO)</h1><p>最近觉得py的基础还是有必要再看一下的。</p>
<h2 id="python的多继承的属性继承搜索"><a href="#python的多继承的属性继承搜索" class="headerlink" title="python的多继承的属性继承搜索"></a>python的多继承的属性继承搜索</h2><p>Python在处理多继承时同名函数，如果处理呢？</p>
<p>Ex</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/ben/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="comment"># __metaclass__ = type</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"A-foo"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"A-bar"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"B-foo"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"B-bar"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"AA-bar"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span><span class="params">(B)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"BB-bar"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(AA, BB)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">c = C()</div><div class="line">c.foo()</div><div class="line">c.bar()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">P1</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"p1-foo"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">P2</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"p2-foo"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"p2-bar"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span><span class="params">(P1, P2)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span><span class="params">(P1, P2)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"C2-bar"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(C1, C2)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> D.__mro__</div><div class="line">d = D();</div><div class="line">d.foo()</div><div class="line">d.bar()</div><div class="line"></div><div class="line">cc = CC()</div><div class="line">cc.show()</div></pre></td></tr></table></figure>
<p>在经典类中输出如下:output</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A-foo</div><div class="line">AA-bar</div><div class="line">p1-foo</div><div class="line">p2-bar</div></pre></td></tr></table></figure>
<p>在新类中输出如下:output</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A-foo</div><div class="line">AA-bar</div><div class="line">p1-foo</div><div class="line">C2-bar</div></pre></td></tr></table></figure>
<p>很明显的是,在老式的py类(py2.3以前的版本或者在py2.3+之后的版本中没有显示声明)中,依据的是<code>从左到右,深度优先</code>的规则.然而在新式类中,采用的是另外一套规则.所以在代码中混合新式类和旧式类,在MRO中会有不用的表现</p>
<p><img src="http://7xrn62.com1.z0.glb.clouddn.com/ca07fd0c356a5e1c9bcedad6536d44c2.png" alt="类继承"></p>
<p>使用类的<code>__mro__</code>属性可以得到一个可读的查找顺序表</p>
<p>mro即method resolution order，主要用于在多继承时判断调的属性的路径(来自于哪个类)。python在2.3中使用的是C3算法.</p>
<p>python 需要对其进行线性化(C3 Linearization),将继承图关系线性化。通过线性化，再依次查找类方法，直至找到该方法为止。线性化算法是python多继承的核心部分。线性化过程中，必须满足两个性质:</p>
<ul>
<li><p>单调性</p>
</li>
<li><p>一致性<br>直接父类的顺序通过用户来声明，父类线性化的顺序为从左到右。在进行线性化归并过程中，一致性主要保证类的局部优先级顺序，它定义了两个变量:</p>
</li>
</ul>
<h2 id="python多重继承"><a href="#python多重继承" class="headerlink" title="python多重继承"></a>python多重继承</h2><p>python在多重继承中的问题?<br>来看&lt;<python基础编>&gt;中的栗子</python基础编></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/ben/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="comment"># __metaclass__ = type</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brid</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.hungry = <span class="keyword">True</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.hungry:</div><div class="line">            <span class="keyword">print</span> <span class="string">"Aaaah..."</span></div><div class="line">            self.hungry = <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'No, thanks'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBrid</span><span class="params">(Brid)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.sound = <span class="string">'Squawk'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.sound</div><div class="line"></div><div class="line">sb = SongBrid()</div><div class="line">sb.sing()</div><div class="line">sb.eat()</div></pre></td></tr></table></figure>
<p>结果报错,输出如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Squawk</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"inherit_2.py"</span>, line 25, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    sb.eat()</div><div class="line">  File <span class="string">"inherit_2.py"</span>, line 10, <span class="keyword">in</span> eat</div><div class="line">    <span class="keyword">if</span> self.hungry:</div><div class="line">AttributeError: SongBrid instance has no attribute <span class="string">'hungry'</span></div></pre></td></tr></table></figure>
<p>why?</p>
<p>因为在SongBrid中,构造方法被重写.所以找不到属性了</p>
<p>解决方法:</p>
<ul>
<li>1:调用未绑定的超类构造方法.</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SongBrid</span><span class="params">(Brid)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        Brid.__init__(self)</div><div class="line">        self.sound = <span class="string">'Squawk'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.sound</div></pre></td></tr></table></figure>
<ul>
<li>2:使用super函数(新式类才可以这么做)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lass SongBrid(Brid):</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(SongBrid, self).__init__()</div><div class="line">        self.sound = <span class="string">'Squawk'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.sound</div></pre></td></tr></table></figure>
<h2 id="super-类还是方法"><a href="#super-类还是方法" class="headerlink" title="super()类还是方法?"></a>super()类还是方法?</h2><p>打印了以下<code>super()</code>的类型,发现类型是<type></type></p>
<h2 id="Super的缺陷"><a href="#Super的缺陷" class="headerlink" title="Super的缺陷"></a>Super的缺陷</h2><p>基类中的<code>__init__</code>不会被显示调用,所以需要开发人员调用.</p>
<h3 id="混用super和传统调用"><a href="#混用super和传统调用" class="headerlink" title="混用super和传统调用"></a>混用super和传统调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding:utf-8</div><div class="line"></div><div class="line">class A(object):</div><div class="line">	def __init__(self):</div><div class="line">		print &quot;A&quot;</div><div class="line">		super(A, self).__init__()</div><div class="line"></div><div class="line">class B(object):</div><div class="line">	def __init__(self):</div><div class="line">		print &quot;B&quot;</div><div class="line">		super(B, self).__init__()</div><div class="line"></div><div class="line">class C(A, B):</div><div class="line">	def __init__(self):</div><div class="line">		print &quot;C&quot;</div><div class="line">		A.__init__(self)      # 传统调用</div><div class="line">		B.__init__(self)</div><div class="line"></div><div class="line">print &quot;MRO:&quot;, [x.__name__ for x in C.__mro__]</div><div class="line">C()</div></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MRO: [&apos;C&apos;, &apos;A&apos;, &apos;B&apos;, &apos;object&apos;]</div><div class="line">C</div><div class="line">A</div><div class="line">B</div><div class="line">B</div></pre></td></tr></table></figure>
<p>可以看到,当C实例调用<code>A.__init__(self)</code>,因为super(A, self).<strong>init</strong>()将调用B的构造程序.</p>
<h3 id="不同类型的参数"><a href="#不同类型的参数" class="headerlink" title="不同类型的参数"></a>不同类型的参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class BaseBase(object):</div><div class="line">	def __init__(self):</div><div class="line">		print &quot;basebase&quot;</div><div class="line">		super(BaseBase, self).__init__()</div><div class="line"></div><div class="line">class Base1(BaseBase):</div><div class="line">	def __init__(self):</div><div class="line">		print &quot;base1&quot;</div><div class="line">		super(Base1, self).__init__()</div><div class="line"></div><div class="line">class Base2(BaseBase):</div><div class="line">	def __init__(self, arg):</div><div class="line">		print &apos;base2&apos;</div><div class="line">		super(Base2, self).__init__(arg)</div><div class="line"></div><div class="line">class MyClass(Base1, Base2):</div><div class="line">	def __init__(self):</div><div class="line">		print &quot;my base&quot;</div><div class="line">		super(MyClass, self).__init__()</div><div class="line"></div><div class="line">m = MyClass(10)</div></pre></td></tr></table></figure>
<p>一种解决方式,就是给所有的<strong>init</strong>(self), 替换成<strong>init</strong>(self, <em>args, *</em>kw)</p>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li>减少使用多继承</li>
<li>super不能混用</li>
<li>检查MRO</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> mro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用virtualenv来管理python运行环境]]></title>
      <url>/2015/11/19/python/2015_11_19_%E5%88%A9%E7%94%A8virtualenv%E6%9D%A5%E7%AE%A1%E7%90%86python%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>virtualenv的安装和运行都很简单，因为之前一直使用的pyenv，所以<br>这个工具都没怎么用过，只是记录一下命令</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">virtualenv ENV</div><div class="line"><span class="built_in">source</span> bin/activate</div><div class="line"></div><div class="line"></div><div class="line">$ deactivate</div></pre></td></tr></table></figure>
<p>使用的方法非常简单</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在RESTFul中基于Token的认证]]></title>
      <url>/2015/11/19/HTTP/2015_11_19_%E5%9C%A8restful%E4%B8%AD%E5%9F%BA%E4%BA%8Etoken%E7%9A%84%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<h1 id="在RESTFul中使用Token来进行身份认证"><a href="#在RESTFul中使用Token来进行身份认证" class="headerlink" title="在RESTFul中使用Token来进行身份认证"></a>在RESTFul中使用Token来进行身份认证</h1><p>用户只登录一次<br>下次访问的时候使用cookie而不是username或者是密码</p>
<p>失效</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -c c.txt \</div><div class="line">    http://localhost:8080/api/v1/login \</div><div class="line">    -u user1:pass1</div><div class="line"></div><div class="line">curl -b c.txt \</div><div class="line">    --data <span class="string">'&#123;titl...&#125;'</span> \</div><div class="line">    http://localhost:8080/api/v1/poems</div></pre></td></tr></table></figure>
<p>logging in</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def GET(self):</div><div class="line">    user = require_authenticated_user(</div><div class="line">        self.db)</div><div class="line">    token = generate_token()</div><div class="line">    self.db.tokens[tooken] = &#123;&quot;user&quot;: user&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> restful </tag>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pelican和Github建博客]]></title>
      <url>/2015/11/19/MISC/2015_11_19_pelican%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h1 id="使用Pelican和Github来搭建博客系统"><a href="#使用Pelican和Github来搭建博客系统" class="headerlink" title="使用Pelican和Github来搭建博客系统"></a>使用Pelican和Github来搭建博客系统</h1><h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h2><p>之前所有的东西都记录在了印象笔记上，可以没有免费的markdown的插件，印象笔记对于记录一些东西来说还不错,不过对于写些东西,感觉还需要一些额外的东西.<br>后来发现这套解决方案还是不错滴！用atom来编辑，下载一些能够预览markdown的插件效果还是蛮不错滴，同步在github上，在哪都可以编辑修改。</p>
<h2 id="关于github-Page"><a href="#关于github-Page" class="headerlink" title="关于github Page"></a>关于github Page</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">github Page官方地址</a></p>
<h2 id="关于Pelican"><a href="#关于Pelican" class="headerlink" title="关于Pelican"></a>关于Pelican</h2><p>具体请见<a href="http://docs.getpelican.com/en/3.6.3/" target="_blank" rel="external">Pelican文档</a></p>
<h2 id="Pelican的主题"><a href="#Pelican的主题" class="headerlink" title="Pelican的主题"></a>Pelican的主题</h2><p>可以很方便的更换主题，只需在配置文件里面简单的修改就好了</p>
<h2 id="Pelican的插件"><a href="#Pelican的插件" class="headerlink" title="Pelican的插件"></a>Pelican的插件</h2><p>Pelican的插件有很多</p>
<h3 id="LaTex支持"><a href="#LaTex支持" class="headerlink" title="LaTex支持"></a>LaTex支持</h3><p>LaTex主要是比较方便的来写数学公式<br>首先是配置上, 需要加上render_math的插件：<br>其实用的就是<code>MathJax.js</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PLUGIN_PATHS = [<span class="string">'pelican-plugins'</span>]</div><div class="line">PLUGINS = [<span class="string">'render_math'</span>, <span class="string">'sitemap'</span>, <span class="string">'autopages'</span>, <span class="string">'subcategory'</span> ]</div></pre></td></tr></table></figure>
<p>接下来比较重要的,也就是比较核心的操作就是,在主题<code>templates/bash.html</code>下的head标签之前加上</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-mathjax-config"</span>&gt;</span><span class="undefined"></span></div><div class="line">    MathJax.Hub.Config(&#123;</div><div class="line">    "HTML-CSS": &#123;</div><div class="line">        styles: &#123;</div><div class="line">            ".MathJax .mo, .MathJax .mi": &#123;color: "black ! important"&#125;&#125;</div><div class="line">        &#125;,</div><div class="line">        tex2jax: &#123;inlineMath: [['$','$'], ['\\(','\\)']],processEscapes: true&#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<p>$$E=mc^2$$</p>
<p>Latex数学符号清参见<a href="http://web.ift.uib.no/Teori/KURS/WRK/TeX/symALL.html" target="_blank" rel="external">Latex数学公式</a></p>
<h3 id="评论的支持"><a href="#评论的支持" class="headerlink" title="评论的支持"></a>评论的支持</h3><p>静态博客要支持评论,可以使用<a href="https://disqus.com" target="_blank" rel="external">disqus</a>.<br>第一步,你只需要注册一个disqus帐.<br>第二部,需要设置<code>DISQUS_SITENAME</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SITEURL = &apos;http://fsxchen.github.io&apos;</div><div class="line"></div><div class="line">DISQUS_SITENAME = u&quot;coucou-blog&quot;</div><div class="line">RELATIVE_URLS = False</div></pre></td></tr></table></figure></p>
<p>搞定</p>
<h2 id="使用Atom编辑博客"><a href="#使用Atom编辑博客" class="headerlink" title="使用Atom编辑博客"></a>使用Atom编辑博客</h2><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>写博客,必须能上传图片嘛,图片得在atom这个编辑器上下功夫,原先的模块,用的是以下模块:<br><code>markclip</code> <code>qiniu-puloader</code> <code>markdown-assistant</code>,本来后面两个应该是可以的,但是在我的大Ubuntu下就是无法使用.所有在github上找了不少,后来把这三个的代码相互改了改,就可以用了,具体办法就是在<code>markclip</code>的配置中,增加一个七牛的配置.</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>用下面的这个函数，一条命令就搞定了。当然需要fabirc以及<code>fabfile.py</code><br>只需要执行<code>fab public</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># @hosts(production)</div><div class="line">def publish():</div><div class="line">    &quot;&quot;&quot;Publish to production via rsync&quot;&quot;&quot;</div><div class="line">    local(&apos;git add .&apos;)</div><div class="line">    local(&apos;git commit)</div><div class="line">    local(&apos;git push -f origin master&apos;)</div></pre></td></tr></table></figure>
<p>自动同步<code>output</code>下的到<code>gh-pages</code>,可以编辑<code>.git/pooks/post-commit:</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod a+x post-commit</div><div class="line">pelican content -o output <span class="_">-s</span> pelicanconf.py &amp;&amp; ghp-import output &amp;&amp; git push <span class="_">-f</span> origin gh-pages:master</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Pelican </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[决策树]]></title>
      <url>/2014/11/19/machinelearning/2014-12-09-%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><h2 id="决策数的构造"><a href="#决策数的构造" class="headerlink" title="决策数的构造"></a>决策数的构造</h2><h3 id="熵和信息增益"><a href="#熵和信息增益" class="headerlink" title="熵和信息增益"></a>熵和信息增益</h3><p>​        划分数据集的大原则是：将无序的数据变得更加有序。划分数据的方式有很多种，但是每种都有相应的优缺点。组织杂乱无章数据的一种方式就是使用信息论度量信息。在划分数据集之前之后信息发生的变化称为<strong>信息增益</strong>.<br>集合信息的度量方式称为香农熵或者简称熵<br>如果待分类的事物可能划分在多个分类之中，则符号<br>$$<br>x_{i}<br>$$<br>的信息定义为</p>
<p>$$<br>l(x<em>{i})=-\log</em>{2}p(x_{i})<br>$$</p>
<p>其中$$p(x_{i})$$是选择该分类的概率<br>为了计算熵，我们需要计算所有类别所有可能包含值的信息期望值</p>
<p>$$<br>H=-\sum<em>{i=1}^{n}p(x</em>{i})log<em>{2}p(x</em>{i})<br>$$</p>
<p>Eg：计算熵<br><img src="/2014/11/19/machinelearning/2014-12-09-决策树/68b64b56389482cd68c139d2fee78897.png" alt=""></p>
<p>下面用代码来实现计算数据集合的香农熵</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcShannonEnt</span><span class="params">(dataSet)</span>:</span></div><div class="line">    numEntries = len(dataSet)</div><div class="line">    lableCounts = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> featVec <span class="keyword">in</span> dataSet:</div><div class="line">        currentLable = featVec[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">if</span> currentLable <span class="keyword">not</span> <span class="keyword">in</span> lableCounts.keys():</div><div class="line">            lableCounts[currentLable] = <span class="number">0</span></div><div class="line">        lableCounts[currentLable] += <span class="number">1</span></div><div class="line"></div><div class="line">    shannonENt = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> lableCounts:</div><div class="line">        prob = float(lableCounts[key])/ numEntries</div><div class="line">        shannonENt = -= prob * log(prob, <span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> shannonENt</div></pre></td></tr></table></figure>
<p><img src="/2014/11/19/machinelearning/2014-12-09-决策树/1f8f79605d845169ea08d2090efbecad.png" alt="信息增益"></p>
<p>熵的计算<br><img src="/2014/11/19/machinelearning/2014-12-09-决策树/c1860ef516bc123d8d80719c961c376a.png" alt="熵计算"></p>
<p>计算信息增益<br><img src="/2014/11/19/machinelearning/2014-12-09-决策树/c8d8c4c0a44f0a7e19d9de1fdcae0101.png" alt="信息增益"></p>
<p>如图所示：计算关于速度的信息增益，因为如果以速度划分，熵为0，由于父数据集的熵为1，所以信息增益为1.这个是一个最好的信息增益，所以应该从这里划分数据集。</p>
<p><img src="/2014/11/19/machinelearning/2014-12-09-决策树/a5e03fe04ec3b27d730c916f37d4c78f.png" alt=""></p>
<p>在ipython里面找一个集合测试一下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [1]: import trees</div><div class="line"></div><div class="line">In [2]: myDat, lables = trees.createDataSet()</div><div class="line"></div><div class="line">In [3]: myDat</div><div class="line">Out[3]: [[1, 1, <span class="string">'yes'</span>], [1, 1, <span class="string">'yes'</span>], [1, 0, <span class="string">'no'</span>], [0, 1, <span class="string">'no'</span>], [0, 1, <span class="string">'no'</span>]]</div><div class="line"></div><div class="line">In [4]: lables</div><div class="line">Out[4]: [<span class="string">'no surfacing'</span>, <span class="string">'flippers'</span>]</div><div class="line"></div><div class="line">In [5]: trees.calcShannonEnt(myDat)</div><div class="line">Out[5]: 0.9709505944546686</div></pre></td></tr></table></figure>
<p>香农熵的计算还是比较简单的，但是使用比较复杂</p>
<h3 id="划分数据集"><a href="#划分数据集" class="headerlink" title="划分数据集"></a>划分数据集</h3><p>在前面介绍了如何度量集合的无序程度，这里还需要来划分数据集，然后来度量数据集的熵，来看是否正确的划分了数据集。<br>下面的代码实现了集合的划分</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">splitDataSet</span><span class="params">(dataSet, axis, value)</span>:</span></div><div class="line">    retDataSet = []</div><div class="line">    <span class="keyword">for</span> featVec <span class="keyword">in</span> dataSet:</div><div class="line">        <span class="keyword">if</span> featVec[axis] == value:</div><div class="line">            reducedFeatVec = featVec[:axis]</div><div class="line">            reducedFeatVec.extend(featVec[axis+<span class="number">1</span>:])</div><div class="line">            retDataSet.append(reducedFeatVec)</div><div class="line">    <span class="keyword">return</span> retDataSet</div></pre></td></tr></table></figure>
<p>来看一下splitDataSet(dataSet, axis, value)这个函数，需要3个参数：待划分的数据集、划分数据集的特征、需要返回的特征值。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [1]: import trees</div><div class="line"></div><div class="line">In [2]: myDat, labels = trees.createDataSet()</div><div class="line"></div><div class="line">In [3]: myDat</div><div class="line">Out[3]: [[1, 1, <span class="string">'yes'</span>], [1, 1, <span class="string">'yes'</span>], [1, 0, <span class="string">'no'</span>], [0, 1, <span class="string">'no'</span>], [0, 1, <span class="string">'no'</span>]]</div><div class="line"></div><div class="line">In [4]: trees.splitDataSet(myDat, 0, 1)</div><div class="line">Out[4]: [[1, <span class="string">'yes'</span>], [1, <span class="string">'yes'</span>], [0, <span class="string">'no'</span>]]</div><div class="line"></div><div class="line">In [5]: trees.splitDataSet(myDat, 0, 0)</div><div class="line">Out[5]: [[1, <span class="string">'no'</span>], [1, <span class="string">'no'</span>]]</div></pre></td></tr></table></figure>
<p>下面 来选择最好的数据划分方式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chooseBestFeatureToSplit</span><span class="params">(dataSet)</span>:</span></div><div class="line">    numFeatures = len(dataSet[<span class="number">0</span>]) - <span class="number">1</span></div><div class="line">    baseEntropy = calcShannonEnt(dataSet)</div><div class="line">    bestInfoGain = <span class="number">0.0</span>; bestFeature = <span class="number">-1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numFeatures):</div><div class="line">        featList = [example[i] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]</div><div class="line">        uniqueVals = set(featList)</div><div class="line">        newEntropy = <span class="number">0.0</span></div><div class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> uniqueVals:</div><div class="line">            subDataSte = splitDataSet(dataSet, i, value)</div><div class="line">            prob = len(subDataSte) / float(len(dataSet))</div><div class="line">            newEntropy += prob * calcShannonEnt(subDataSte)</div><div class="line">        infoGain = baseEntropy - newEntropy</div><div class="line">        <span class="keyword">if</span> (infoGain &gt; bestInfoGain):</div><div class="line">            bestInfoGain = infoGain</div><div class="line">            bestFeature = i</div><div class="line">    <span class="keyword">return</span> bestFeature</div></pre></td></tr></table></figure>
<p>这段代码实现了选取特征，划分数据集，计算得出最好的划分数据集的特征。这样划分的意义所在</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">不浮出水面是否可以生存</th>
<th style="text-align:left">是否有脚蹼</th>
<th style="text-align:left">属于鱼类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">是</td>
<td style="text-align:left">否</td>
<td style="text-align:left">否</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是</td>
<td style="text-align:left">否</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是</td>
<td style="text-align:left">否</td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [1]: import trees</div><div class="line"></div><div class="line">In [2]: myDat, labels = trees.createDataSet()</div><div class="line"></div><div class="line">In [3]: myDat</div><div class="line">Out[3]: [[1, 1, <span class="string">'yes'</span>], [1, 1, <span class="string">'yes'</span>], [1, 0, <span class="string">'no'</span>], [0, 1, <span class="string">'no'</span>], [0, 1, <span class="string">'no'</span>]]</div><div class="line"></div><div class="line">In [4]: trees.chooseBestFeatureToSplit(myDat)</div><div class="line">Out[4]: 0</div></pre></td></tr></table></figure>
<p>通个这个结论，可以看到使用第0个特征是最好的划分方式。结合上表来分析一下。如果按照第一个特征划分数据，则第一组值为1(是)的分一组，否(0)为另一组。‘1’组里面包含两个鱼类和一个非鱼类。‘0’组里面只有非鱼类。</p>
<h2 id="递归构建决策数"><a href="#递归构建决策数" class="headerlink" title="递归构建决策数"></a>递归构建决策数</h2><p>构建决策树代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">majorityCnt</span><span class="params">(classList)</span>:</span></div><div class="line">    classCount = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> vote <span class="keyword">in</span> classList:</div><div class="line">        <span class="keyword">if</span> vote <span class="keyword">not</span> <span class="keyword">in</span> classCount.keys(): classCount[vote] = <span class="number">0</span></div><div class="line">        classCount += <span class="number">1</span></div><div class="line">        sortedClassCount = sorted(classCount.iteritems(), \</div><div class="line">            key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTree</span><span class="params">(dataSet, labels)</span>:</span></div><div class="line">    classList = [example[i] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]</div><div class="line">    <span class="keyword">if</span> classList.count(classList[<span class="number">0</span>]) == len(classList):</div><div class="line">        <span class="keyword">return</span> classList[<span class="number">0</span>]</div><div class="line">    <span class="keyword">if</span> len(dataSet[<span class="number">0</span>]) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> majorityCnt(classList)</div><div class="line">    bestFeat = chooseBestFeatureToSplit(dataSet)</div><div class="line">    bestFeatLabel = labels[bestFeat]</div><div class="line">    myTree = &#123;bestFeatLabel:&#123;&#125;&#125;</div><div class="line">    <span class="keyword">del</span>(labels[bestFeat])</div><div class="line">    featValues = [example[bestFeat] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]</div><div class="line">    uniqueVals = set(featValues)</div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> uniqueVals:</div><div class="line">        subLabels = labels[:]</div><div class="line">        myTree[bestFeatLabel][value] = createTree(splitDataSet \</div><div class="line">            (dataSet, bestFeat, value), subLabels)</div><div class="line">    <span class="keyword">return</span> myTree</div></pre></td></tr></table></figure>
<p><code>createTree(dataSet, labels)</code>这个函数有两个参数：数据集和标签列表。<br>递归终止的两个条件：1、所有标签都相同。2、使用完了所有的特征。<br>这里使用了字典来存储了树的信息。</p>
<h2 id="测试和存储分类器"><a href="#测试和存储分类器" class="headerlink" title="测试和存储分类器"></a>测试和存储分类器</h2><h3 id="测试算法：使用决策树执行分类"><a href="#测试算法：使用决策树执行分类" class="headerlink" title="测试算法：使用决策树执行分类"></a>测试算法：使用决策树执行分类</h3><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(inputTree, featLabels, testVec)</span>:</span></div><div class="line">    firstStr = inputTree.keys()[<span class="number">0</span>]</div><div class="line">    secondDict = inputTree[firstStr]</div><div class="line">    featIndex = featLabels.index(firstStr)</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> secondDict.keys():</div><div class="line">        <span class="keyword">if</span> testVec[featIndex] == key:</div><div class="line">            <span class="keyword">if</span> type(secondDict[key]).__name__ == <span class="string">'dict'</span>:</div><div class="line">                classLabel = classify(secondDict[key], featLabels, testVec)</div><div class="line">            <span class="keyword">else</span>: classLabel = secondDict[key]</div><div class="line">    <span class="keyword">return</span> classLabel</div></pre></td></tr></table></figure>
<h2 id="使用算法：决策数的存储"><a href="#使用算法：决策数的存储" class="headerlink" title="使用算法：决策数的存储"></a>使用算法：决策数的存储</h2><p>使用pickle模块存储决策树，序列化对象可以在磁盘上保存对象。并且在需要的时候读取。任何对象都支持序列化操作。</p>
<h2 id="sklearn-决策树分类"><a href="#sklearn-决策树分类" class="headerlink" title="sklearn 决策树分类"></a>sklearn 决策树分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">In [1]: from sklearn import tree</div><div class="line"></div><div class="line">In [2]: x = [[0,0], [1, 1]]</div><div class="line"></div><div class="line">In [3]: y = [0, 1]</div><div class="line"></div><div class="line">In [4]: clf = tree.DecisionTreeClassifier(</div><div class="line">   ...: )</div><div class="line"></div><div class="line">In [5]: clf.fit(x, y)</div><div class="line">Out[5]:</div><div class="line">DecisionTreeClassifier(class_weight=None, criterion=&apos;gini&apos;, max_depth=None,</div><div class="line">            max_features=None, max_leaf_nodes=None,</div><div class="line">            min_impurity_split=1e-07, min_samples_leaf=1,</div><div class="line">            min_samples_split=2, min_weight_fraction_leaf=0.0,</div><div class="line">            presort=False, random_state=None, splitter=&apos;best&apos;)</div><div class="line"></div><div class="line">In [6]: clf.predict([0,0])</div><div class="line">Out[6]: array([0])</div></pre></td></tr></table></figure>
<h3 id="调节参数提高准确率"><a href="#调节参数提高准确率" class="headerlink" title="调节参数提高准确率"></a>调节参数提高准确率</h3><p><code>min_samples_split</code> 最少分割样本,分割的最小的样本数量</p>
<p><img src="/2014/11/19/machinelearning/2014-12-09-决策树/54c4eac6875702c2fd379213eb455ecc.png" alt=""></p>
<p><img src="/2014/11/19/machinelearning/2014-12-09-决策树/3a7547780fc77d84e53236bd39661fa5.png" alt="决策边界简单，精确度越高"></p>
<h2 id="决策树优缺点"><a href="#决策树优缺点" class="headerlink" title="决策树优缺点"></a>决策树优缺点</h2><p>缺点： 容易过度拟合</p>
]]></content>
      
        <categories>
            
            <category> MachineLearning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据挖掘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博客]]></title>
      <url>/2014/03/19/FristBlog/</url>
      <content type="html"><![CDATA[<p>没事乱写写，技术在于折腾，每天进步一点点!</p>
]]></content>
      
        <categories>
            
            <category> misc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Life </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
