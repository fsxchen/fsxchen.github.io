<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arron&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fsxchen.github.io/"/>
  <updated>2020-03-20T08:29:04.440Z</updated>
  <id>http://fsxchen.github.io/</id>
  
  <author>
    <name>arron</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统-存储管理</title>
    <link href="http://fsxchen.github.io/2019/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
    <id>http://fsxchen.github.io/2019/05/30/操作系统-存储管理/</id>
    <published>2019-05-30T07:01:24.000Z</published>
    <updated>2020-03-20T08:29:04.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h1><p>RAM</p><p>分层存储体系 memory hierachy</p><h2 id="无存储器抽象"><a href="#无存储器抽象" class="headerlink" title="无存储器抽象"></a>无存储器抽象</h2><p>早期直接去访问存储器，无抽象</p><p>无法两个程序共同使用</p><h2 id="一种存储器抽象：地址空间"><a href="#一种存储器抽象：地址空间" class="headerlink" title="一种存储器抽象：地址空间"></a>一种存储器抽象：地址空间</h2><p>地址空间是一个进程可用于寻址内存的一套地址集合。每个进程都有一个自己的地址空间，并且这个地址空间独立于其他进程的地址空间</p><h3 id="地址空间的概念"><a href="#地址空间的概念" class="headerlink" title="地址空间的概念"></a>地址空间的概念</h3><h4 id="基址寄存器与界限寄存器"><a href="#基址寄存器与界限寄存器" class="headerlink" title="基址寄存器与界限寄存器"></a>基址寄存器与界限寄存器</h4><p>给CPU配置两个特殊的硬件寄存器，基址寄存器与界限寄存器。</p><h3 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h3><p>所有进程运行所需要的内存，</p><h3 id="空闲内存管理"><a href="#空闲内存管理" class="headerlink" title="空闲内存管理"></a>空闲内存管理</h3><p><strong>位图</strong>和<strong>链表</strong></p><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>虚拟内存主要是用来解决程序的需要空间大于内存，早期使用覆盖（overlay）的方法来解决。</p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p><img src="/2019/05/30/操作系统-存储管理/images/2019/05/30/e1abbff0-82bd-11e9-8978-7fb48a3af31c.png" alt="image.png"></p><p>虚拟地址空间按照固定大小划分成页面（page）的若干</p><p><img src="/2019/05/30/操作系统-存储管理/images/2019/05/31/43defed0-8354-11e9-8ff4-e7cf886913bc.png" alt="image.png"></p><p>如果虚拟页面访问一个没有映射的页面，会发生缺页中断。</p><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p><img src="/2019/05/30/操作系统-存储管理/images/2019/06/03/589bddb0-85b7-11e9-8d4e-33410362f4cf.png" alt="image.png"></p><p>虚拟地址 = 虚拟页号 + 偏移量</p><p>页表的目的是把虚拟页面映射为页框。可以把页表理解成一个函数，输入的是虚拟页号，输出框号。</p><h3 id="加速分页过程"><a href="#加速分页过程" class="headerlink" title="加速分页过程"></a>加速分页过程</h3><p>大多数程序总是对少量的页面进行多次访问。<br>TLB</p><h3 id="针对大内存的页表"><a href="#针对大内存的页表" class="headerlink" title="针对大内存的页表"></a>针对大内存的页表</h3><h4 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h4><h4 id="倒排页表"><a href="#倒排页表" class="headerlink" title="倒排页表"></a>倒排页表</h4><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><p>当发生缺页中断时，操作系统会选择一个页面将其换出内存。</p><h2 id="分页系统中的设计问题"><a href="#分页系统中的设计问题" class="headerlink" title="分页系统中的设计问题"></a>分页系统中的设计问题</h2><h2 id="有关实现的问题"><a href="#有关实现的问题" class="headerlink" title="有关实现的问题"></a>有关实现的问题</h2><h2 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h2><h2 id="有关存储的研究"><a href="#有关存储的研究" class="headerlink" title="有关存储的研究"></a>有关存储的研究</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;存储管理&quot;&gt;&lt;a href=&quot;#存储管理&quot; class=&quot;headerlink&quot; title=&quot;存储管理&quot;&gt;&lt;/a&gt;存储管理&lt;/h1&gt;&lt;p&gt;RAM&lt;/p&gt;
&lt;p&gt;分层存储体系 memory hierachy&lt;/p&gt;
&lt;h2 id=&quot;无存储器抽象&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="操作系统" scheme="http://fsxchen.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="计算机" scheme="http://fsxchen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="操作系统" scheme="http://fsxchen.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>编码问题</title>
    <link href="http://fsxchen.github.io/2019/05/29/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://fsxchen.github.io/2019/05/29/编码问题/</id>
    <published>2019-05-29T08:49:59.000Z</published>
    <updated>2020-03-20T08:47:03.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是编码"><a href="#什么是编码" class="headerlink" title="什么是编码"></a>什么是编码</h1><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p>一种编码规范</p><p>8位的二进制编码 0 - 127</p><h2 id="Unicode和Utf-8"><a href="#Unicode和Utf-8" class="headerlink" title="Unicode和Utf-8"></a>Unicode和Utf-8</h2><p>能够编码任意的符号<br>unicode编码，范围虫0x0000到0x10FFFF<br>unicdode至规定了编号，但是并未规定如何存储</p><h3 id="utf32"><a href="#utf32" class="headerlink" title="utf32"></a>utf32</h3><p>使用32位来存储unicode编码后数字对应的二进制</p><h3 id="utf16"><a href="#utf16" class="headerlink" title="utf16"></a>utf16</h3><p>UTF-16 使用变长字节表示 </p><p>① 对于编号在 U+0000 到 U+FFFF 的字符（常用字符集），直接用两个字节表示。<br>② 编号在 U+10000 到 U+10FFFF 之间的字符，需要用四个字节表示。</p><p>同样，UTF-16 也有字节的顺序问题（大小端），所以就有 UTF-16BE 表示大端，UTF-16LE 表示小端。</p><h3 id="utf8"><a href="#utf8" class="headerlink" title="utf8"></a>utf8</h3><p>UTF-8 就是使用变长字节表示,顾名思义，就是使用的字节数可变，这个变化是根据 Unicode 编号的大小有关，编号小的使用的字节就少，编号大的使用的字节就多。使用的字节个数从 1 到 4 个不等。</p><p>UTF-8 的编码规则是：</p><p>① 对于单字节的符号，字节的第一位设为 0，后面的7位为这个符号的 Unicode 码，因此对于英文字母，UTF-8 编码和 ASCII 码是相同的。 </p><p>② 对于n字节的符号（n&gt;1）,第一个字节的前 n 位都设为 1，第 n+1 位设为 0，后面字节的前两位一律设为 10，剩下的没有提及的二进制位，全部为这个符号的 Unicode 码 。</p><p>举个例子：比如说一个字符的 Unicode 编码是 130，显然按照 UTF-8 的规则一个字节是表示不了它（因为如果是一个字节的话前面的一位必须是 0），所以需要两个字节(n = 2)。</p><p>根据规则，第一个字节的前 2 位都设为 1，第 3(2+1) 位设为 0，则第一个字节为：110X XXXX，后面字节的前两位一律设为 10，后面只剩下一个字节，所以后面的字节为：10XX XXXX。</p><p>所以它的格式为 110XXXXX 10XXXXXX 。</p><h2 id="py编码"><a href="#py编码" class="headerlink" title="py编码"></a>py编码</h2><h3 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h3><p>py在编译文件的时候，需要提供文件的编码格式</p><h3 id="IO编码"><a href="#IO编码" class="headerlink" title="IO编码"></a>IO编码</h3><p>IO处理的时候</p><h3 id="python2里的unicode和"><a href="#python2里的unicode和" class="headerlink" title="python2里的unicode和"></a>python2里的unicode和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; object</div><div class="line">  &gt;&gt; basestring</div><div class="line">     &gt;&gt;&gt; str</div><div class="line">     &gt;&gt;&gt; --</div><div class="line">     &gt;&gt;&gt; unicode</div></pre></td></tr></table></figure><ul><li>str对象支持的方法与unicode基本完全一样</li><li>str与unicode都是继承自basestring，大部分对字符串操作的方法只会检查是不是basestring类及+ 其子类<br>任何一个类都来自object(这里指新类)，都默认包含内建方法<strong>str</strong>，该方法用于将实例转换成str对象，换言之，你能够print任何一个对象，都因为默认使用内建方法转换了。各个类都可以改写这个内建方法，而unicode改写为使用默认编码解码</li></ul><p>另外一种稍微可以谅解的情况是，python2关于文件流的封装实在太过坑爹，基本上所有文件流最终返回和写入的都是str对象。简单的举个例子，你打开一个文件，按行读取的每一行，都是一个str对象！<br>这种情况，就是为什么需要设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(&apos;utf8&apos;)</div></pre></td></tr></table></figure></p><p>这种方法是在饮鸩止渴，完全没有解决你的实际代码问题。它只是将python默认编码替换成了你想要的编码(utf-8之类)，一旦有新的编码类型的str对象出现，你的程序就会重新开始报错。所以不推荐这种方法，它会掩盖掉你程序的大部分问题。</p><h3 id="decode-和-encode"><a href="#decode-和-encode" class="headerlink" title="decode 和 encode"></a>decode 和 encode</h3><p>encode:编码，将特定的字符串转换成str<br>decode:解码，将特定编码的str转换成unicode</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://blog.csdn.net/zhusongziye/article/details/84261211" target="_blank" rel="external">https://blog.csdn.net/zhusongziye/article/details/84261211</a><br><a href="http://python.jobbole.com/86564/" target="_blank" rel="external">http://python.jobbole.com/86564/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是编码&quot;&gt;&lt;a href=&quot;#什么是编码&quot; class=&quot;headerlink&quot; title=&quot;什么是编码&quot;&gt;&lt;/a&gt;什么是编码&lt;/h1&gt;&lt;h2 id=&quot;ASCII&quot;&gt;&lt;a href=&quot;#ASCII&quot; class=&quot;headerlink&quot; title=&quot;ASC
      
    
    </summary>
    
      <category term="计算机" scheme="http://fsxchen.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="tag" scheme="http://fsxchen.github.io/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>开发中的时区问题</title>
    <link href="http://fsxchen.github.io/2019/05/17/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://fsxchen.github.io/2019/05/17/开发中的时区问题/</id>
    <published>2019-05-17T03:23:43.000Z</published>
    <updated>2019-05-17T04:17:45.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h1><p>1、os有自己的时区设置<br>2、db有自己的时区设置<br>3、浏览器js有自己的时区处理方式</p><h2 id="时区-UTC-GMT-CST-DST"><a href="#时区-UTC-GMT-CST-DST" class="headerlink" title="时区- UTC GMT CST DST"></a>时区- UTC GMT CST DST</h2><p>全球有24个时区，<br>国际换日线</p><p>UTC</p><p>localtime</p><h3 id="GMT-格林威治标注时间"><a href="#GMT-格林威治标注时间" class="headerlink" title="GMT 格林威治标注时间"></a>GMT 格林威治标注时间</h3><h3 id="UTC-世界标准时间"><a href="#UTC-世界标准时间" class="headerlink" title="UTC 世界标准时间"></a>UTC 世界标准时间</h3><p>UTC相当于GMT</p><h3 id="DST-夏日解决时间"><a href="#DST-夏日解决时间" class="headerlink" title="DST 夏日解决时间"></a>DST 夏日解决时间</h3><h3 id="CST"><a href="#CST" class="headerlink" title="CST"></a>CST</h3><p>一般表示China Standard Time UT+8:00</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><table><thead><tr><th>支持</th><th>SQLite3</th><th>MySQL</th><th>PostgreSQL</th><th>MongoDB</th></tr></thead><tbody><tr><td>存储时区</td><td>是</td><td>否</td><td>可选</td><td>否</td></tr><tr><td>时差相关运算/函数</td><td>否</td><td>是</td><td>是</td><td>否</td></tr><tr><td>可设定时区</td><td>否</td><td>是</td><td>是</td><td>否,只用UTC时间</td></tr><tr><td>多种日期格式</td><td>是</td><td>否</td><td>是</td><td>否</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么&quot;&gt;&lt;a href=&quot;#为什么&quot; class=&quot;headerlink&quot; title=&quot;为什么&quot;&gt;&lt;/a&gt;为什么&lt;/h1&gt;&lt;p&gt;1、os有自己的时区设置&lt;br&gt;2、db有自己的时区设置&lt;br&gt;3、浏览器js有自己的时区处理方式&lt;/p&gt;
&lt;h2 id=&quot;时区-U
      
    
    </summary>
    
      <category term="categories" scheme="http://fsxchen.github.io/categories/categories/"/>
    
    
      <category term="tag" scheme="http://fsxchen.github.io/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>前端状态管理--vuex</title>
    <link href="http://fsxchen.github.io/2019/03/24/%E5%89%8D%E7%AB%AF%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86-vuex/"/>
    <id>http://fsxchen.github.io/2019/03/24/前端状态管理-vuex/</id>
    <published>2019-03-24T01:33:50.000Z</published>
    <updated>2020-03-20T08:27:00.350Z</updated>
    
    <content type="html"><![CDATA[<p>store</p><p>getters<br>mutations<br>actons</p><h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><p>子组建和父组建如何传递信息<br>简单来说，就是有些数据是需要在多个组建中来访问</p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p><img src="/2019/03/24/前端状态管理-vuex/images/2019/03/24/628a0910-4ddf-11e9-b313-17dcc7379d3b.png" alt="image.png"></p><h1 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>初始化数据</p><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>why:<br>如果没有getters，1、我们需要在components中在我们的status中取数据，所以对于一般的用法，那么我么么就会这么使用，<code>this.$status.state.someValue</code>，为了能够将数据从系统中分离开来，getters，在getter中定义取何数据，如何取。<br>2、如果需要修改一个数据的获取方式，那么我们只需要在getter的方法中修改（tips：其实取决于如何设计，也就是说在取数据的时候要尽量保证系统的不变性）</p><h2 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h2><p>定义如果修改status<br>用法<br>store.dispatch(‘changeMessage’, ‘newMessage’)<br>最佳实践：看到这用的是str型取调用mutations中的方法，可以在mutations中将其作为，将该字符串定义成一个常量</p><h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><p>刚还是的时候，并不理解为什么需要有actions，现在才明白，mutations实际上是对状态进行修改，所以在代码任何需要修改的地方，都需要调用mutations中提供的方法，如果修改的比较多，一般的做法就是将这些修改抽象成一个单独的函数，那么这个函数我们可以理解成actions。<br>我们可以看到actions、getter实际上是展示给用户，我们需要什么，我们要修改什么，这个是业务层面，而status、或者是mutations实际上是底层修改的。</p><p>最佳实践，可以看到actions连接的是backend，所以在actions层，我们需要取调用api的一些东西。</p><p>“Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。<br>实践中，我们会经常用到 ES2015 的 参数解构 来简化代码（特别是我们需要调用 commit 很多次的时候）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">        userSignin(&#123;commit&#125;, user) &#123;</div><div class="line">            console.log(&quot;xxx&quot;)</div><div class="line">            commit(USER_SIGNIN, user)</div><div class="line">        &#125;,</div><div class="line">        [USER_SIGNOUT](&#123;commit&#125;) &#123;</div><div class="line">            commit(USER_SIGNOUT)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;store&lt;/p&gt;
&lt;p&gt;getters&lt;br&gt;mutations&lt;br&gt;actons&lt;/p&gt;
&lt;h1 id=&quot;状态管理&quot;&gt;&lt;a href=&quot;#状态管理&quot; class=&quot;headerlink&quot; title=&quot;状态管理&quot;&gt;&lt;/a&gt;状态管理&lt;/h1&gt;&lt;p&gt;子组建和父组建如何传递
      
    
    </summary>
    
      <category term="前端" scheme="http://fsxchen.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://fsxchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vuex" scheme="http://fsxchen.github.io/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>心理学入门</title>
    <link href="http://fsxchen.github.io/2019/02/21/%E5%BF%83%E7%90%86%E5%AD%A6%E5%85%A5%E9%97%A8/"/>
    <id>http://fsxchen.github.io/2019/02/21/心理学入门/</id>
    <published>2019-02-21T11:45:09.000Z</published>
    <updated>2020-03-20T08:28:47.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生活中的心理学"><a href="#生活中的心理学" class="headerlink" title="生活中的心理学"></a>生活中的心理学</h1><h2 id="心理学特色"><a href="#心理学特色" class="headerlink" title="心理学特色"></a>心理学特色</h2><p><strong>定义</strong><br>关于个体的行为及心智研究。</p><h2 id="现代心理学的发展"><a href="#现代心理学的发展" class="headerlink" title="现代心理学的发展"></a>现代心理学的发展</h2><h3 id="心理学的历史根基"><a href="#心理学的历史根基" class="headerlink" title="心理学的历史根基"></a>心理学的历史根基</h3><p>就研究对象和方法而言，有</p><p><strong>结构主义</strong></p><p><strong>机能主义</strong></p><h3 id="女心理学家"><a href="#女心理学家" class="headerlink" title="女心理学家"></a>女心理学家</h3><h3 id="心理学的观点"><a href="#心理学的观点" class="headerlink" title="心理学的观点"></a>心理学的观点</h3><h4 id="心理动力学"><a href="#心理动力学" class="headerlink" title="心理动力学"></a>心理动力学</h4><p>弗洛伊德</p><h4 id="行为主义"><a href="#行为主义" class="headerlink" title="行为主义"></a>行为主义</h4><p>约翰华生</p><h4 id="认知观点"><a href="#认知观点" class="headerlink" title="认知观点"></a>认知观点</h4><h4 id="生物医学观点"><a href="#生物医学观点" class="headerlink" title="生物医学观点"></a>生物医学观点</h4><h4 id="进化论观点"><a href="#进化论观点" class="headerlink" title="进化论观点"></a>进化论观点</h4><h4 id="社会文化观点"><a href="#社会文化观点" class="headerlink" title="社会文化观点"></a>社会文化观点</h4><p><strong>目标</strong><br>描述、解释、预测和控制行为。</p><h1 id="人类行为的生物学基础"><a href="#人类行为的生物学基础" class="headerlink" title="人类行为的生物学基础"></a>人类行为的生物学基础</h1><h2 id="遗传和行为"><a href="#遗传和行为" class="headerlink" title="遗传和行为"></a>遗传和行为</h2><p>基因<br>双生子实验<br>哪些因素是基因决定的<br>易攻击？ 环境和基因决定</p><h2 id="神经系统活动"><a href="#神经系统活动" class="headerlink" title="神经系统活动"></a>神经系统活动</h2><p>神经元<br>1、运动神经元<br>2、感觉神经元<br>3、中间神经元</p><p>胶质细胞是什么？</p><p><img src="https://i.loli.net/2019/02/21/5c6e8d60125b0.png" alt="image.png"></p><h2 id="生物学和行为"><a href="#生物学和行为" class="headerlink" title="生物学和行为"></a>生物学和行为</h2><h3 id="大脑"><a href="#大脑" class="headerlink" title="大脑"></a>大脑</h3><p>治疗癫痫，摘除胼胝体。脑裂人</p><h3 id="神经系统"><a href="#神经系统" class="headerlink" title="神经系统"></a>神经系统</h3><h3 id="内分泌系统"><a href="#内分泌系统" class="headerlink" title="内分泌系统"></a>内分泌系统</h3><p>激素<br>下丘脑</p><p>脑垂体：分泌10中不同的激素</p><h3 id="可塑性和神经发生：变化的大脑"><a href="#可塑性和神经发生：变化的大脑" class="headerlink" title="可塑性和神经发生：变化的大脑"></a>可塑性和神经发生：变化的大脑</h3><p>学习与大脑、神经元<br>钢琴家的因为长期使用左手，左脑的控制区发达<br>在好的环境中大鼠神经元中的突触多</p><h1 id="感觉和知觉"><a href="#感觉和知觉" class="headerlink" title="感觉和知觉"></a>感觉和知觉</h1><p>知觉：理解环境中客体和事件的过程。<br>分三个部分：感觉、知觉组织、辨认与识别客体<br>感觉：感受器收到刺激后产生神经冲动以反应身体内外经验的过程<br>知觉组织：大脑整合感受器输入以及对世界的已有知识，形成对外部刺激的内部表达。<br>辨认与识别：赋予知觉以意义</p><h2 id="关于世界的感觉知识"><a href="#关于世界的感觉知识" class="headerlink" title="关于世界的感觉知识"></a>关于世界的感觉知识</h2><h3 id="进距刺激和远距刺激"><a href="#进距刺激和远距刺激" class="headerlink" title="进距刺激和远距刺激"></a>进距刺激和远距刺激</h3><p>进距刺激：环境中的物理客体<br>远距刺激：在视网膜中的光学成像</p><h3 id="心理物理学"><a href="#心理物理学" class="headerlink" title="心理物理学"></a>心理物理学</h3><p>韦伯定律</p><h3 id="从物理事件到心理事件"><a href="#从物理事件到心理事件" class="headerlink" title="从物理事件到心理事件"></a>从物理事件到心理事件</h3><p>换能</p><h2 id="视觉系统"><a href="#视觉系统" class="headerlink" title="视觉系统"></a>视觉系统</h2><h3 id="眼"><a href="#眼" class="headerlink" title="眼"></a>眼</h3><h3 id="瞳孔和晶状体"><a href="#瞳孔和晶状体" class="headerlink" title="瞳孔和晶状体"></a>瞳孔和晶状体</h3><p>瞳孔：调节进入的光线<br>晶状体：调节焦距，有</p><h3 id="视网膜"><a href="#视网膜" class="headerlink" title="视网膜"></a>视网膜</h3><h3 id="大脑的加工"><a href="#大脑的加工" class="headerlink" title="大脑的加工"></a>大脑的加工</h3><h3 id="颜色视觉"><a href="#颜色视觉" class="headerlink" title="颜色视觉"></a>颜色视觉</h3><p>光在物理上用波长描述，颜色是感觉系统对波长的解释</p><p>颜色的三个纬度、色调、饱和度、明度</p><p><strong>颜色视觉的理论</strong><br>三原色理论<br>拮抗理论</p><h2 id="听觉"><a href="#听觉" class="headerlink" title="听觉"></a>听觉</h2><h3 id="声音的物理特性"><a href="#声音的物理特性" class="headerlink" title="声音的物理特性"></a>声音的物理特性</h3><p>正弦波的那个特点、频率和震幅</p><h3 id="声音的心理维度"><a href="#声音的心理维度" class="headerlink" title="声音的心理维度"></a>声音的心理维度</h3><p>音高：（频率越高，音高越高），但是并不是线性的<br>钢琴的88个键盘覆盖的频率为30<code>HZ</code>到4000<code>HZ</code>，但是最低的两个音的频率差为1.6HZ，最高的两个音的频率差为235HZ</p><p>响度</p><p>音色</p><h3 id="听觉的生理基础"><a href="#听觉的生理基础" class="headerlink" title="听觉的生理基础"></a>听觉的生理基础</h3><p>人为什么能够感知不同的音高？<br><strong>音高知觉理论</strong><br>地点说<br>频率说</p><p><strong>声音定位</strong></p><h2 id="其他感觉"><a href="#其他感觉" class="headerlink" title="其他感觉"></a>其他感觉</h2><h3 id="嗅觉"><a href="#嗅觉" class="headerlink" title="嗅觉"></a>嗅觉</h3><h3 id="味觉"><a href="#味觉" class="headerlink" title="味觉"></a>味觉</h3><p>辨别美食靠的是嗅觉</p><h3 id="触觉和肤觉"><a href="#触觉和肤觉" class="headerlink" title="触觉和肤觉"></a>触觉和肤觉</h3><h3 id="前庭觉和动觉"><a href="#前庭觉和动觉" class="headerlink" title="前庭觉和动觉"></a>前庭觉和动觉</h3><h3 id="痛觉"><a href="#痛觉" class="headerlink" title="痛觉"></a>痛觉</h3><h2 id="知觉的组织过程"><a href="#知觉的组织过程" class="headerlink" title="知觉的组织过程"></a>知觉的组织过程</h2><h3 id="注意过程（attention）"><a href="#注意过程（attention）" class="headerlink" title="注意过程（attention）"></a>注意过程（attention）</h3><p>什么力量决定客体成为你注意的焦点。</p><ul><li><p>目标指向选择</p></li><li><p>刺激驱动捕获</p></li></ul><h3 id="知觉组织原则"><a href="#知觉组织原则" class="headerlink" title="知觉组织原则"></a>知觉组织原则</h3><p>1、接近律<br>2、相似律<br>3、连续律<br>4、闭合律<br>5、共同命运体</p><h3 id="空间和时间上的整合"><a href="#空间和时间上的整合" class="headerlink" title="空间和时间上的整合"></a>空间和时间上的整合</h3><p>边界扩展效应，观察者总是会扩展出超出原始边的信息。</p><h3 id="运动知觉"><a href="#运动知觉" class="headerlink" title="运动知觉"></a>运动知觉</h3><p>双眼深度来源于<strong>视网膜像差</strong>和<strong>视轴辐合</strong><br>人在看进处物理，眼睛会向中间转动，可以靠这种感知3米以内的深度。</p><p><strong>单眼线索</strong><br>从一只眼睛判断出深度，画家创作的时候就是使用的这种技巧。</p><h3 id="知觉恒常性"><a href="#知觉恒常性" class="headerlink" title="知觉恒常性"></a>知觉恒常性</h3><h3 id="错觉"><a href="#错觉" class="headerlink" title="错觉"></a>错觉</h3><h2 id="辨认与识别过程"><a href="#辨认与识别过程" class="headerlink" title="辨认与识别过程"></a>辨认与识别过程</h2><h3 id="自下而上与自上而下的加工"><a href="#自下而上与自上而下的加工" class="headerlink" title="自下而上与自上而下的加工"></a>自下而上与自上而下的加工</h3><p><strong>自下而上的加工</strong>  数据驱动加工，这种加工始于外界的感觉信息</p><p><strong>自上而下的加工</strong> 概念驱动。由于记忆中存储的概念对输入信息的解释</p><p>音素重建： </p><h3 id="情景和期望的影响"><a href="#情景和期望的影响" class="headerlink" title="情景和期望的影响"></a>情景和期望的影响</h3><p>在自上而下的加工过程中，情景和期望能够影响加工的结果，比如在另外一个地方，你需要更多的时间认出一个熟人。</p><p>定势： 运动定势、心理定势、知觉定势</p><h1 id="心理、意识和其他状态"><a href="#心理、意识和其他状态" class="headerlink" title="心理、意识和其他状态"></a>心理、意识和其他状态</h1><h2 id="意识的内容"><a href="#意识的内容" class="headerlink" title="意识的内容"></a>意识的内容</h2><h3 id="觉知和意识"><a href="#觉知和意识" class="headerlink" title="觉知和意识"></a>觉知和意识</h3><p><strong>非意识过程</strong><br>eg： 血压的调节、呼吸，呼吸何以通过意识调整，但是没有意识控制，神经系统就能够控制呼吸。</p><p><strong>前意识记忆</strong><br>只有在你注意到之后才能到达意识的记忆</p><p><strong>未被注意到的信息</strong><br>人们需要意识来识别环境中的景象和声音</p><p><strong>无意识</strong><br>弗洛伊德、压制</p><h3 id="研究意识的内容"><a href="#研究意识的内容" class="headerlink" title="研究意识的内容"></a>研究意识的内容</h3><h2 id="意识的功能"><a href="#意识的功能" class="headerlink" title="意识的功能"></a>意识的功能</h2><h3 id="意识的作用"><a href="#意识的作用" class="headerlink" title="意识的作用"></a>意识的作用</h3><ol><li>限制你的觉察和注意的范围</li><li>选择性存储</li><li>让你停止下来，压制那些与道德、伦理和现实考量冲突的强烈愿望。</li></ol><h3 id="研究意识的功能"><a href="#研究意识的功能" class="headerlink" title="研究意识的功能"></a>研究意识的功能</h3><h2 id="睡眠与梦"><a href="#睡眠与梦" class="headerlink" title="睡眠与梦"></a>睡眠与梦</h2><h3 id="生理节奏"><a href="#生理节奏" class="headerlink" title="生理节奏"></a>生理节奏</h3><p>每天接触阳光有助于24小时的微调，生物钟周期24.18小时。</p><h3 id="睡眠周期"><a href="#睡眠周期" class="headerlink" title="睡眠周期"></a>睡眠周期</h3><p>生理节律中大约1/3是行为静止期，称为睡眠。<br>睡眠中周期性出现快速眼动睡眠（REM）和非快速眼动睡眠（NREM）交替出现。</p><h3 id="为什么需要睡眠"><a href="#为什么需要睡眠" class="headerlink" title="为什么需要睡眠"></a>为什么需要睡眠</h3><p>保存，恢复</p><h3 id="睡眠障碍"><a href="#睡眠障碍" class="headerlink" title="睡眠障碍"></a>睡眠障碍</h3><ul><li><p>失眠症、主观失眠</p></li><li><p>发作性睡眠症</p></li><li><p>睡眠窒息<br>在婴儿中经常发生</p></li><li>梦游症</li><li>梦魇和夜惊</li></ul><h3 id="梦：心理的剧场"><a href="#梦：心理的剧场" class="headerlink" title="梦：心理的剧场"></a>梦：心理的剧场</h3><ul><li><p>弗洛伊德梦的解析</p></li><li><p>梦的内容的当代理论</p></li></ul><h2 id="意识的其他状态"><a href="#意识的其他状态" class="headerlink" title="意识的其他状态"></a>意识的其他状态</h2><h3 id="清醒梦境"><a href="#清醒梦境" class="headerlink" title="清醒梦境"></a>清醒梦境</h3><p>知道自己在做梦是一种习得的技能</p><h3 id="催眠"><a href="#催眠" class="headerlink" title="催眠"></a>催眠</h3><p>来源于希腊神话睡眠之神，催眠并不是睡眠状态，广义界定，催眠是一个种不同的知觉状体，其特征是对暗示有特殊的反应能力，并在知觉、记忆、动机和自我控制感情方面发生变化。</p><ul><li>催眠诱导和可催眠性<br>与可催眠目前来说最相关的就是专注。<br>催眠不仅和催眠师有关，主要还是和被催眠的个体相关。</li></ul><h3 id="冥想"><a href="#冥想" class="headerlink" title="冥想"></a>冥想</h3><p>获得心理和精神自我的一种内在关注</p><p>经常冥想，能够保持脑容量。</p><h2 id="改变心理的药物"><a href="#改变心理的药物" class="headerlink" title="改变心理的药物"></a>改变心理的药物</h2><h3 id="依赖和成瘾"><a href="#依赖和成瘾" class="headerlink" title="依赖和成瘾"></a>依赖和成瘾</h3><p>精神促动药物，通过暂时改变对现实的意识觉知来影响个体的心理过程和行为。<br>能够和突触受体结合，阻断或刺激某些反应。</p><p>持续使用会有耐受性。</p><p>生理依赖<br>耐受性和生理依赖造成成瘾。<br>心理依赖</p><h3 id="精神促动药物"><a href="#精神促动药物" class="headerlink" title="精神促动药物"></a>精神促动药物</h3><ul><li><p>迷幻剂<br>LSD PCP</p></li><li><p>大麻<br>THC</p></li><li><p>鸦片<br>海洛因和吗啡，主要和大脑内内吗啡（内源性吗啡）产生作用。<br>大麻可以增大人的食欲</p></li><li><p>镇静剂<br>抑制和减少神经中枢的传导</p></li><li><p>酒精</p></li><li><p>兴奋剂<br>病毒、可卡因</p></li><li><p>咖啡因</p></li><li><p>尼古丁</p></li></ul><h1 id="学习与行为分析"><a href="#学习与行为分析" class="headerlink" title="学习与行为分析"></a>学习与行为分析</h1><h2 id="学习的研究"><a href="#学习的研究" class="headerlink" title="学习的研究"></a>学习的研究</h2><h3 id="什么是学习"><a href="#什么是学习" class="headerlink" title="什么是学习"></a>什么是学习</h3><p>学习 是基于经验而使行为或行为潜能发生相对一致的变化。</p><p><strong>习惯化和敏感化</strong><br>连续多次后，情绪反应随时间逐渐减弱。</p><h2 id="经典条件作用：学习可预期的信号"><a href="#经典条件作用：学习可预期的信号" class="headerlink" title="经典条件作用：学习可预期的信号"></a>经典条件作用：学习可预期的信号</h2><h3 id="巴浦洛夫的意外发现"><a href="#巴浦洛夫的意外发现" class="headerlink" title="巴浦洛夫的意外发现"></a>巴浦洛夫的意外发现</h3><p>从消化功能的研究中意外发现经典条件反射。</p><p><strong>无条件刺激（UCS）</strong> 能够诱发反射行为的刺激</p><p><strong>无条件反射</strong> 由无条件刺激引发的</p><p><strong>条件刺激（CS）</strong> 需要与UCS反复匹配，才能形成条件反应（CR）</p><p>CS和UCS之间的模式，有4中，结果证明，在延迟模式下最有小，即在CS之后一个时间进行UCS最有效，不过这个间隔时间段会因为场景不同而有差异。</p><p><strong>刺激泛化</strong></p><p><strong>刺激辨别</strong></p><h3 id="习得"><a href="#习得" class="headerlink" title="习得"></a>习得</h3><h3 id="经典条件作用的应用"><a href="#经典条件作用的应用" class="headerlink" title="经典条件作用的应用"></a>经典条件作用的应用</h3><ul><li><p>情绪和偏好</p></li><li><p>药物成瘾的原因</p></li></ul><p>疲劳感，癌症化疗，都有条件反射的作用</p><h2 id="操作性条件作用：行为对结果的学习"><a href="#操作性条件作用：行为对结果的学习" class="headerlink" title="操作性条件作用：行为对结果的学习"></a>操作性条件作用：行为对结果的学习</h2><h3 id="效果律"><a href="#效果律" class="headerlink" title="效果律"></a>效果律</h3><p>行为与结果之间的规律，桑代克。带来满意结果的反应出现的概率会越来越大。</p><h3 id="行为的实验分析"><a href="#行为的实验分析" class="headerlink" title="行为的实验分析"></a>行为的实验分析</h3><p>斯金纳（Skinner） 操作性条件作用</p><h3 id="强化相依"><a href="#强化相依" class="headerlink" title="强化相依"></a>强化相依</h3><p><strong>正强化</strong>当某一行为伴随着喜爱的刺激的呈现而出现。</p><p><strong>负强化</strong><br>某一行为伴随着讨厌条件的消除</p><p>阳性惩罚<br>某一行为伴随着厌恶刺激</p><p>阴性惩罚<br>某一行为伴随着喜爱刺激的消除。</p><p>强化，增加某些行为发生的概率<br>惩罚，减少某些行为发生的概率</p><p>使用辨别性刺激，加上强化、惩罚等手段，能够改变行为。</p><p>辨别性刺激–行为–结果称为三项相倚   skinner。<br>对小孩的惩罚<br>害羞、与环境中的正强化、负强化有关系。</p><h3 id="强化程序表"><a href="#强化程序表" class="headerlink" title="强化程序表"></a>强化程序表</h3><p>固定比率程序表<br>可变比率程序表<br>固定间隔程序表<br>可变间隔程序表</p><h3 id="行为塑造"><a href="#行为塑造" class="headerlink" title="行为塑造"></a>行为塑造</h3><p>连续塑造接近法</p><h2 id="生物学与学习"><a href="#生物学与学习" class="headerlink" title="生物学与学习"></a>生物学与学习</h2><h3 id="本能漂移"><a href="#本能漂移" class="headerlink" title="本能漂移"></a>本能漂移</h3><h3 id="味觉-厌恶学习"><a href="#味觉-厌恶学习" class="headerlink" title="味觉-厌恶学习"></a>味觉-厌恶学习</h3><p>组织美洲小狼吃羊，味觉厌恶。</p><h2 id="认知对学习的影响"><a href="#认知对学习的影响" class="headerlink" title="认知对学习的影响"></a>认知对学习的影响</h2><h3 id="比较认知"><a href="#比较认知" class="headerlink" title="比较认知"></a>比较认知</h3><h4 id="认知地图"><a href="#认知地图" class="headerlink" title="认知地图"></a>认知地图</h4><p>认知地图是在过去经验的基础上，产生于头脑中的，某些类似于一张现场地图的模型。是一种对局部环境的综合表象，既包括事件的简单顺序，也包括方向、距离，甚至时间关系的信息。最早见于美国心理学家E.C.托尔曼所著《白鼠和人的认知地图》(1948)一文。他根据动物实验的结果认为，动物并不是通过尝试错误的行为习得一系列刺激与反应的联结，而是通过脑对环境的加工，在获得达到目的的手段和途径中建立起一个完整的“符号-格式塔”模式，这就是认知地图</p><h4 id="概率性学习"><a href="#概率性学习" class="headerlink" title="概率性学习"></a>概率性学习</h4><h3 id="观察学习"><a href="#观察学习" class="headerlink" title="观察学习"></a>观察学习</h3><p>观察榜样学习。<br>注意</p><p>记忆</p><p>再现</p><p>动机</p><p>电视的影响</p><h1 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h1><h2 id="什么是记忆"><a href="#什么是记忆" class="headerlink" title="什么是记忆"></a>什么是记忆</h2><p>存储和提取信息的一种能力。</p><h3 id="记忆的功能"><a href="#记忆的功能" class="headerlink" title="记忆的功能"></a>记忆的功能</h3><h4 id="内隐记忆和外显记忆"><a href="#内隐记忆和外显记忆" class="headerlink" title="内隐记忆和外显记忆"></a>内隐记忆和外显记忆</h4><p>内隐记忆：没有特别努力<br>外显记忆：比如十二星座？比较费力</p><h4 id="陈述性记忆和程序性记忆"><a href="#陈述性记忆和程序性记忆" class="headerlink" title="陈述性记忆和程序性记忆"></a>陈述性记忆和程序性记忆</h4><p>陈述性：回忆<br>程序性：How to</p><h3 id="记忆过程概述"><a href="#记忆过程概述" class="headerlink" title="记忆过程概述"></a>记忆过程概述</h3><ul><li>编码</li><li>存储</li><li>提取</li></ul><h2 id="记忆的短时功用"><a href="#记忆的短时功用" class="headerlink" title="记忆的短时功用"></a>记忆的短时功用</h2><h3 id="映像记忆"><a href="#映像记忆" class="headerlink" title="映像记忆"></a>映像记忆</h3><p>每个感觉系统都有一种感觉存储，视觉或者映像记忆只能存在半秒钟。</p><h3 id="短时记忆"><a href="#短时记忆" class="headerlink" title="短时记忆"></a>短时记忆</h3><h3 id="工作记忆"><a href="#工作记忆" class="headerlink" title="工作记忆"></a>工作记忆</h3><p><strong>语音环路</strong></p><p><strong>视觉空间画板</strong></p><p><strong>中央执行系统</strong></p><p><strong>情景缓冲区</strong></p><h2 id="长时记忆：编码和提取"><a href="#长时记忆：编码和提取" class="headerlink" title="长时记忆：编码和提取"></a>长时记忆：编码和提取</h2><p>长时记忆构成了每个人对世界和自我的全部知识。</p><h3 id="提取线索"><a href="#提取线索" class="headerlink" title="提取线索"></a>提取线索</h3><p>如何找到一个记忆？<br>提取线索</p><p><strong>回忆</strong> 和 <strong>再认</strong></p><p>更具提取线索，分为情景记忆和语义记忆</p><h4 id="情景记忆"><a href="#情景记忆" class="headerlink" title="情景记忆"></a>情景记忆</h4><p>保存亲自体验过的一件事</p><h4 id="语义记忆"><a href="#语义记忆" class="headerlink" title="语义记忆"></a>语义记忆</h4><p>公式等，<br>如果不能恢复语义记忆，可以把它当成情景记忆回忆</p><h3 id="背景和编码"><a href="#背景和编码" class="headerlink" title="背景和编码"></a>背景和编码</h3><p>什么是系列位置效应（serial position effect）</p><p>1、一个脑还是两个脑<br>胼胝体<br>左脑：<br>右脑：<br>2、丰富的经历=更大的大脑<br>3、人的本性是天生的吗？<br>双生子研究<br>4、小心视崖</p><p>意识与知觉<br>1、注释偏好<br>2、睡眠，毫无疑问会做梦<br>3、类别天成<br>4、行动，如同被催眠了一般</p><p>条件作用和学习<br>1、不只限于分泌唾液的狗<br>2、情绪化的小阿尔伯特<br>3、敲敲木头<br>4、观察到攻击行为，作出攻击行为</p><p>认知、记忆和智力<br>1、所想即所得<br>2、你在哪方面更聪明<br>3、心中的地图<br>4、感谢记忆</p><p>毕生发展<br>1、爱的发现<br>2、眼不见、不一定心不烦<br>3、你的品德如何<br>4、让你愉快的控制力</p><p>动机和情绪<br>1、性动机<br>2、我们读懂你的脸<br>3、观察你的脸<br>4、认知失调</p><p>人格<br>1、你能主宰自己的命运吗？<br>2、男性化、女性化还是双性化<br>3、和心脏赛跑<br>4、个人与集体</p><p>心里障碍<br>1、这儿，谁是疯子<br>2、你再次获得防御<br>3、习得性抑郁<br>4、拥挤导致行为失常<br>行为沉沦</p><p>心理治疗<br>1、为自己挑选心理治疗师<br>2、缓解你的恐惧心理<br>3、投射出真正的你<br>4、编个故事吧</p><p>人类互动与社会行为<br>1、斯坦福监狱实验<br>2、从众的力量<br>3、你会伸出援手吗<br>4、无条件服从</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;生活中的心理学&quot;&gt;&lt;a href=&quot;#生活中的心理学&quot; class=&quot;headerlink&quot; title=&quot;生活中的心理学&quot;&gt;&lt;/a&gt;生活中的心理学&lt;/h1&gt;&lt;h2 id=&quot;心理学特色&quot;&gt;&lt;a href=&quot;#心理学特色&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="心理学" scheme="http://fsxchen.github.io/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    
      <category term="心理学" scheme="http://fsxchen.github.io/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>操作系统学习之进程和线程</title>
    <link href="http://fsxchen.github.io/2019/01/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <id>http://fsxchen.github.io/2019/01/07/操作系统学习之进程和线程/</id>
    <published>2019-01-07T14:38:10.000Z</published>
    <updated>2019-05-27T06:37:55.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h2 id="为什么会有进程"><a href="#为什么会有进程" class="headerlink" title="为什么会有进程"></a>为什么会有进程</h2><p>进程是一个计算机工程概念，进程包含一个程序运行的所有资源。<br>进程提供程序的抽象</p><ul><li>一个独立的逻辑流</li><li>一个私有的地址空间<h3 id="逻辑控制流"><a href="#逻辑控制流" class="headerlink" title="逻辑控制流"></a>逻辑控制流</h3>如果使用调试器调试一个程序，就能看到一些列的（PC），这些PC的序列就是逻辑控制流。<h3 id="并发流"><a href="#并发流" class="headerlink" title="并发流"></a>并发流</h3>一个逻辑流的执行在时间上与另一个流重叠，成为并发流，多个流并发地执行的一般现象称为并发。简单理解为同时做多件事。</li></ul><p><strong>并行</strong>： 一般出现在多个CPU上。</p><p><strong>多任务</strong>： 一个进程和其他进程轮流运行的概念。</p><p><strong>时间片</strong>： 一个进程执行他的控制流的每一时间片段。</p><h3 id="私有地址空间"><a href="#私有地址空间" class="headerlink" title="私有地址空间"></a>私有地址空间</h3><p>进程为每个程序提供一个假象，它好在独立的使用系统的地址空间。<br><img src="/2019/01/07/操作系统学习之进程和线程/images/2019/03/31/e4039280-5371-11e9-b8a1-f33e16296d42.png" alt="image.png"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>docker虚拟化技术，基于进程的隔离。</p><h2 id="进程模型"><a href="#进程模型" class="headerlink" title="进程模型"></a>进程模型</h2><p>为什么会存在进程模型？<br>一个进程就是一个正在运行的程序，进程需要有自己的程序计数器（PC），内存空间以及CPU，真实的情况是在计算机中存在有多个进程，然后多个进程在同一时间只有一个使用CPU，所以需要来回切换，于是需要使用进程模型来管理。</p><h3 id="用户模式和内核模式"><a href="#用户模式和内核模式" class="headerlink" title="用户模式和内核模式"></a>用户模式和内核模式</h3><p>处理器通常是用某个控制寄存器的一个模式位（mode bit）来提供。进入内核模式<br>中断、系统错误、系统调用。</p><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><h2 id="创建进程、控制"><a href="#创建进程、控制" class="headerlink" title="创建进程、控制"></a>创建进程、控制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdio.h&quot;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    pid_t pid;</div><div class="line">    int x = 1;</div><div class="line"></div><div class="line">    pid = fork();</div><div class="line">    if (pid == 0) &#123;</div><div class="line">        // child</div><div class="line">        printf(&quot;child: x=%d\n&quot;, ++x);</div><div class="line">        exit(0);</div><div class="line">    &#125;</div><div class="line">    printf(&quot;parrent: x=%d\n&quot;, --x);</div><div class="line">    exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>为什么返回0的是子进程，而在父进程中返回子进程的进程id？</strong><br>在这里fork函数返回了2个值。0和子进程的id，一个父进程有多个子进程，但是一个父进程有多个子进程，如果在子进程中，直接通过getParrentPid这种函数直击就能获取子进程的id了。</p><ul><li>系统初始化</li><li>进程创建的系统调用</li><li>用户创建了一个进程</li><li>批处理作业</li><li></li></ul><h2 id="进程退出"><a href="#进程退出" class="headerlink" title="进程退出"></a>进程退出</h2><ul><li>正常退出(自愿)</li><li>出错退出(自愿)<br>区别于下面的严重错误，这里面的错误是程序逻辑上抛出的错误，也就是说按照默认的规定返回的不是0</li><li>严重错误(非自愿)<br>这里可以理解成我们常说的异常，eg：空指针，除数为0</li><li>被其他进程杀死(非自愿)</li></ul><h2 id="进程的层次结构"><a href="#进程的层次结构" class="headerlink" title="进程的层次结构"></a>进程的层次结构</h2><p>Posix系统中，有子进程和父进程的概念，Posix</p><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><ul><li>运行态</li><li>就绪态（和1类似，但是暂时没有CPU分配）</li><li>阻塞态</li></ul><h2 id="进程模型的实现"><a href="#进程模型的实现" class="headerlink" title="进程模型的实现"></a>进程模型的实现</h2><p>进程表，由操作系统维护，有的叫做进程控制块。</p><p><strong>理解单CPU如何维护多个进程的错觉？</strong><br>每一个IO关联着一个<em>中断向量</em>的位置，靠近内存底部的固定位置。所有的中断都是从保存寄存器开始，这些会动进程的进程表中获取，然后保存起来。堆栈中删除由寄存器保存起来的信息，然后将堆栈指针跳转到中断向量中的地址，</p><h1 id="ps、kill、killall以及proc目录"><a href="#ps、kill、killall以及proc目录" class="headerlink" title="ps、kill、killall以及proc目录"></a>ps、kill、killall以及proc目录</h1><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进程和线程&quot;&gt;&lt;a href=&quot;#进程和线程&quot; class=&quot;headerlink&quot; title=&quot;进程和线程&quot;&gt;&lt;/a&gt;进程和线程&lt;/h1&gt;&lt;h2 id=&quot;为什么会有进程&quot;&gt;&lt;a href=&quot;#为什么会有进程&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="categories" scheme="http://fsxchen.github.io/categories/categories/"/>
    
    
      <category term="tag" scheme="http://fsxchen.github.io/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>python字符串与编码</title>
    <link href="http://fsxchen.github.io/2018/09/30/python/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E7%BC%96%E7%A0%81/"/>
    <id>http://fsxchen.github.io/2018/09/30/python/python字符串与编码/</id>
    <published>2018-09-30T02:21:16.000Z</published>
    <updated>2018-09-30T06:55:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>python字符串处理</p><p><img src="http://7xrn62.com1.z0.glb.clouddn.com/62d2b17171718546fa292071813324a7.png" alt="字符编码"></p><p>1、编辑器的编码</p><p>常见的utf-8、ascii</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div></pre></td></tr></table></figure><p>一般代码中的这一行是指定解释器解释源文件的编码。</p><h3 id="unicode和utf-8关系和区别"><a href="#unicode和utf-8关系和区别" class="headerlink" title="unicode和utf-8关系和区别"></a>unicode和utf-8关系和区别</h3><p><strong>unicode</strong> 一种字符集，规定了了所有字符的二进制编码，但是没有实现如何存储</p><p><strong>utf-8</strong> unicode 的一种在计算机层的实现</p><p>字符之间的转换</p><p><img src="http://7xrn62.com1.z0.glb.clouddn.com/1af742145b4a1cf3b2ca5d7659b9d8e0.png" alt="字符转换"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python字符串处理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrn62.com1.z0.glb.clouddn.com/62d2b17171718546fa292071813324a7.png&quot; alt=&quot;字符编码&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、编辑器的编码&lt;/p&gt;

      
    
    </summary>
    
      <category term="categories" scheme="http://fsxchen.github.io/categories/categories/"/>
    
    
      <category term="tag" scheme="http://fsxchen.github.io/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>golang-错误处理</title>
    <link href="http://fsxchen.github.io/2018/02/06/golang/golang-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://fsxchen.github.io/2018/02/06/golang/golang-错误处理/</id>
    <published>2018-02-06T03:19:17.000Z</published>
    <updated>2018-06-13T03:18:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-错误处理"><a href="#golang-错误处理" class="headerlink" title="golang 错误处理"></a>golang 错误处理</h1><h2 id="error接口"><a href="#error接口" class="headerlink" title="error接口"></a>error接口</h2><p>error的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type error interface &#123;</div><div class="line">  Error() string</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>大多数情况下，error会作为函数的最后一个返回值</strong></p><ul><li>自定义一个错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">type PathError struct &#123;</div><div class="line">  Op string</div><div class="line">  Path string</div><div class="line">  Err error</div><div class="line">&#125;</div><div class="line"></div><div class="line">func (e *PathError) Error() string &#123;</div><div class="line">  return e.Op + &quot; &quot; + e.Path + &quot;:&quot; + e.Err.Error()</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>在<code>defer</code>关键字后面的函数，能够在函数<code>return</code>之前条用。</p><p>用途：</p><p>​    可以用来处理打开的文件描述符等。</p><h2 id="panic-函数和recover（）-函数"><a href="#panic-函数和recover（）-函数" class="headerlink" title="panic() 函数和recover（） 函数"></a>panic() 函数和recover（） 函数</h2><p>用来报告和处理运行时错误和程序中的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func panic(interface())</div><div class="line">func recover() interface()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;golang-错误处理&quot;&gt;&lt;a href=&quot;#golang-错误处理&quot; class=&quot;headerlink&quot; title=&quot;golang 错误处理&quot;&gt;&lt;/a&gt;golang 错误处理&lt;/h1&gt;&lt;h2 id=&quot;error接口&quot;&gt;&lt;a href=&quot;#error接口&quot; c
      
    
    </summary>
    
      <category term="golang" scheme="http://fsxchen.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://fsxchen.github.io/tags/golang/"/>
    
      <category term="error" scheme="http://fsxchen.github.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归</title>
    <link href="http://fsxchen.github.io/2018/01/03/machinelearning/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://fsxchen.github.io/2018/01/03/machinelearning/逻辑回归/</id>
    <published>2018-01-03T12:25:30.000Z</published>
    <updated>2019-10-13T03:27:16.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>逻辑回归是一种分类算法</p><ul><li>优点：计算代价不高，易于理解和实现</li><li>缺点：容易欠拟合，分类精度可能不高。</li></ul><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>解决二分类问题</p><h1 id="为什么线性回归不能解决二分类问题，而需要逻辑回归？"><a href="#为什么线性回归不能解决二分类问题，而需要逻辑回归？" class="headerlink" title="为什么线性回归不能解决二分类问题，而需要逻辑回归？"></a>为什么线性回归不能解决二分类问题，而需要逻辑回归？</h1><p>$$\sigma(z) =  \frac{1}{1+e^-z}$$ </p><p>可以用下面的代码来分析该函数的图形。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&quot;&quot;&quot;Softmax.&quot;&quot;&quot;</div><div class="line"></div><div class="line">scores = [3.0, 1.0, 0.2]</div><div class="line"></div><div class="line">import numpy as np</div><div class="line"></div><div class="line">def softmax(x):</div><div class="line">    &quot;&quot;&quot;Compute softmax values for each sets of scores in x.&quot;&quot;&quot;</div><div class="line">    return np.exp(x) / np.sum(np.exp(x), axis=0)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">print(softmax(scores))</div><div class="line"></div><div class="line"># Plot softmax curves</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">x = np.arange(-2.0, 6.0, 0.1)</div><div class="line">scores = np.vstack([x, np.ones_like(x), 0.2 * np.ones_like(x)])</div><div class="line">print(scores)</div><div class="line"></div><div class="line">plt.plot(x, softmax(scores).T, linewidth=2)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><p><code>Sigmoid</code>函数的输入记为<code>z</code></p><p>$z = w_0x_0 + w_1x_1+w_2x_2 + … + w_nx_n$</p><p>也可以写成 在$z = W^Tx$</p><p>W就是我们要找的最佳参数</p><h2 id="基于最优化方法的最佳回归系数"><a href="#基于最优化方法的最佳回归系数" class="headerlink" title="基于最优化方法的最佳回归系数"></a>基于最优化方法的最佳回归系数</h2><h3 id="梯度上升法"><a href="#梯度上升法" class="headerlink" title="梯度上升法"></a>梯度上升法</h3><p>对于给定的数据集。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逻辑回归&quot;&gt;&lt;a href=&quot;#逻辑回归&quot; class=&quot;headerlink&quot; title=&quot;逻辑回归&quot;&gt;&lt;/a&gt;逻辑回归&lt;/h1&gt;&lt;p&gt;逻辑回归是一种分类算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：计算代价不高，易于理解和实现&lt;/li&gt;
&lt;li&gt;缺点：容易欠拟合，分
      
    
    </summary>
    
      <category term="categories" scheme="http://fsxchen.github.io/categories/categories/"/>
    
    
      <category term="tag" scheme="http://fsxchen.github.io/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>线性代数学习</title>
    <link href="http://fsxchen.github.io/2018/01/03/machinelearning/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%AD%A6%E4%B9%A0/"/>
    <id>http://fsxchen.github.io/2018/01/03/machinelearning/线性代数学习/</id>
    <published>2018-01-03T03:44:28.000Z</published>
    <updated>2018-01-03T05:42:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性代数学习"><a href="#线性代数学习" class="headerlink" title="线性代数学习"></a>线性代数学习</h1><h2 id="标量、矢量、矩阵、张量"><a href="#标量、矢量、矩阵、张量" class="headerlink" title="标量、矢量、矩阵、张量"></a>标量、矢量、矩阵、张量</h2><h3 id="标量scalar"><a href="#标量scalar" class="headerlink" title="标量scalar"></a>标量scalar</h3><p>一个数</p><h3 id="向量vector"><a href="#向量vector" class="headerlink" title="向量vector"></a>向量vector</h3><p>具有方向，可以理解成空间中的一个点的坐标，包含方向信息。</p><h3 id="矩阵matrix"><a href="#矩阵matrix" class="headerlink" title="矩阵matrix"></a>矩阵matrix</h3><h3 id="tensor"><a href="#tensor" class="headerlink" title="tensor"></a>tensor</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性代数学习&quot;&gt;&lt;a href=&quot;#线性代数学习&quot; class=&quot;headerlink&quot; title=&quot;线性代数学习&quot;&gt;&lt;/a&gt;线性代数学习&lt;/h1&gt;&lt;h2 id=&quot;标量、矢量、矩阵、张量&quot;&gt;&lt;a href=&quot;#标量、矢量、矩阵、张量&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python函数介绍</title>
    <link href="http://fsxchen.github.io/2017/11/03/python/Python%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>http://fsxchen.github.io/2017/11/03/python/Python函数介绍/</id>
    <published>2017-11-03T04:52:16.000Z</published>
    <updated>2017-12-24T10:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python函数介绍"><a href="#Python函数介绍" class="headerlink" title="Python函数介绍"></a>Python函数介绍</h1><h2 id="可变长的函数"><a href="#可变长的函数" class="headerlink" title="可变长的函数"></a>可变长的函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def foo(arg1, *args):</div><div class="line">pass</div></pre></td></tr></table></figure><p>把后面所有的参数都放入到args的列表中。使用如下的方式，可以接受可变长的键值对参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def foo(arg1, **kargs):</div><div class="line">pass</div></pre></td></tr></table></figure><p>这个时候kargs是一个字典。</p><h2 id="键值对参数"><a href="#键值对参数" class="headerlink" title="键值对参数"></a>键值对参数</h2><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def func(arg1, arg2=value):</div><div class="line">pass</div></pre></td></tr></table></figure><p>默认参数很方便，当你不传值的时候，就有一个默认值</p><p><strong>注意⚠️⚠️</strong></p><ul><li><strong>如果使用变量来进行初始，只会作用一次</strong></li><li><strong>默认值不能是引用变量</strong></li></ul><p>1、举个🌰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [1]: x = 10</div><div class="line"></div><div class="line">In [2]: def foo(a, b=x):</div><div class="line">   ...:     print(a, b)</div><div class="line">   ...:</div><div class="line"></div><div class="line">In [3]: foo(1)</div><div class="line">1 10</div><div class="line"></div><div class="line">In [4]: x = 20</div><div class="line"></div><div class="line">In [5]: foo(2)</div><div class="line">2 10     # 不会再次初始化，所以还是10</div></pre></td></tr></table></figure><p>2、🌰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [7]: def span(a, b = []):</div><div class="line">   ...:     print(b)</div><div class="line">   ...:     return b</div><div class="line">   ...:</div><div class="line"></div><div class="line">In [8]: x = span(1)</div><div class="line">[]</div><div class="line"></div><div class="line">In [9]: x.append(&quot;hello&quot;)</div><div class="line"></div><div class="line">In [10]: x</div><div class="line">Out[10]: [&apos;hello&apos;]</div><div class="line"></div><div class="line">In [11]: y = span(2)</div><div class="line">[&apos;hello&apos;]</div></pre></td></tr></table></figure><p>其本质原因在于默认参数只会初始化一次值，如果是默认值是引用变量，那么引用的对象发生变化，会对其他的调用产生影响。</p><h2 id="增加参数的元信息"><a href="#增加参数的元信息" class="headerlink" title="增加参数的元信息"></a>增加参数的元信息</h2><pre><code>def add(x:int, y:int) -&gt; int:    return x + y”</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Help on function add in module __main__:</div><div class="line"></div><div class="line">add(x:int, y:int) -&gt; int</div></pre></td></tr></table></figure><p>虽然是这样，但是我们仍然能够给add函数传递任意类型的参数。</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [18]: add = lambda a, b: a + b</div><div class="line"></div><div class="line">In [19]: 3+add(4, 5)</div><div class="line">Out[19]: 12</div></pre></td></tr></table></figure><p>匿名函数的好处就是能够把函数当作表达式的一部分来说过，比较常见的用法在<code>sorted</code>函数中。</p><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>python2.5 以后的特性，偏函数是在函数式编程中的用。简单点的解释就是固定住参数重的某个参数，以此来形成一个新的函数。也有的语言叫这种函数为偏应用函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">In [21]: def foo(a, b, c, d):</div><div class="line">    ...:     print(a, b,c,d)</div><div class="line">In [23]: f1 = partial(foo,1)   # 构成了一个新的函数，这个函数中第一个参数始终为1</div></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [25]: def prefix(pre):</div><div class="line">    ...:     def name(name):</div><div class="line">    ...:         print(pre, name)</div><div class="line">    ...:     return name</div><div class="line">    ...:</div><div class="line"></div><div class="line">In [26]: f = prefix(&quot;hello:&quot;)</div><div class="line"></div><div class="line">In [27]: f(&quot;zhang san&quot;)</div><div class="line">hello: zhang san</div></pre></td></tr></table></figure><p>实际上，闭包是使用<code>__closure__</code>这个属性来实现的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [28]: f.__closure__</div><div class="line">Out[28]: (&lt;cell at 0x10bae03d8: str object at 0x10bb1bdf8&gt;,)</div></pre></td></tr></table></figure><p>这点，闭包和类有点类似。</p><h3 id="构建闭包"><a href="#构建闭包" class="headerlink" title="构建闭包"></a>构建闭包</h3><ul><li>闭包函数必须有内嵌函数，内嵌函数不能和外面函数同名</li><li>内嵌函数需要引用该嵌套函数上一级namespace中的变量</li><li>闭包函数必须返回内嵌函数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python函数介绍&quot;&gt;&lt;a href=&quot;#Python函数介绍&quot; class=&quot;headerlink&quot; title=&quot;Python函数介绍&quot;&gt;&lt;/a&gt;Python函数介绍&lt;/h1&gt;&lt;h2 id=&quot;可变长的函数&quot;&gt;&lt;a href=&quot;#可变长的函数&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>读《算法导论》--排序算法</title>
    <link href="http://fsxchen.github.io/2017/08/19/read/%E8%AF%BB%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://fsxchen.github.io/2017/08/19/read/读《算法导论》-排序算法/</id>
    <published>2017-08-19T07:18:53.000Z</published>
    <updated>2020-03-20T08:24:18.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读《算法导论》–排序算法"><a href="#读《算法导论》–排序算法" class="headerlink" title="读《算法导论》–排序算法"></a>读《算法导论》–排序算法</h1><p>直观感受排序算法</p><p><a href="http://www.sorting-algorithms.com/" target="_blank" rel="external">http://www.sorting-algorithms.com/</a>,</p><p>所有代码参考：</p><p><a href="https://github.com/fsxchen/Algorithms_Python" target="_blank" rel="external">https://github.com/fsxchen/Algorithms_Python</a></p><h2 id="插入排序与冒泡排序"><a href="#插入排序与冒泡排序" class="headerlink" title="插入排序与冒泡排序"></a>插入排序与冒泡排序</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>​    对于插入排序法，最形象的解释就是下面这幅图片。</p><p><img src="/2017/08/19/read/读《算法导论》-排序算法/dc8a5f58ecfcd1af0a5da40abf70794c.png" alt=""></p><p>插入法的主要思想是：遍历一个数组，将遍历的那个数（key）放入到已经排好的数组中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">INSERT-SORT(A)</div><div class="line">    for j = 2, to A.length</div><div class="line">    key = A[j]</div><div class="line"></div><div class="line">    i = j - 1</div><div class="line">    while i &gt; 0 and A[i] &gt; key//key要比当前的对比要大，那么就需要把当前的i往后移动</div><div class="line">        A[i+1] = A[i]</div><div class="line">        i = i -1</div><div class="line">// 执行完wihle之后，i后面这个坑就留给了key</div><div class="line">//为什么是i，应为A[i] &gt; key 不成立，所以应该放在i+1这个坑</div><div class="line">    A[i+1] = key</div></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序的思想就比较简单，遍历序列，然后用这个数和后面所有的来比较，如果这个书比较小，那么就交换位置。</p><p><img src="/2017/08/19/read/读《算法导论》-排序算法/b6da4f9ced1fbafcc87b8d639c71bbbe.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MAOPAO-SORT(A)</div><div class="line">    for j = 1, to A.length</div><div class="line">        for i = j + 1, to A.length</div><div class="line">            if A[j] &gt; A[i]</div><div class="line">        exchange(A[i], A[j])</div></pre></td></tr></table></figure><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p><a href="https://github.com/fsxchen/Algorithms_Python" target="_blank" rel="external">https://github.com/fsxchen/Algorithms_Python</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>对于这两个遍历法排序，时间复杂度都是$O(n^2)$,对于冒泡法，已经没有比较好的方法，因为不管怎样，都是需要遍历的，然后对于插入法排序，还是可以分析一下。</p><ul><li><p>如果将要处理的序列是从小到大已经排好序的？</p><p>$O(n)$</p></li><li><p>如果是从大到小排好的</p><p>$O(n^2)$</p></li></ul><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><strong>（二叉）堆</strong>是一个数组，可以近似看成一个完全二叉树。除了底层之外，其他层是完全充满的。</p><p>对于一个数组A,A.heap-size表示堆的长度，A.length表示数组长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def PARRENT(i):</div><div class="line">return i/2</div><div class="line"></div><div class="line">def LEFT (i):</div><div class="line">return 2i</div><div class="line">def RIGHT:</div><div class="line">return 2i + 1</div></pre></td></tr></table></figure><p><img src="/2017/08/19/read/读《算法导论》-排序算法/4e8b9cf2f489d2ab5bd19c6a46c1bedb.png" alt=""></p><p><strong>最小堆／最大堆</strong>是指A[PARRENT(i)] &lt;=/&gt;= A[i]</p><h3 id="堆性质的维护"><a href="#堆性质的维护" class="headerlink" title="堆性质的维护"></a>堆性质的维护</h3><p>当向一个堆中加入一个数据的时候，如何维护</p><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">MAX-HEAPIFY(A, i):</div><div class="line">left = LEFT(i)</div><div class="line">right = RIGHT(i)</div><div class="line">if l &lt;= A.heap-size and A[l] &gt; A[i]  // 左边的值大于当前节点</div><div class="line">largest = l</div><div class="line">else:</div><div class="line">largest = i                       //注意。这里是记录了当前最大的下标、下标、下标</div><div class="line">if r&lt;= A.heap-seizs and A[r] &gt; A[largest]</div><div class="line">largest = r</div><div class="line">if r != i:</div><div class="line">exchange A[i], A[largest]</div><div class="line">MAX-HEAPIFY(A, largest)</div></pre></td></tr></table></figure><h3 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h3><p>​        <strong>这里需要注意的是，如果把一个长度为n的数组转化成为一个最大堆，也就是说<code>A.length</code>==<code>A.heap-size</code>那么其叶结点的下标为<code>n/2 + 1, ...n</code>!，这里下标是从1开始！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BUILD-M-HEAP(A):</div><div class="line">for i = A.length／2 downto 1</div><div class="line">MAX-HEAPIFY(A, i)</div></pre></td></tr></table></figure><p>​        考虑到这个是自底向上的建堆的方式，从低层，每次都进行一次堆最大性质的维护。那么可以保证该堆是一个最大堆。</p><h3 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SORT-HEAP(A):</div><div class="line">BUILD-M-HEAP(A)</div><div class="line">for i = A.length downto 2:</div><div class="line">exchange A[1] with A[i]</div><div class="line">A.heap-size = A.heap-size-1</div><div class="line">MAX-HEAPIFY(A, 1)</div></pre></td></tr></table></figure><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#coding:utf-8</div><div class="line"></div><div class="line">def PARRENT(i):</div><div class="line">    return int(i/2)</div><div class="line"></div><div class="line">def LEFT(i):</div><div class="line">    return 2 * i + 1</div><div class="line"></div><div class="line">def RIGHT(i):</div><div class="line">    return 2 * i + 2</div><div class="line"></div><div class="line">def MAX_HEAPIFY(A, i, heap_size=None):</div><div class="line">    l = LEFT(i)</div><div class="line">    r = RIGHT(i)</div><div class="line">    if heap_size is None:</div><div class="line">        heap_size = len(A) - 1</div><div class="line">    else:</div><div class="line">        heap_size -= 1</div><div class="line"></div><div class="line">    if l &lt;= heap_size and A[l] &gt; A[i]:</div><div class="line">        largest = l</div><div class="line">    else:</div><div class="line">        largest = i</div><div class="line">    if r &lt;= heap_size and A[r] &gt; A[largest]:</div><div class="line">        largest = r</div><div class="line">    if largest != i:</div><div class="line">        # print &quot;Exchage %d and %d&quot; %(i, largest)</div><div class="line">        A[i], A[largest] = A[largest], A[i]</div><div class="line">        MAX_HEAPIFY(A, largest, heap_size)</div><div class="line"></div><div class="line">def BUILD_MAX_HEAP(A):</div><div class="line">    for i in range(int(len(A))/2, -1, -1):</div><div class="line">        MAX_HEAPIFY(A, i)</div><div class="line"></div><div class="line">def HEAPSORT(A):</div><div class="line">    BUILD_MAX_HEAP(A)</div><div class="line">    heap_size = len(A)</div><div class="line">    print &quot;The MAX_HEAPIFY is&quot;, A</div><div class="line"></div><div class="line">    for i in range((len(A) - 1), 0, -1):</div><div class="line">        A[0], A[i] = A[i], A[0]</div><div class="line">        heap_size -= 1</div><div class="line">        MAX_HEAPIFY(A, 0, heap_size)</div></pre></td></tr></table></figure><h3 id="堆的应用-优先队列"><a href="#堆的应用-优先队列" class="headerlink" title="堆的应用-优先队列"></a>堆的应用-优先队列</h3><p><strong>优先队列</strong>是一种用来维护由一组元素构成的集合S的数据结构，支持</p><ul><li>INSERT(S, x)：把元素x插入到集合S中</li><li>MAXIMUM(S)：返回S中具有最大键字的元素</li><li>EXTRACT-MAX(S)：去掉并返回具有最大键字的元素</li><li>INCREASE-KEY（S, x, k)：将元素x的关键字值增加到k</li></ul><h4 id="如何使用堆来实现优先队列"><a href="#如何使用堆来实现优先队列" class="headerlink" title="如何使用堆来实现优先队列"></a>如何使用堆来实现优先队列</h4><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>核心思想就是归并排序</p><ul><li>分解： 数组A[p, r]将被划分为两个（可能为空）的子数组A[p..q-1]和A[q+1, r]，使得A[p..q-1]中的每一个元素都小于A[q]，A[q+1, r]中的每一个元素都大于A[q]</li><li>解决：通过递归来对子数组来排序</li><li>合并：不需要合并操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">QUICK-SORT(A, p, r)</div><div class="line">if p &lt; r:</div><div class="line">q = PARTITION(A, p, r)</div><div class="line">QUICK-SORT(A, p, q - 1)</div><div class="line">QUICK-SORT(A, q+1 ,r)</div></pre></td></tr></table></figure><p>关键部分在于PARTITION这个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PARTITION(A, p, r):</div><div class="line">x = A[r]//取用最后一个数来分隔</div><div class="line">i = p - 1//i是来跟踪第几个比x小</div><div class="line">for j = p to r -1:</div><div class="line">if A[j] &lt;= x:</div><div class="line">i = i + 1</div><div class="line">exchange A[i] with A[j]</div><div class="line">exchange A[i+1] with A[r]</div><div class="line">return i+1</div></pre></td></tr></table></figure><h3 id="快速排序的随机化版本"><a href="#快速排序的随机化版本" class="headerlink" title="快速排序的随机化版本"></a>快速排序的随机化版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RANDOMIZED-PARTITON(A, p, r):</div><div class="line">i = RANDOM(p, r)</div><div class="line">exchange A[i], A[r]</div><div class="line">return PARTITION(A, p, r)</div></pre></td></tr></table></figure><p>快速排序的优势很明显，首先在时间上，其时间复杂度为$nlgn$，其次，不会占用额外的空间，属于原址排序，节省空间，是一种运用最广泛的排序算法。</p><h2 id="线性时间排序"><a href="#线性时间排序" class="headerlink" title="线性时间排序"></a>线性时间排序</h2><p>任何比较排序法所用的时间最短为$nlgn$</p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>只应用与卡片打孔的机器</p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><h2 id="中位数和顺序统计量"><a href="#中位数和顺序统计量" class="headerlink" title="中位数和顺序统计量"></a>中位数和顺序统计量</h2><h3 id="最小值和最大值"><a href="#最小值和最大值" class="headerlink" title="最小值和最大值"></a>最小值和最大值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MAXIMUM(A):</div><div class="line">max = A[1]</div><div class="line">for i = 2 ro A.length</div><div class="line">if max &lt; A[i]:</div><div class="line">max = A[i]</div></pre></td></tr></table></figure><p>当想要获取一个序列中的一个最大值或者是最小值的时候，可以看到时间复杂度为$n$</p><h4 id="同时找到最大值和最小值"><a href="#同时找到最大值和最小值" class="headerlink" title="同时找到最大值和最小值"></a>同时找到最大值和最小值</h4><p>理论上来讲，最大值需要一次比较，最小值需要一次，一共需$2(n-1)$比较。<strong>如果在每个元素之间比较，然后小值和最小值比较，大的和最大值比较，只需要比较3*n/2次</strong></p><h4 id="找到第i小／大的元素"><a href="#找到第i小／大的元素" class="headerlink" title="找到第i小／大的元素"></a>找到第i小／大的元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">RANDOMZIED-SELECT(A, p, r):</div><div class="line">if p == r</div><div class="line">return A[p]</div><div class="line">q = RANDOMIZED-PARTITION(A, p, r, i)</div><div class="line">k = p - q + 1</div><div class="line">if i == k</div><div class="line">return A[q]</div><div class="line">else if i &lt; k   //那么要找的就在左边</div><div class="line">return RANDOMZIED-SELECT(A, p, q-1, i)</div><div class="line">else</div><div class="line">return RANDOMZIED-SELECT(A, q+1, r, i -k)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;读《算法导论》–排序算法&quot;&gt;&lt;a href=&quot;#读《算法导论》–排序算法&quot; class=&quot;headerlink&quot; title=&quot;读《算法导论》–排序算法&quot;&gt;&lt;/a&gt;读《算法导论》–排序算法&lt;/h1&gt;&lt;p&gt;直观感受排序算法&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http:
      
    
    </summary>
    
      <category term="算法" scheme="http://fsxchen.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://fsxchen.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>读《YOU:身体使用手册》</title>
    <link href="http://fsxchen.github.io/2017/07/28/read/%E8%AF%BB%E3%80%8AYOU-%E8%BA%AB%E4%BD%93%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%E3%80%8B/"/>
    <id>http://fsxchen.github.io/2017/07/28/read/读《YOU-身体使用手册》/</id>
    <published>2017-07-28T02:25:29.000Z</published>
    <updated>2020-03-20T08:26:22.403Z</updated>
    
    <content type="html"><![CDATA[<p>读《YOU-身体使用手册》.md</p><p>自觉的重视和控制健康，身体健康由自己掌握</p><p>控制血压</p><p>戒烟</p><p>每天运动30分钟</p><p>控制精神压力</p><p>简单易行的饮食习惯</p><p>理想血压 115/76</p><p>HDL（高密度蛋白）</p><p>LDL（低密度蛋白）</p><h2 id="心脏和动脉"><a href="#心脏和动脉" class="headerlink" title="心脏和动脉"></a>心脏和动脉</h2><h3 id="心脏：发动机，"><a href="#心脏：发动机，" class="headerlink" title="心脏：发动机，"></a>心脏：发动机，</h3><p>心脏没有神经</p><p>由特殊细胞(称为起搏细胞)发出的电流，由心脏顶部开始向下流动，刺激心肌，将血液挤出，<br>通过主动脉瓣膜。这就像拧湿毛巾一样，把水挤出来。从心脏中流出的血液自动注入主动脉，主动脉是人最大的动脉血管，将富含氧气的血液输送到人体其他部分。这时，心脏会放松下来，就像双手刚刚放开毛巾一样。心脏放松时，位于心脏表面的冠状动脉血管也会放松。于是，紧密的肌肉细胞之间的间隙会张大，刚刚从心脏中流出的富含氧气的血液会注入心脏表面的动脉血管中，流入细胞间隙里，滋养肌肉细胞。流出的大部分血液会继续流动，为身体其他部分提供能量。但是这些过程都发生在心脏为自己供能之后，心脏自己接收滋养生命的第一股血液。</p><p>​<br>​        </p><h3 id="动脉"><a href="#动脉" class="headerlink" title="动脉"></a>动脉</h3><p>分三层</p><p>内膜：又细又滑</p><p>中膜：支撑</p><p>外膜：像“玻璃纸”</p><p>当血管破裂，如果携带胆固醇的蛋白质是LDL，就会引起发炎，然后白细胞形成血栓</p><p>高半胱氨酸？</p><p>在进行长途飞行前，你还应服用162<br>毫克的阿司匹林(即两片幼儿用阿司匹林或半片普通阿司匹林，<br>喝一杯水服下)，稀释血小板浓度，降底发生深静脉血栓的危险。</p><p>运动</p><p>胆固醇：</p><p>​    LDL端固醇（控制反式脂肪和饱和脂肪20克下），</p><p>​    HDL胆固醇，提高HDL（橄榄油、鱼类、核桃）、体育锻炼、维生素B</p><p>高半胱氨酸这是人体消化蛋白质时生出的一种副产品，它会造成动脉血管壁出现破裂或发炎。究其原因，可能是这样一个简单的物理现象:高半胱氨酸由细小晶体构成，这些晶体会直接冲击血管壁，留下坑洞。只要补充叶酸这种维生素(我们建议每天摄入700微克)，就能将过高的高半胱氨酸含量降到正常值。</p><p>​        高敏 C 反应蛋白衡量的是人体发炎的程度，包括了慢性瘘管<br>炎、尿道感染或牙龈发炎等各种情况。这种蛋白质的含量越高，<br>人体患上心脏病的几率也越高。因为体内发生的明显炎症都会增<br>大血管发炎的可能。</p><p><strong>拒绝愤怒和敌意</strong></p><p> <strong>面对抑郁</strong></p><p> <strong>心里压力</strong> 社交活动、公益活动、宗教活动</p><p><strong>健心食谱</strong> </p><p>​    常吃坚果</p><p>​    润滑：橄榄油（单一不饱和脂肪，每周吃鱼3次</p><p><strong>健康的敌人</strong></p><p>​    反式饱和脂肪（人工脂肪）</p><p>​    避免使用单糖</p><p><strong>良药</strong></p><p>​    阿司匹林 （162毫克，不能达到病理需求）</p><p><strong>规律睡眠</strong></p><h2 id="肺"><a href="#肺" class="headerlink" title="肺"></a>肺</h2><p>睡眠呼吸暂停综合症</p><p><strong>深呼吸</strong>： 感受自己的户籍，吸5秒，呼出7秒</p><p><strong>检测</strong>： 快速爬上两层楼</p><p><strong>植物</strong></p><p><strong>镁</strong></p><h2 id="肠胃"><a href="#肠胃" class="headerlink" title="肠胃"></a>肠胃</h2><h3 id="嘴巴"><a href="#嘴巴" class="headerlink" title="嘴巴"></a>嘴巴</h3><p><strong>多吃纤维多喝水</strong></p><p>​    不溶性纤维常见于葡萄柚、橙、葡萄干、果干、<br>甜马铃薯、豌豆和绿皮西葫芦，特别是在全麦或全谷类面包中含<br>量高(一定要全麦面包才含有足量纤维)。</p><p>​    可溶性纤维溶于水，<br>它能调节新陈代谢和消化作用，稳定人体血糖值。它常见于谷类，<br>例如燕麦、大麦和黑麦。豆类中也有可溶纤维，如蚕豆、豌豆和<br>扁豆，一些麦片中也有。</p><p>​    叶酸</p><p>晚餐。摄入大约70大卡热量对健康有益的单不饱和脂肪，<br>即6颗核桃、12颗榛子或20粒花生。</p><p>   <strong>使用亚麻籽</strong></p><p><strong>速溶阿司匹林</strong></p><p><strong>维生素B</strong></p><ul><li>不用洗涤海绵，使用布</li></ul><h2 id="免疫系统"><a href="#免疫系统" class="headerlink" title="免疫系统"></a>免疫系统</h2><p>​    </p><p>​<br>​<br>​    </p><p>​<br>​<br>​    </p><p>​<br>​<br>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;读《YOU-身体使用手册》.md&lt;/p&gt;
&lt;p&gt;自觉的重视和控制健康，身体健康由自己掌握&lt;/p&gt;
&lt;p&gt;控制血压&lt;/p&gt;
&lt;p&gt;戒烟&lt;/p&gt;
&lt;p&gt;每天运动30分钟&lt;/p&gt;
&lt;p&gt;控制精神压力&lt;/p&gt;
&lt;p&gt;简单易行的饮食习惯&lt;/p&gt;
&lt;p&gt;理想血压 115/76&lt;/p&gt;

      
    
    </summary>
    
      <category term="健身" scheme="http://fsxchen.github.io/categories/%E5%81%A5%E8%BA%AB/"/>
    
    
      <category term="健康" scheme="http://fsxchen.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>深度神经网络</title>
    <link href="http://fsxchen.github.io/2017/07/19/machinelearning/%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://fsxchen.github.io/2017/07/19/machinelearning/深度神经网络/</id>
    <published>2017-07-19T06:05:09.000Z</published>
    <updated>2017-07-19T06:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多层神经网络"><a href="#多层神经网络" class="headerlink" title="多层神经网络"></a>多层神经网络</h2><p>一个常用的非线性函数叫 <a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks" target="_blank" rel="external">ReLU（rectified linear unit）</a>)。ReLU 函数对所有负的输入，返回 0；所有 x&gt;0 的输入，返回 x。</p><h3 id="两层神经网络"><a href="#两层神经网络" class="headerlink" title="两层神经网络"></a>两层神经网络</h3><ol><li>第一层由一组 X 的权重和偏差组成并通过 ReLU 函数激活。 这一层的输出会提供给下一层，但是在神经网络的外部不可见，因此被称为<em>隐藏层</em>。</li><li>第二层由隐藏层的权重和偏差组成，隐藏层的输入即为第一层的输出，然后由 softmax 函数来生成概率。</li></ol><p><img src="/2017/07/19/machinelearning/深度神经网络/f1e69551da28b552b7fe657d4133d2cd.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多层神经网络&quot;&gt;&lt;a href=&quot;#多层神经网络&quot; class=&quot;headerlink&quot; title=&quot;多层神经网络&quot;&gt;&lt;/a&gt;多层神经网络&lt;/h2&gt;&lt;p&gt;一个常用的非线性函数叫 &lt;a href=&quot;https://en.wikipedia.org/wiki/Rec
      
    
    </summary>
    
      <category term="MachineLearning" scheme="http://fsxchen.github.io/categories/MachineLearning/"/>
    
    
      <category term="深度学习" scheme="http://fsxchen.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>永恒之蓝勒索软件</title>
    <link href="http://fsxchen.github.io/2017/05/15/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%8B%92%E7%B4%A2%E8%BD%AF%E4%BB%B6/"/>
    <id>http://fsxchen.github.io/2017/05/15/永恒之蓝勒索软件/</id>
    <published>2017-05-15T02:14:26.000Z</published>
    <updated>2018-06-13T03:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p><a href="https://technet.microsoft.com/en-us/library/security/ms17-010.aspx" target="_blank" rel="external">影响范围详细信息</a></p><p>基本上所有的windows系统都会收影响。</p><h2 id="检查相关的端口"><a href="#检查相关的端口" class="headerlink" title="检查相关的端口"></a>检查相关的端口</h2><p>在win+r调出cmd命令界面，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -ano | findstr &quot;445&quot;</div></pre></td></tr></table></figure><p>如果出现下面输出，说明端口开放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator\Desktop&gt;netstat -ano   | findstr &quot;445&quot;</div><div class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</div><div class="line">  TCP    [::]:445               [::]:0                 LISTENING       4</div></pre></td></tr></table></figure><h2 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h2><h3 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h3><p>.请在<strong>控制面板</strong>&gt;<strong>程序</strong>&gt;<strong>启用或关闭windows功能</strong>&gt;<strong>取消勾选SMB1.0/CIFS文件共享</strong>并重启系统。<br>2.打开<strong>控制面板</strong>&gt;<strong>查看网络状态和任务</strong>&gt;<strong>更改适配器设置</strong>&gt;<strong>右键点击正在使用的网卡后点击属性</strong>&gt;<strong>取消勾选Microsoft网络文件和打印机共享</strong>，重启系统。</p><h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><ul><li>windows 32位关闭445端口批处理（dat）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\services\NetBT\Parameters /v SMBDeviceEnabled /T REG_DWORD /D 0 /F&amp;&amp;sc  config LanmanServer start= disabled&amp;&amp;net stop lanmanserver /y</div></pre></td></tr></table></figure><ul><li>windows 64位关闭445端口批处理（dat）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\services\NetBT\Parameters /v SMBDeviceEnabled /T REG_QWORD /D 0 /F&amp;&amp;sc  config LanmanServer start= disabled&amp;&amp;net stop lanmanserver /y</div></pre></td></tr></table></figure><h3 id="配置访问控制策略"><a href="#配置访问控制策略" class="headerlink" title="配置访问控制策略"></a>配置访问控制策略</h3><ol><li>在<code>开始</code>菜单选择<code>运行</code>，输入<code>gpedit.msc</code>后回车，打开本地组策略编辑器。依次展开<code>计算机配置</code>—<code>windows设置</code>—<code>安全设置</code>—<code>ip安全策略,在本地计算机</code></li></ol><ol><li><p>以关闭445端口为例(其他端口操作相同)：</p><p>在本地组策略编辑器右边空白处 右键单击鼠标，选择<code>创建IP安全策略</code>，弹出<code>IP安全策略向导</code>对话框，单击<code>下一步</code>;在出现的对话框中的名称处写”关闭4455端口”(可随意填写)，点击<code>下一步</code>;对话框中的<code>激活默认响应规则</code>选项不要勾选(默认就行)，然后单击<code>下一步</code>;勾选<code>编辑属性</code>(默认就勾选)，单击<code>完成</code>。</p></li><li><p>在出现的<code>关闭445端口属性</code>对话框中，选择<code>规则</code>选项卡，去掉<code>使用 添加向导</code>前边的勾后(在右下角)，单击<code>添加</code>按钮。</p></li><li><p>在弹出的<code>新规则 属性</code>对话框中，选择<code>IP筛选器列表</code>选项卡，单击左下角的<code>添加</code></p></li><li><p>出现添加对话框，名称出填<code>封端口</code>(可随意填写)，去掉<code>使用 添加向导</code>前边的勾后，单击右边的<code>添加</code>按钮</p></li><li><p>在出现的<code>IP筛选器 属性</code>对话框中，选择<code>地址</code>选项卡，<code>源地址</code>选择<code>任何</code>，<code>目标地址</code>选择<code>我的IP地址</code>; 选择<code>协议</code>选项卡，各项设置如图片中所示。设置好后点击<code>确定</code>。</p></li><li><p>返回到<code>ip筛选器列表</code>，点击<code>确定</code>。返回到<code>新规则 属性</code>对话框</p></li><li><p>在<code>ip筛选器列表中</code>选择刚才添加的<code>封端口</code>，然后选择<code>筛选器操作选项卡，去掉</code>使用 添加向导<code>前面的勾，单击</code>添加`按钮</p></li><li><p>在<code>筛选器操作 属性</code>中，选择<code>安全方法</code>选项卡，选择<code>阻止</code>选项;在<code>常规</code>选项卡中，对该操作命名，点<code>确定</code></p></li><li><p>选中刚才新建的<code>新建1</code>，单击关闭，返回到<code>关闭端口 属性</code>对话框，确认<code>IP安全规则</code>中 <code>封端口</code>规则被选中后，单击<code>确定</code></p></li><li><p>在<code>组策略编辑器</code>中，可以看到刚才新建的<code>关闭端口</code>规则，选中它并单击<code>鼠标右键</code>，选择<code>分配</code>选项，使该规则开始应用!</p></li></ol><h3 id="通过防火墙配置"><a href="#通过防火墙配置" class="headerlink" title="通过防火墙配置"></a>通过防火墙配置</h3><ul><li>防火墙配置<br><img src="/2017/05/15/永恒之蓝勒索软件/f5dec524f8740bf0c773d409df184cec.png" alt=""></li><li><p>新建规则<br><img src="/2017/05/15/永恒之蓝勒索软件/525793dc77165e787f9a784b1e210fc0.png" alt=""></p></li><li><p>类型<br><img src="/2017/05/15/永恒之蓝勒索软件/0a9f6ca492c578d33858529a299972f8.png" alt=""></p></li><li><p>端口<br><img src="/2017/05/15/永恒之蓝勒索软件/fc3d0ddac6ea019d9de38fb806c90ef0.png" alt=""></p></li><li><p>操作</p></li></ul><p><img src="/2017/05/15/永恒之蓝勒索软件/95f741f928bb4751659cbb0fe413c34a.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;影响范围&quot;&gt;&lt;a href=&quot;#影响范围&quot; class=&quot;headerlink&quot; title=&quot;影响范围&quot;&gt;&lt;/a&gt;影响范围&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://technet.microsoft.com/en-us/library/security/
      
    
    </summary>
    
      <category term="secrity" scheme="http://fsxchen.github.io/categories/secrity/"/>
    
    
      <category term="安全" scheme="http://fsxchen.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="勒索软件" scheme="http://fsxchen.github.io/tags/%E5%8B%92%E7%B4%A2%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow学习</title>
    <link href="http://fsxchen.github.io/2017/05/14/machinelearning/TensorFlow%E5%AD%A6%E4%B9%A0/"/>
    <id>http://fsxchen.github.io/2017/05/14/machinelearning/TensorFlow学习/</id>
    <published>2017-05-14T02:59:10.000Z</published>
    <updated>2017-07-18T03:04:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TensorFlow学习"><a href="#TensorFlow学习" class="headerlink" title="TensorFlow学习"></a>TensorFlow学习</h1><h2 id="TensorFlow基本概念"><a href="#TensorFlow基本概念" class="headerlink" title="TensorFlow基本概念"></a>TensorFlow基本概念</h2><ul><li>使用graph(图)来表示计算任务</li><li>在使用被称之为<strong>会话</strong>(session)的上下文(contenxt)中执行图</li><li>使用<code>tensor</code>(张量)表示数据</li><li>通过<code>Variable</code>变量维护状态和更新参数。变量包含张量（Tensor）存放于内存的缓存区。</li><li>使用feed和fetch可以为任意的操作(arbitrary operation)赋值或者从其中获取数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [2]: import tensorflow as tf</div><div class="line"></div><div class="line">In [3]: hello = tf.constant("Hello")</div><div class="line"></div><div class="line">In [4]: s = tf.Session()</div><div class="line"></div><div class="line">In [5]: s.run(hello)</div><div class="line">Out[5]: b'Hello'</div><div class="line"></div><div class="line">In [6]: b = tf.constant(10)</div><div class="line"></div><div class="line">In [7]: a = tf.constant(20)</div><div class="line"></div><div class="line">In [8]: s.run(a+b)</div><div class="line">Out[8]: 30</div></pre></td></tr></table></figure><h2 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h2><h2 id="Variable创建变量"><a href="#Variable创建变量" class="headerlink" title="Variable创建变量"></a>Variable创建变量</h2><p>讲一个张量传入构造函数<code>Variable()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">weights = tf.Variable(tf.random_normal([784, 200], stddev=0.35),</div><div class="line">                      name=&quot;weights&quot;)</div><div class="line">biases = tf.Variable(tf.zeros([200]), name=&quot;biases&quot;)</div></pre></td></tr></table></figure><p>常量</p><h2 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h2><p>类似于占位符号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">a = tf.placeholder(tf.int16)</div><div class="line">b = tf.placeholder(tf.int16)</div><div class="line">add = tf.add(a, b)</div><div class="line">mul = tf.mul(a, b)</div><div class="line">with tf.Session() as sess:</div><div class="line">    # Run every operation with variable input</div><div class="line">    print(&quot;Addition with variables: %i&quot; % sess.run(add, feed_dict=&#123;a: 2, b: 3&#125;))</div><div class="line">    print(&quot;Multiplication with variables: %i&quot; % sess.run(mul, feed_dict=&#123;a: 2, b: 3&#125;))</div><div class="line"># output:</div></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h2 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h2><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>损失函数（loss function）是用来估量你模型的预测值$f(x)$与真实值$Y$的不一致程度，它是一个非负实值函数,通常使用$L(Y, f(x))$来表示，损失函数越小，模型的鲁棒性就越好。</p><h3 id="最小二乘法的损失函数"><a href="#最小二乘法的损失函数" class="headerlink" title="最小二乘法的损失函数"></a>最小二乘法的损失函数</h3><p>$$<br>L(Y, f(x)) = \sum^n_{i=1}(Y-f(x))^2<br>$$</p><p>在实际的应用中，常常会使用均方差（MSE）作为衡量指标。<br>$$<br>MSE = \frac{1}{n}(\sum^n_{i=1}(Y-f(x))^2)<br>$$</p><h2 id="线性拟合"><a href="#线性拟合" class="headerlink" title="线性拟合"></a>线性拟合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">import numpy</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">rng = numpy.random</div><div class="line"></div><div class="line"># Parameters</div><div class="line">learning_rate = 0.01</div><div class="line">training_epochs = 2000</div><div class="line">display_step = 50</div><div class="line"></div><div class="line"># Training Data 训练的数据集</div><div class="line">train_X = numpy.asarray([3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,7.042,10.791,5.313,7.997,5.654,9.27,3.1])</div><div class="line">train_Y = numpy.asarray([1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,2.827,3.465,1.65,2.904,2.42,2.94,1.3])</div><div class="line">n_samples = train_X.shape[0]</div><div class="line"></div><div class="line"># tf Graph Input</div><div class="line">X = tf.placeholder(&quot;float&quot;)</div><div class="line">Y = tf.placeholder(&quot;float&quot;)</div><div class="line"></div><div class="line"># Create Model</div><div class="line"></div><div class="line"># Set model weights 训练的模型</div><div class="line">W = tf.Variable(rng.randn(), name=&quot;weight&quot;)</div><div class="line">b = tf.Variable(rng.randn(), name=&quot;bias&quot;)</div><div class="line"></div><div class="line"># Construct a linear model 直线模型</div><div class="line">activation = tf.add(tf.mul(X, W), b)</div><div class="line"></div><div class="line"># Minimize the squared errors</div><div class="line">cost = tf.reduce_sum(tf.pow(activation-Y, 2))/(2*n_samples) #L2 loss</div><div class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost) #Gradient descent</div><div class="line"></div><div class="line"># Initializing the variables</div><div class="line">init = tf.initialize_all_variables()</div><div class="line"></div><div class="line"># Launch the graph</div><div class="line">with tf.Session() as sess:</div><div class="line">    sess.run(init)</div><div class="line"></div><div class="line">    # Fit all training data</div><div class="line">    for epoch in range(training_epochs):</div><div class="line">        for (x, y) in zip(train_X, train_Y):</div><div class="line">            sess.run(optimizer, feed_dict=&#123;X: x, Y: y&#125;)</div><div class="line"></div><div class="line">        #Display logs per epoch step</div><div class="line">        if epoch % display_step == 0:</div><div class="line">            print &quot;Epoch:&quot;, &apos;%04d&apos; % (epoch+1), &quot;cost=&quot;, \</div><div class="line">                &quot;&#123;:.9f&#125;&quot;.format(sess.run(cost, feed_dict=&#123;X: train_X, Y:train_Y&#125;)), \</div><div class="line">                &quot;W=&quot;, sess.run(W), &quot;b=&quot;, sess.run(b)</div><div class="line"></div><div class="line">    print &quot;Optimization Finished!&quot;</div><div class="line">    print &quot;cost=&quot;, sess.run(cost, feed_dict=&#123;X: train_X, Y: train_Y&#125;), \</div><div class="line">          &quot;W=&quot;, sess.run(W), &quot;b=&quot;, sess.run(b)</div><div class="line"></div><div class="line">    #Graphic display</div><div class="line">    plt.plot(train_X, train_Y, &apos;ro&apos;, label=&apos;Original data&apos;)</div><div class="line">    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label=&apos;Fitted line&apos;)</div><div class="line">    plt.legend()</div><div class="line">    plt.show()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TensorFlow学习&quot;&gt;&lt;a href=&quot;#TensorFlow学习&quot; class=&quot;headerlink&quot; title=&quot;TensorFlow学习&quot;&gt;&lt;/a&gt;TensorFlow学习&lt;/h1&gt;&lt;h2 id=&quot;TensorFlow基本概念&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="MachineLearning" scheme="http://fsxchen.github.io/categories/MachineLearning/"/>
    
    
      <category term="TensorFlow" scheme="http://fsxchen.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>主成分分析(PCA)</title>
    <link href="http://fsxchen.github.io/2017/05/11/machinelearning/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/"/>
    <id>http://fsxchen.github.io/2017/05/11/machinelearning/主成分分析-PCA/</id>
    <published>2017-05-11T08:53:00.000Z</published>
    <updated>2017-05-13T13:07:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主成分分析（PCA）"><a href="#主成分分析（PCA）" class="headerlink" title="主成分分析（PCA）"></a>主成分分析（PCA）</h1><p>一套能够适用于各种训练的数据处理方法</p><p>ex: 数据的维度</p><p><img src="/2017/05/11/machinelearning/主成分分析-PCA/4bc6cdd4f35f6c259cc5dd84d013e8ae.png" alt=""></p><p>PCA，将数据的中心作为新的坐标轴，并且旋转<code>X</code>、<code>Y</code>轴</p><p><img src="/2017/05/11/machinelearning/主成分分析-PCA/dff0f1bc914d4dc7fae88057a65138a6.png" alt=""></p><ul><li>优点<ul><li>降低数据的复杂性，识别重要的多个特征</li></ul></li><li>缺点<ul><li>不一定需要，且有可能损失有效信息。</li></ul></li><li>适用数据类型<ul><li>数值型数据</li></ul></li></ul><h2 id="最大方差方向"><a href="#最大方差方向" class="headerlink" title="最大方差方向"></a>最大方差方向</h2><p><img src="/2017/05/11/machinelearning/主成分分析-PCA/d79494b9355ff3e7be46af26ae3e1184.png" alt=""></p><h2 id="sklearn中的PCA"><a href="#sklearn中的PCA" class="headerlink" title="sklearn中的PCA"></a>sklearn中的PCA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">doPCA</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">from</span> sklearn.desomposition <span class="keyword">import</span> PCA</div><div class="line">    pca = PCA(n_components=<span class="number">2</span>)</div><div class="line">    pca.fit(data)</div><div class="line">    <span class="keyword">return</span> pac</div></pre></td></tr></table></figure><h2 id="什么时候需要使用PCA"><a href="#什么时候需要使用PCA" class="headerlink" title="什么时候需要使用PCA"></a>什么时候需要使用PCA</h2><ul><li>想要访问隐藏的特征</li><li>降维</li><li>进行预处理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主成分分析（PCA）&quot;&gt;&lt;a href=&quot;#主成分分析（PCA）&quot; class=&quot;headerlink&quot; title=&quot;主成分分析（PCA）&quot;&gt;&lt;/a&gt;主成分分析（PCA）&lt;/h1&gt;&lt;p&gt;一套能够适用于各种训练的数据处理方法&lt;/p&gt;
&lt;p&gt;ex: 数据的维度&lt;/p
      
    
    </summary>
    
      <category term="MachineLearning" scheme="http://fsxchen.github.io/categories/MachineLearning/"/>
    
    
      <category term="机器学习" scheme="http://fsxchen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://fsxchen.github.io/2017/05/11/python/2015_12_14_%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://fsxchen.github.io/2017/05/11/python/2015_12_14_装饰器/</id>
    <published>2017-05-11T07:42:11.000Z</published>
    <updated>2020-04-07T13:47:48.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>前提知识：python函数（高阶函数）、闭包的概念</p><p>实质：一个函数，参数和返回值是另一个函数/方法</p><p>装饰器是在python2.4之后新加入的.</p><hr><h2 id="如何定义"><a href="#如何定义" class="headerlink" title="如何定义"></a>如何定义</h2><h3 id="自定义的装饰器"><a href="#自定义的装饰器" class="headerlink" title="自定义的装饰器"></a>自定义的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydecorator</span><span class="params">(function)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_mydecorator</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">return</span> function(*args, **kw)</div><div class="line">    <span class="keyword">return</span> _mydecorator</div></pre></td></tr></table></figure><hr><p>测试代码运行时间的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydecorator</span><span class="params">(function)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_mydecorator</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        start = time.time()</div><div class="line">        res = function(*args, **kw)</div><div class="line">        <span class="keyword">print</span> time.time() - start</div><div class="line">        <span class="keyword">return</span> res</div><div class="line">    <span class="keyword">return</span> _mydecorator</div><div class="line"></div><div class="line">foo = mydecorator(foo)</div><div class="line"><span class="meta">@mydecorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="number">2</span>**<span class="number">128</span></div><div class="line"></div><div class="line">foo()</div></pre></td></tr></table></figure><hr><p>使用了<code>@</code>语法糖之后，看着就比较好了。装饰器实际上是一个闭包，装饰器完成了两个操作。</p><p>第一个装饰器中的操作</p><p>第二返回了一个函数</p><hr><h2 id="如何保存被装饰的函数的元数据"><a href="#如何保存被装饰的函数的元数据" class="headerlink" title="如何保存被装饰的函数的元数据"></a>如何保存被装饰的函数的元数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">In [23]: def d(fun):</div><div class="line">    ...:     &quot;&quot;&quot;</div><div class="line">    ...:     this is d</div><div class="line">    ...:     &quot;&quot;&quot;</div><div class="line">    ...:     def _d():</div><div class="line">    ...:         fun()</div><div class="line">    ...:     return _d</div><div class="line">    ...:</div><div class="line">    </div><div class="line">In [24]: @d</div><div class="line">    ...: def e():</div><div class="line">    ...:     &quot;&quot;&quot;</div><div class="line">    ...:     this ie e</div><div class="line">    ...:     &quot;&quot;&quot;</div><div class="line">    ...:     print(&quot;hello e&quot;)</div><div class="line">    </div><div class="line">In [26]: e.__name__</div><div class="line">Out[26]: &apos;_d&apos;</div><div class="line"></div><div class="line">In [27]: e.__annotations__</div><div class="line">Out[27]: &#123;&#125;</div></pre></td></tr></table></figure><p>可以看到，被装饰的函数e的元属性改变了.</p><hr><p><strong>解决方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [29]: from functools import wraps</div><div class="line"></div><div class="line">In [30]: def d(fun):</div><div class="line">    ...:     &quot;&quot;&quot;</div><div class="line">    ...:     this is d</div><div class="line">    ...:     &quot;&quot;&quot;</div><div class="line">    ...:     @wraps(fun)</div><div class="line">    ...:     def _d():</div><div class="line">    ...:         fun()</div><div class="line">    ...:     return _d</div></pre></td></tr></table></figure><hr><h2 id="如何去掉装饰器的效果"><a href="#如何去掉装饰器的效果" class="headerlink" title="如何去掉装饰器的效果"></a>如何去掉装饰器的效果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydecorator</span><span class="params">(function)</span>:</span></div><div class="line"><span class="meta">    @wraps(function)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_mydecorator</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        start = time.time()</div><div class="line">        res = function(*args, **kw)</div><div class="line">        print(time.time() - start)</div><div class="line">        <span class="keyword">return</span> res</div><div class="line">    <span class="keyword">return</span> _mydecorator</div><div class="line"></div><div class="line"><span class="comment"># foo = mydecorator(foo)</span></div><div class="line"><span class="meta">@mydecorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="number">2</span>**<span class="number">128</span>)</div><div class="line"></div><div class="line">foo()</div><div class="line"></div><div class="line">orig_foo = foo.__wrapped__</div><div class="line">orig_foo()</div></pre></td></tr></table></figure><p>上面这个在py3.x才生效.</p><hr><h2 id="让装饰器带上参数"><a href="#让装饰器带上参数" class="headerlink" title="让装饰器带上参数"></a>让装饰器带上参数</h2><p>装饰器带上参数,需要在多加一层包裹的函数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding: utf-8</div><div class="line"></div><div class="line">def mydecorator(arg1, arg2):</div><div class="line">def _mydecorator(function):</div><div class="line">def __mydecorator(*args, **kw):</div><div class="line"># you can check the args before the function</div><div class="line">res = function(*args, **kw)</div><div class="line">return __mydecorator</div><div class="line">return _mydecorator</div></pre></td></tr></table></figure><hr><h3 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">from functools import wraps</div><div class="line">import logging</div><div class="line"></div><div class="line">def logged(level, name=None, message=None):</div><div class="line">    def decorate(func):</div><div class="line">        logging.basicConfig(level=level, format=&apos;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&apos;) </div><div class="line">        logname = name if name else func.__module__</div><div class="line">        log = logging.getLogger(logname)</div><div class="line">        logmsg = message if message else func.__name__</div><div class="line"></div><div class="line">        @wraps(func)</div><div class="line">        def wrapper(*args, **kargs):</div><div class="line">            log.log(level, logmsg)</div><div class="line">            return func(*args, **kargs)</div><div class="line">        return wrapper</div><div class="line">    return decorate </div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    @logged(logging.CRITICAL, &quot;CALL ADD&quot;)</div><div class="line">    def add(a, b):</div><div class="line">        return a + b</div><div class="line">    print add(1, 2)</div></pre></td></tr></table></figure><hr><h3 id="可以调整参数的装饰器"><a href="#可以调整参数的装饰器" class="headerlink" title="可以调整参数的装饰器"></a>可以调整参数的装饰器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">from functools import wraps, partial</div><div class="line">import logging</div><div class="line"></div><div class="line"># </div><div class="line">def attach_wrapper(obj, func=None):</div><div class="line">    if func is None:</div><div class="line">        return partial(attach_wrapper, obj)</div><div class="line">    setattr(obj, func.__name__, func)</div><div class="line">    return func</div><div class="line"></div><div class="line">def logged(level, name=None, message=None):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    Add logging to a function.  level is the logging</div><div class="line">    level, name is the logger name, and message is the</div><div class="line">    log message.  If name and message aren&apos;t specified,</div><div class="line">    they default to the function&apos;s module and name.</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    </div><div class="line">   def decorate(func):</div><div class="line">        logname = name if name else func.__module__</div><div class="line">        log = logging.getLogger(logname)</div><div class="line">        logmsg = message if message else func.__name__</div><div class="line"></div><div class="line">        @wraps(func)</div><div class="line">        def wrapper(*args, **kwargs):</div><div class="line">            log.log(level, logmsg)</div><div class="line">            return func(*args, **kwargs)</div><div class="line"></div><div class="line">        # Attach setter functions</div><div class="line">        @attach_wrapper(wrapper)</div><div class="line">        def set_level(newlevel):</div><div class="line">            nonlocal level</div><div class="line">            level = newlevel</div><div class="line"></div><div class="line">        @attach_wrapper(wrapper)</div><div class="line">        def set_message(newmsg):</div><div class="line">            nonlocal logmsg</div><div class="line">            logmsg = newmsg</div><div class="line"></div><div class="line">        return wrapper</div><div class="line">    return decorate</div><div class="line"></div><div class="line"># Example use</div><div class="line">@logged(logging.DEBUG)</div><div class="line">def add(x, y):</div><div class="line">    return x + y</div><div class="line"></div><div class="line">@logged(logging.CRITICAL, &apos;example&apos;)</div><div class="line">def spam():</div><div class="line">    print(&apos;Spam!&apos;)</div></pre></td></tr></table></figure><hr><h2 id="装饰器的应用场景"><a href="#装饰器的应用场景" class="headerlink" title="装饰器的应用场景"></a>装饰器的应用场景</h2><h3 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h3><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>常用于递归等</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h1&gt;&lt;p&gt;前提知识：python函数（高阶函数）、闭包的概念&lt;/p&gt;
&lt;p&gt;实质：一个函数，参数和返回值是另一个函数/方法&lt;/p&gt;
&lt;p&gt;装饰
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深度学习</title>
    <link href="http://fsxchen.github.io/2017/05/04/machinelearning/2017_05_04_%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://fsxchen.github.io/2017/05/04/machinelearning/2017_05_04_深度学习/</id>
    <published>2017-05-04T08:42:00.000Z</published>
    <updated>2017-07-19T06:01:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><h2 id="Logistic-函数"><a href="#Logistic-函数" class="headerlink" title="Logistic 函数"></a>Logistic 函数</h2><p>​        <strong>Logistic函数或Logistic曲线</strong>是一种常见的S形函数，它是皮埃尔·弗朗索瓦·韦吕勒在1844或1845年在研究它与人口增长的关系时命名的。广义Logistic曲线可以模仿一些情况人口增长（<em>P</em>）的S形曲线。起初阶段大致是<a href="http://baike.baidu.com/item/%E6%8C%87%E6%95%B0%E5%A2%9E%E9%95%BF" target="_blank" rel="external">指数增长</a>；然后随着开始变得饱和，增加变慢；最后，达到成熟时增加停止。[1]<a href=""> </a></p><p>很像一个“S”型吧，所以又叫 sigmoid曲线（S型曲线）。阶跃函数（激活函数）<br>$$<br>y=\sigma(z)<br>$$<br>$\sigma$ 的定义为<br>$$<br>\sigma={1\over 1+e^{-z}}<br>$$<br>python实现Logistic函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"></div><div class="line">def logistic(z):</div><div class="line">    return 1 / (1 + np.exp(-z))</div><div class="line"></div><div class="line"># Plot the logistic function</div><div class="line">z = np.linspace(-6,6,100)</div><div class="line">plt.plot(z, logistic(z), &apos;b-&apos;)</div><div class="line">plt.xlabel(&apos;$z$&apos;, fontsize=15)</div><div class="line">plt.ylabel(&apos;$\sigma(z)$&apos;, fontsize=15)</div><div class="line">plt.title(&apos;logistic function&apos;)</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><h2 id="Logistic函数的导数"><a href="#Logistic函数的导数" class="headerlink" title="Logistic函数的导数"></a>Logistic函数的导数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def logistic_derivative(z):</div><div class="line">return logistic(z) * (1 - logistic(z))</div><div class="line"># Plot the derivative of the logistic function</div><div class="line">z = np.linspace(-6,6,100)</div><div class="line">plt.plot(z, logistic_derivative(z), &apos;r-&apos;)</div><div class="line">plt.xlabel(&apos;$z$&apos;, fontsize=15)</div><div class="line">plt.ylabel(&apos;$\\frac&#123;\\partial \\sigma(z)&#125;&#123;\\partial z&#125;$&apos;, fontsize=15)</div><div class="line">plt.title(&apos;derivative of the logistic function&apos;)</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><h2 id="Logistic回归"><a href="#Logistic回归" class="headerlink" title="Logistic回归"></a>Logistic回归</h2><p>​        logistic回归是一种广义线性回归（generalized linear model），因此与多重线性回归分析有很多相同之处。它们的模型形式基本上相同，都具有 $w‘x+b$，其中w和b是待求参数，其区别在于他们的<a href="http://baike.baidu.com/item/%E5%9B%A0%E5%8F%98%E9%87%8F" target="_blank" rel="external">因变量</a>不同，多重线性回归直接将w’x+b作为因变量，即y =w‘x+b，而logistic回归则通过函数L将w‘x+b对应一个隐状态p，p =L(w‘x+b),然后根据p 与1-p的大小决定因变量的值。如果L是logistic函数，就是logistic回归，如果L是多项式函数就是多项式回归。</p><h2 id="训练一个Logistic回归训练器"><a href="#训练一个Logistic回归训练器" class="headerlink" title="训练一个Logistic回归训练器"></a>训练一个Logistic回归训练器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&quot;&quot;&quot;Softmax.&quot;&quot;&quot;</div><div class="line"></div><div class="line">scores = [3.0, 1.0, 0.2]</div><div class="line"></div><div class="line">import numpy as np</div><div class="line"></div><div class="line">def softmax(x):</div><div class="line">    &quot;&quot;&quot;Compute softmax values for each sets of scores in x.&quot;&quot;&quot;</div><div class="line">    pass  # TODO: Compute and return softmax(x)</div><div class="line">    return np.exp(x) / np.sum(np.exp(x), axis=0)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">print(softmax(scores))</div><div class="line"></div><div class="line"># Plot softmax curves</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">x = np.arange(-2.0, 6.0, 0.1)</div><div class="line">scores = np.vstack([x, np.ones_like(x), 0.2 * np.ones_like(x)])</div><div class="line"></div><div class="line">plt.plot(x, softmax(scores).T, linewidth=2)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><h2 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h2><p><img src="/2017/05/04/machinelearning/2017_05_04_深度学习/d4478d8d845138b81e02a25415ad064e.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def softmax(x):</div><div class="line">return np.exp(x) / np.sum(np.exp(x), axis=0)</div></pre></td></tr></table></figure><h2 id="One-hot-编码"><a href="#One-hot-编码" class="headerlink" title="One-hot 编码"></a>One-hot 编码</h2><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><h2 id="训练集合"><a href="#训练集合" class="headerlink" title="训练集合"></a>训练集合</h2><p><img src="/2017/05/04/machinelearning/2017_05_04_深度学习/a5d25bd08aa42c104a190f6385399b31.png" alt=""></p><h2 id="多层神经网络"><a href="#多层神经网络" class="headerlink" title="多层神经网络"></a>多层神经网络</h2><p>一个常用的非线性函数叫 <a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks" target="_blank" rel="external">ReLU（rectified linear unit）</a>)。ReLU 函数对所有负的输入，返回 0；所有 x&gt;0 的输入，返回 x。</p><p>隐藏层用 ReLU 作为激活函数</p><ul><li>最简单的非线性函数</li></ul><p><img src="/2017/05/04/machinelearning/2017_05_04_深度学习/0e94ee90cddcf9aa6e4922e2bab0b071.png" alt=""></p><h2 id="Tensorflow的解决问题步骤"><a href="#Tensorflow的解决问题步骤" class="headerlink" title="Tensorflow的解决问题步骤"></a>Tensorflow的解决问题步骤</h2><ul><li>1、先定义模型的整体图结构，未知的部分，比如输入就用placeholder来代替。</li><li>2、再定义最后与目标的误差函数。</li><li>3、最后选择优化方法。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深度学习&quot;&gt;&lt;a href=&quot;#深度学习&quot; class=&quot;headerlink&quot; title=&quot;深度学习&quot;&gt;&lt;/a&gt;深度学习&lt;/h1&gt;&lt;h2 id=&quot;Logistic-函数&quot;&gt;&lt;a href=&quot;#Logistic-函数&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="MachineLearning" scheme="http://fsxchen.github.io/categories/MachineLearning/"/>
    
    
      <category term="深度学习" scheme="http://fsxchen.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>特征选择</title>
    <link href="http://fsxchen.github.io/2017/05/04/machinelearning/2017_05_04_%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/"/>
    <id>http://fsxchen.github.io/2017/05/04/machinelearning/2017_05_04_特征选择/</id>
    <published>2017-05-04T08:26:00.000Z</published>
    <updated>2017-05-10T08:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特征的选择"><a href="#特征的选择" class="headerlink" title="特征的选择"></a>特征的选择</h1><ol><li>直觉</li><li>代码找出特征</li><li>可视化</li><li>重复</li></ol><h2 id="去除特征"><a href="#去除特征" class="headerlink" title="去除特征"></a>去除特征</h2><h2 id="特征不等于信息"><a href="#特征不等于信息" class="headerlink" title="特征不等于信息"></a>特征不等于信息</h2><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><h2 id="lasso回归"><a href="#lasso回归" class="headerlink" title="lasso回归"></a>lasso回归</h2><p>能够将不太影响分类的特征的权重设置为0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;特征的选择&quot;&gt;&lt;a href=&quot;#特征的选择&quot; class=&quot;headerlink&quot; title=&quot;特征的选择&quot;&gt;&lt;/a&gt;特征的选择&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;直觉&lt;/li&gt;
&lt;li&gt;代码找出特征&lt;/li&gt;
&lt;li&gt;可视化&lt;/li&gt;
&lt;li&gt;重复&lt;/li&gt;
&lt;/o
      
    
    </summary>
    
      <category term="MachineLearning" scheme="http://fsxchen.github.io/categories/MachineLearning/"/>
    
    
      <category term="机器学习" scheme="http://fsxchen.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
